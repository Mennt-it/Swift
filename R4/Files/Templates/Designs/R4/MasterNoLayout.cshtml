@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>

@{ 
	@* Branding/Fonts *@
	var brandingPageId = Model.Area.Item.GetInt32("BrandingPage");
	var themePageId = Model.Area.Item.GetInt32("ThemesPage");

	var brandingPage = Dynamicweb.Services.Pages?.GetPage(Model.Area.Item.GetInt32("BrandingPage")) ?? null;
	string[] fontList = new string[50];
	int fontCount = 0;

	dynamic headerFont = null;
	string headerFontFamily = "Roboto";
	string headerFontWeight = "300";
	dynamic displayFont = null;
	string displayFontFamily = "Roboto";
	string displayFontWeight = "bold";
	dynamic bodyFont = null;
	string bodyFontFamily = "Roboto";
	string bodyFontWeight = "regular";

	if (brandingPage != null) {
		headerFont = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item["HeaderFont"].ToString());
		if (headerFont != null) {
			headerFontFamily = headerFont.Family;
			headerFontWeight = headerFont.SelectedVariant;
			fontList[fontCount] = headerFontFamily;
			fontCount++;
		}

		displayFont = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item["DisplayFont"].ToString());
		if (displayFont != null) {
			displayFontFamily = displayFont.Family;
			displayFontWeight = displayFont.SelectedVariant;
			fontList[fontCount] = displayFontFamily;
			fontCount++;
		}

		bodyFont = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item["BodyFont"].ToString());
		if (bodyFont != null) {
			bodyFontFamily = bodyFont.Family;
			bodyFontWeight = bodyFont.SelectedVariant;
			fontList[fontCount] = bodyFontFamily;
			fontCount++;
		}
	}
	var fontsToLink = string.Join("%7C", fontList.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("{0}:100,200,300,400,500,600,700,800,900", x)));

	@* Themes *@
	var themesPageParagraphs = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(Model.Area.Item.GetInt32("ThemesPage")) ?? null;

	string masterTheme = !string.IsNullOrEmpty(Model.Area.Item.GetString("Theme")) ? Model.Area.Item.GetString("Theme").ToLower() : "";
	if (masterTheme != "theme default" && masterTheme != "")
	{
		masterTheme = String.Concat(masterTheme.Where(c => !Char.IsWhiteSpace(c)));
		masterTheme = masterTheme.Replace("theme", "");
		masterTheme = " theme theme-" + masterTheme;
	} else {
		masterTheme = "";
	}
}

<!doctype html>
<html lang="@Pageview.Area.CultureInfo.TwoLetterISOLanguageName" class="h-100">

    <head>
        @* Required meta tags *@
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <meta name="viewport" content="height=device-height, width=device-width, initial-scale=1.0">
        <meta name="robots" content="noindex nofollow">
        <meta name="googlebot" content="noindex">
        <meta name="googlebot-news" content="nosnippet">

        <title>@Model.Title</title>

        @* Bootstrap + R4 stylesheet *@
		<link href="~/Files/Templates/Designs/R4/Assets/css/styles.css" rel="stylesheet" type="text/css">

		@* Branding stylesheet *@
		<link href="/Default.aspx?ID=@brandingPageId" rel="stylesheet" type="text/css">

		@* Themes stylesheet *@
		<link href="/Default.aspx?ID=@themePageId" rel="stylesheet" type="text/css">

		@* Fonts *@
		<link rel="preconnect" href="https://fonts.gstatic.com" />
		<link rel="preload" as="style" href="https://fonts.googleapis.com/css?family=@fontsToLink&display=swap"	/>
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=@fontsToLink&display=swap" media="print" onload="this.media='all'" />
		<noscript>
			<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=@fontsToLink&display=swap" />
		</noscript>

	</head>

    <body class="d-flex flex-column min-vh-100 brand@(masterTheme)" style="overflow-x: hidden;">
    
        <main id="page-content" class="overflow-hidden" role="main">
            @ContentPlaceholder()
        </main>
    
        @* Scripts *@
        <script src="~/Files/Templates/Designs/R4/Assets/js/scripts.js" type="text/javascript"></script>
		
    </body>

</html>
