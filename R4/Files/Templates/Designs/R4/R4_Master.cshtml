@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using System
@using Dynamicweb
@using Dynamicweb.Environment
@using Dynamicweb.Frontend

@RenderMetaTags()

@{
	@* Branding Themes Fonts *@
	var brandingPageId = Model.Area.Item.GetLink("BrandingPage") != null ? Model.Area.Item.GetLink("BrandingPage").PageId : 0;
	var themePageId = Model.Area.Item.GetLink("ThemesPage") != null ? Model.Area.Item.GetLink("ThemesPage").PageId : 0;

	var brandingPage = Dynamicweb.Services.Pages?.GetPage(brandingPageId) ?? null;
	var themesParagraphLastChanged = Services.Paragraphs.GetParagraphsByPageId(themePageId).OrderByDescending(p => p.Audit.LastModifiedAt).FirstOrDefault();

	var cssLastModified = brandingPage.Audit.LastModifiedAt > themesParagraphLastChanged.Audit.LastModifiedAt ? brandingPage.Audit.LastModifiedAt : themesParagraphLastChanged.Audit.LastModifiedAt;
	var cssThemeAndBrandingStyleFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath($"~/Files/Templates/Designs/R4/_parsed/R4_css/R4_styles_{Model.Area.ID}.min.css"));

	if (!cssThemeAndBrandingStyleFileInfo.Exists || cssThemeAndBrandingStyleFileInfo.LastWriteTime < brandingPage.Audit.LastModifiedAt)
	{
		//Branding page has been saved or the file is missing. Rewrite the file to disc.
		if (brandingPageId > 0)
		{
			var brandingPageview = Dynamicweb.Frontend.PageView.GetPageviewByPageID(brandingPageId);
			brandingPageview.Redirect = false;
			brandingPageview.Output();
		}
	}


	if (!cssThemeAndBrandingStyleFileInfo.Exists || cssThemeAndBrandingStyleFileInfo.LastWriteTime < themesParagraphLastChanged.Audit.LastModifiedAt)
	{
		//Branding page has been saved or the file is missing. Rewrite the file to disc.
		if (themePageId > 0)
		{
			var themePageview = Dynamicweb.Frontend.PageView.GetPageviewByPageID(themePageId);
			themePageview.Redirect = false;
			themePageview.Output();
		}
	}

	var cssStyleFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("~/Files/Templates/Designs/R4/Assets/css/styles.css"));
	var jsFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("~/Files/Templates/Designs/R4/Assets/js/scripts.js"));


	@* Theme setting for the body *@
	string masterTheme = !string.IsNullOrWhiteSpace(Model.Area.Item.GetRawValueString("Theme")) ? " theme " + Model.Area.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";


	@* Sticky/Fixed header *@
	string headerCssClass = "sticky-top";
	bool movePageBehind = false;
	if (Pageview.Page.PropertyItem != null) { 
		headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
		movePageBehind = headerCssClass == "fixed-top" ? true : false;
	}
	headerCssClass = headerCssClass == "" ? "sticky-top" : headerCssClass;

	@* Google analytics tracking ID *@
	string googleAnalyticsTrackingID = Model.Area.Item.GetString("GoogleAnalyticsTrackingID");
	bool allowCookies = CookieManager.GetCookieOptInLevel() == 0 || !CookieManager.CookieOptInLevelExists ? false : true;
}

<!doctype html>
<html lang="@Pageview.Area.CultureInfo.TwoLetterISOLanguageName" class="min-vh-100">
<head>
	@* Global site tag (gtag.js) - Google Analytics *@
	@if (!string.IsNullOrWhiteSpace(googleAnalyticsTrackingID) && allowCookies)
	{
		<script async src="https://www.googletagmanager.com/gtag/js?id=@googleAnalyticsTrackingID"></script>
		<script>@googleAnalyticsTrackingID</script>
	}

	@* Required meta tags *@
	<meta charset="utf-8">
	<meta name="viewport" content="height=device-height, width=device-width, initial-scale=1.0">
	<link rel="preconnect" href="https://fonts.gstatic.com" />
	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preload" href="~/Files/Templates/Designs/R4/Assets/css/styles.css?@cssStyleFileInfo.LastWriteTime.Ticks" as="style">
	<link rel="preload" href="~/Files/Templates/Designs/R4/Assets/js/scripts.js?@jsFileInfo.LastWriteTime.Ticks" as="script">

	<link rel="shortcut icon" href="~/Files/Templates/Designs/R4/Assets/Images/favicon.png" />
	<link rel="apple-touch-icon" href="~/Files/Templates/Designs/R4/Assets/Images/logo_transparent.png" />
	<meta http-equiv="X-UA-Compatible" content="ie=edge" />
	<meta name="googlebot-news" content="nosnippet">

	@Model.MetaTags

	<title>@Model.Title</title>


	@* Bootstrap + R4 stylesheet *@
	<link href="~/Files/Templates/Designs/R4/Assets/css/styles.css?@cssStyleFileInfo.LastWriteTime.Ticks" rel="stylesheet" media="all" type="text/css">

	@* Branding and Themes min stylesheet *@
	<link href="~/Files/Templates/Designs/R4/_parsed/R4_css/R4_styles_@(Model.Area.ID).min.css?@cssLastModified.Ticks" rel="stylesheet" media="all" type="text/css" data-last-modified-content="@cssLastModified">

	<script src="~/Files/Templates/Designs/R4/Assets/js/scripts.js?@jsFileInfo.LastWriteTime.Ticks" async></script>

	@if (movePageBehind) {
		<script>
			Scroll.init();
		</script>
	}
</head>
<body class="d-flex flex-column min-vh-100 brand@(masterTheme)" style="overflow-x: hidden;" id="page@(Model.ID)">
	<header class="page-header @headerCssClass top-0 d-none d-lg-block" id="page-header-dekstop">
		@if (@Model.Area.Item.GetLink("HeaderDesktop") != null)
		{
			@RenderGrid(@Model.Area.Item.GetLink("HeaderDesktop").PageId) 
		}
	</header>

	<header class="page-header @headerCssClass top-0 d-block d-lg-none" id="page-header-mobile">
		@if (@Model.Area.Item.GetLink("HeaderMobile") != null)
		{
			@RenderGrid(@Model.Area.Item.GetLink("HeaderMobile").PageId)
		}
	</header>

	<main id="content" class="overflow-hidden">
		@ContentPlaceholder()
	</main>


	<footer class="page-footer d-none d-lg-block mt-auto" id="page-footer-desktop">
		@if (@Model.Area.Item.GetLink("FooterDesktop") != null)
		{
			@RenderGrid(@Model.Area.Item.GetLink("FooterDesktop").PageId)
		}
	</footer>

	<footer class="page-footer d-block d-lg-none mt-auto" id="page-footer-mobile">
		@if (@Model.Area.Item.GetLink("FooterMobile") != null)
		{
			@RenderGrid(@Model.Area.Item.GetLink("FooterMobile").PageId)
		}
	</footer>

	@* Render any offcanvas menu here *@
	@RenderSnippet("offcanvas")

</body>
</html>

@helper RenderMetaTags() { 
	@* Verification Tokens *@
	string siteVerificationGoogle = 	Model.Area.Item.GetString("Google_Site_Verification") != null ? Model.Area.Item.GetString("Google_Site_Verification") : "";
	string siteVerificationYandex = 	Model.Area.Item.GetString("Yandex_Verification") != null ? Model.Area.Item.GetString("Yandex_Verification") : "";
	string siteVerificationMS = 		Model.Area.Item.GetString("Msvalidate_01") != null ? Model.Area.Item.GetString("Msvalidate_01") : "";
	string siteVerificationAlexa = 		Model.Area.Item.GetString("AlexaVerifyID") != null ? Model.Area.Item.GetString("AlexaVerifyID") : "";
	string siteVerificationPinterest = 	Model.Area.Item.GetString("P_domain_verify") != null ? Model.Area.Item.GetString("P_domain_verify") : "";
	string siteVerificationNorton = 	Model.Area.Item.GetString("Norton_safeweb_site_verification") != null ? Model.Area.Item.GetString("Norton_safeweb_site_verification") : "";

	@* Generic Site Values *@
	string openGraphFacebookAppID = 	Model.Area.Item.GetString("Fb_app_id") != null ? Model.Area.Item.GetString("Fb_app_id") : "";
	string openGraphType = 				Model.Area.Item.GetString("Open_Graph_Type") != null ? Model.Area.Item.GetString("Open_Graph_Type") : "";
	string openGraphSiteName = 			Model.Area.Item.GetString("Open_Graph_Site_Name") != null ? Model.Area.Item.GetString("Open_Graph_Site_Name") : "";

	string twitterCardSite = 			Model.Area.Item.GetString("Twitter_Site") != null ? Model.Area.Item.GetString("Twitter_Site") : "";

	@* Page specific values *@
	string openGraphSiteTitle = 		Model.Area.Item.GetString("Open_Graph_Title") != null ? Model.Area.Item.GetString("Open_Graph_Title") : "";
	FileViewModel openGraphImage = 		Model.Area.Item.GetFile("Open_Graph_Image");
	string openGraphImageALT = 			Model.Area.Item.GetString("Open_Graph_Image_ALT") != null ? Model.Area.Item.GetString("Open_Graph_Image_ALT") : "";
	string openGraphDescription = 		Model.Area.Item.GetString("Open_Graph_Description") != null ? Model.Area.Item.GetString("Open_Graph_Description") : "";

	string twitterCardURL = 			Model.Area.Item.GetString("Twitter_URL") != null ? Model.Area.Item.GetString("Twitter_URL") : "";
	string twitterCardTitle = 			Model.Area.Item.GetString("Twitter_Title") != null ? Model.Area.Item.GetString("Twitter_Title") : "";
	string twitterCardDescription = 	Model.Area.Item.GetString("Twitter_Description") != null ? Model.Area.Item.GetString("Twitter_Description") : "";
	FileViewModel twitterCardImage = 	Model.Area.Item.GetFile("Twitter_Image");
	string twitterCardImageALT = 		Model.Area.Item.GetString("Twitter_Image_ALT") != null ? Model.Area.Item.GetString("Twitter_Image_ALT") : "";

	if (!string.IsNullOrEmpty(siteVerificationGoogle)) {
		Pageview.Meta.AddTag("google-site-verification", siteVerificationGoogle);
	}

	if (!string.IsNullOrEmpty(siteVerificationYandex)) {
		Pageview.Meta.AddTag("yandex-verification", siteVerificationYandex);
	}

	if (!string.IsNullOrEmpty(siteVerificationMS)) {
		Pageview.Meta.AddTag("msvalidate.01", siteVerificationMS);
	}

	if (!string.IsNullOrEmpty(siteVerificationAlexa)) {
		Pageview.Meta.AddTag("alexaVerifyID", siteVerificationAlexa);
	}

	if (!string.IsNullOrEmpty(siteVerificationPinterest)) {
		Pageview.Meta.AddTag("p:domain_verify", siteVerificationPinterest);
	}

	if (!string.IsNullOrEmpty(siteVerificationNorton)) {
		Pageview.Meta.AddTag("norton-safeweb-site-verification", siteVerificationNorton);
	}

	if (!string.IsNullOrEmpty(openGraphFacebookAppID)) {
		Pageview.Meta.AddTag("fb:app_id", openGraphFacebookAppID);
	}

	if (!string.IsNullOrEmpty(openGraphType)) {
		Pageview.Meta.AddTag("og:type", openGraphType);
	}

	if (!string.IsNullOrEmpty(openGraphSiteName)) {
		Pageview.Meta.AddTag("og:site_name", openGraphSiteName);
	}

	if (!string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString["GroupID"]) && !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString["ProductID"]))
	{
		if(!string.IsNullOrEmpty(Model.Title)) {
			Pageview.Meta.AddTag("og:title", Model.Title);
		}
		else
		{
			Pageview.Meta.AddTag("og:title", openGraphSiteTitle);
		}
		if(!string.IsNullOrEmpty(Model.Description)) {
			Pageview.Meta.AddTag("og:description", Model.Description);
		}
		else
		{
			Pageview.Meta.AddTag("og:description", openGraphDescription);
		}
	}

	if (openGraphImage != null) {
		Pageview.Meta.AddTag("og:image", openGraphImage.Path);
	}

	if (!string.IsNullOrEmpty(openGraphImageALT)) {
		Pageview.Meta.AddTag("og:image:alt", openGraphImageALT);
	}

	if (!string.IsNullOrEmpty(twitterCardSite)) {
		Pageview.Meta.AddTag("twitter:site", twitterCardSite);
	}

	if (!string.IsNullOrEmpty(twitterCardURL)) {
		Pageview.Meta.AddTag("twitter:url", twitterCardURL);
	}

	if (!string.IsNullOrEmpty(twitterCardTitle)) {
		Pageview.Meta.AddTag("twitter:title", twitterCardTitle);
	}

	if (!string.IsNullOrEmpty(twitterCardDescription)) {
		Pageview.Meta.AddTag("twitter:description", twitterCardDescription);
	}

	if (twitterCardImage != null) {
		Pageview.Meta.AddTag("twitter:image", twitterCardImage.Path);
	}

	if (!string.IsNullOrEmpty(twitterCardImageALT)) {
		Pageview.Meta.AddTag("twitter:image:alt", twitterCardImageALT);
	}
}
