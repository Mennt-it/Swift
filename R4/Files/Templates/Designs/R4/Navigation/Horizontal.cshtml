@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using System.Web
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Content
@using System.IO

@RenderFirstLevelNodes(Model.Nodes)


@helper RenderFirstLevelNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{
    string size = Model?.Parameters["Size"] != null  ? Model.Parameters["Size"].ToString() : "normal";
    string navSpacing = size == "small" ? "" : "py-2";
    string smallClass = size == "normal" ? "" : "small";

    <nav class="nav mx-lg-n3 @smallClass">
        @foreach (var node in nodes)
        {
            var hasChildren = node.Nodes.Count() > 0;
            bool hasManyChildren = false;
            foreach (var subnode in node.Nodes)
            {
                if (subnode.Nodes.Any()) {
                    hasManyChildren = true;
                }
            }

            string submenuType = "auto";
            if (submenuType == "auto") {
                submenuType = hasManyChildren ? "megamenu" : "dropdown";
            }

            string megamenuCss = hasChildren && submenuType == "megamenu" ? "has-megamenu" : "";
            string dropdownAttributes = hasChildren ? "id=\"NavGroup" + node.PageId + "\" role=\"button\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"" : "";

            <div class="nav-item @smallClass @(node.IsActive ? "active" : "") @megamenuCss">
                @if (node.IsClickable)
                {
                    <a class="nav-link nav-link-clean @(node.IsActive ? "active" : "") @(hasChildren ? "dropdown-toggle" : "")" href="@(hasChildren ? "#" : node.Link)" title="@node.Name" @dropdownAttributes>
                        @RenderNavigationItem(node)
                    </a>
                } else {
                    <span class="nav-link nav-link-clean" title="@node.Name" @dropdownAttributes>
                        @RenderNavigationItem(node)
                    </span>
                }

                @if (hasChildren)
                {
                    if (submenuType == "megamenu") {
                        <div class="dropdown-menu megamenu border-0 rounded-0 py-5 shadow-lg" id="NavGroup@(node.PageId)">
                            <div class="container">
                                <div class="row g-5">
                                    @foreach (var subnode in node.Nodes)
                                    {
                                        <div class="col-3">
                                            <a href="@subnode.Link" class="text-decoration-none text-reset">
                                                <h5 class="megamenu-link mb-4">@subnode.Name</h5>
                                            </a>
                                            @if (subnode.Nodes.Any())
                                            {
                                                foreach (var subsubnode in subnode.Nodes)
                                                {
                                                    <a class="d-block w-100 text-nowrap py-1 font-size-sm text-decoration-none text-reset megamenu-link small overflow-hidden" href="@subsubnode.Link">@subsubnode.Name</a>
                                                }
                                            }
                                            else 
                                            {
                                                <a class="d-block w-100 text-nowrap py-1 font-size-sm text-decoration-none text-reset megamenu-link overflow-hidden" href="@subnode.Link">@subnode.Name</a>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    } else {
                        var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
                        string pageType = page.ItemType;

                        <ul class="dropdown-menu rounded-0 theme theme-light" aria-labelledby="NavGroup@(node.PageId)">
                            @if (pageType == "R4_SignIn")
							{
                                if (Pageview.User == null) {
                                    <li>
                                        <div class="dropdown-item py-2">
                                            <a href="@node.Link" class="btn btn-primary w-100 m-0">@node.Name</a>
                                        </div>
                                    </li>
                                }
							}

                            @foreach (var subnode in node.Nodes)
                            {
                                <li>
                                    <a class="dropdown-item py-2" href="@subnode.Link">@subnode.Name</a>
                                </li>
                            }

                            @if (pageType == "R4_SignIn")
							{
                                if (Pageview.User != null) {
                                    <li>
                                        <div class="dropdown-item py-2">
                                            <a href="/Admin/Public/ExtranetLogoff.aspx?ID=@Pageview.Page.ID" class="btn btn-primary m-0 w-100">@Translate("Sign out")</a>
                                        </div>
                                    </li>
                                }
							}
                        </ul>
                    }  
                }
            </div>
        }
    </nav>
}

@helper RenderNavigationItem(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node) { 
    var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
    string pageType = page.ItemType;
    
    string textPosition = Model?.Parameters["TextPosition"] != null ? Model.Parameters["TextPosition"].ToString() : "right";
    bool hideTexts = Model?.Parameters["HideTexts"] != null  ? Convert.ToBoolean(Model.Parameters["HideTexts"].ToString()) : false;
    bool hideIcons = Model?.Parameters["HideIcons"] != null  ? Convert.ToBoolean(Model.Parameters["HideIcons"].ToString()) : false;

    string icon = page.Item["Icon"] != null ? page.Item["Icon"].ToString() : "";

    <div class="d-inline-block">
        @if (pageType == "R4_Checkout") {
			double totalProducts = 0;
			if (Dynamicweb.Ecommerce.Common.Context.Cart != null) {
            	totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentProductLineQuantityCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
			}

			if (hideTexts) {
				if (Path.GetExtension(icon).ToLower() == ".svg") {
                    <div class="d-flex flex-row align-items-center position-relative">
                        @RenderIcon(icon)
                        <div class="minicart-counter position-absolute rounded-circle start-100 top-0 translate-middle text-center d-flex justify-content-center align-items-center" style="width: 1.2rem; height: 1.2rem;">
                            <span class="fs-8"><span class="js-cart-qty">@totalProducts</span></span>
                        </div>
                    </div>
                }
            } else if (hideIcons) {
                <div>@node.Name</div>
            } else {
                if (textPosition == "bottom") {
                    <div class="d-flex flex-column align-items-center position-relative">
                        @RenderIcon(icon)
                        <div class="mt-0">@node.Name (<span class="js-cart-qty">@totalProducts</span>)</div>
                    </div>
                }
                if (textPosition == "left") {
                    <div class="d-flex flex-row align-items-center position-relative">
                        <div class="me-2">@node.Name (<span class="js-cart-qty">@totalProducts</span>)</div>
                        @RenderIcon(icon)
                    </div>
                }
                if (textPosition == "right") {
                    <div class="d-flex flex-row align-items-center position-relative">
                        @RenderIcon(icon, "me-2")
                        <div>@node.Name (<span class="js-cart-qty">@totalProducts</span>)</div>
                    </div>
                }
            }
		} else {
            if (hideTexts) {
                if (Path.GetExtension(icon).ToLower() == ".svg") {
                    <div class="d-flex flex-row align-items-center position-relative">
                        @RenderIcon(icon)
                    </div>
                }
            } else if (hideIcons) {
                <div>@node.Name</div>
            } else {
                if (textPosition == "bottom") {
                    <div class="d-flex flex-column align-items-center position-relative">
                        @RenderIcon(icon)
                        <div class="mt-0">@node.Name</div>
                    </div>
                }
                if (textPosition == "left") {
                    <div class="d-flex flex-row align-items-center position-relative">
                        <div class="me-2">@node.Name</div>
                        @RenderIcon(icon)
                    </div>
                }
                if (textPosition == "right") {
                    <div class="d-flex flex-row align-items-center position-relative">
                        @RenderIcon(icon, "me-2")
                        <div>@node.Name</div>
                    </div>
                }
            }
		}
    </div>   
}

@helper RenderIcon(string icon, string cssClass = "") { 
    if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none")) {
        string iconPath = HttpContext.Current.Server.MapPath(icon);

        if (File.Exists(iconPath)) {
            <div class="icon-container @cssClass">
                @System.IO.File.ReadAllText(iconPath)   
            </div>
	    }
    }
}



