@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using System.Web
@using System.IO

@RenderNodes(Model.Nodes)

@helper RenderNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, bool isSubmenu = false)
{
    int nodeCount = 0;
    int totalNodes = nodes.Count();

    <ul class="nav flex-column">
        @foreach (var node in nodes)
		{
			var hasChildren = node.Nodes.Count() > 0;
			string groupId = !string.IsNullOrEmpty(node.GroupId) ? node.GroupId : node.PageId.ToString();

            string layoutSetting = Model.Parameters.ContainsKey("Layout") ? Model.Parameters["Layout"].ToString().ToLower() : "clean";
            string linesLayout = layoutSetting == "lines" && isSubmenu == false ? "border-bottom px-3 py-2" : "";
            linesLayout = layoutSetting == "lines" && isSubmenu == false && nodeCount == (totalNodes - 1) ? "px-3 py-2" : linesLayout;
            bool hideTexts = Model.Parameters.ContainsKey("HideTexts") ? Convert.ToBoolean(Model.Parameters["HideTexts"].ToString()) : false;
            bool hideIcons = Model.Parameters.ContainsKey("HideIcons") ? Convert.ToBoolean(Model.Parameters["HideIcons"].ToString()) : false;

            var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
            string icon = page.Item["Icon"] != null ? page.Item["Icon"].ToString() : "";

            <li class="nav-item @(node.IsActive ? "active" : "") @linesLayout">
                <div class="d-flex align-items-center">
                    <a class="nav-link px-0 flex-fill" aria-current="page" href="@node.Link" title="@node.Name">
                        @if (!hideIcons) {
                            @RenderIcon(icon) 
						}
                        @if (!hideTexts) {
                            <span class="@(node.IsActive ? "fw-bold" : "")">@node.Name</span>
                        }
                    </a>

                    @if (hasChildren) {
						string collapseCSS = node.InPath ? "" : "collapsed";

                        <div class="@collapseCSS collapse-icon" data-bs-toggle="collapse" data-bs-target="#NavigationGroup_@groupId" role="button" aria-expanded="true" aria-controls="NavigationGroup_@node.GroupId"></div>
                    }
                </div>
                @if (hasChildren) {
                    string collapsed = node.InPath ? "show" : "";

                    <div class="ms-3 collapse @collapsed" id="NavigationGroup_@groupId">
                        @RenderNodes(node.Nodes, true)
                    </div>  
                }
            </li>

			nodeCount++;
		}
    </ul>
}

@helper RenderIcon(string icon) { 
    if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none")) {
        string iconPath = HttpContext.Current.Server.MapPath(icon);

        if (File.Exists(iconPath)) {
            <span class="icon-container me-1">
                @System.IO.File.ReadAllText(iconPath)   
            </span>
	    }
    }
}
