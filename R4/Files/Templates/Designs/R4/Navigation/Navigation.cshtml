@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using System.Web
@using System.IO

@RenderFirstLevelNodes(Model.Nodes)


@helper RenderFirstLevelNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{string contentPadding = Model?.Parameters["ContentPadding"] != null ? Model.Parameters["ContentPadding"].ToString() : "none";

	if (contentPadding == "none")
	{
		contentPadding = "px-3 py-2";
	}
	if (contentPadding == "small")
	{
		contentPadding = "px-2 py-1";
	}
	if (contentPadding == "large")
	{
		contentPadding = "px-4 py-3";
	}

	string hoverTheme = Model?.Parameters["hoverTheme"] != null ? Model.Parameters["hoverTheme"].ToString() : "";
	if (hoverTheme != "theme default" && hoverTheme != "")
	{
		hoverTheme = String.Concat(hoverTheme.Where(c => !Char.IsWhiteSpace(c)));
		hoverTheme = hoverTheme.Replace("theme", "");
		hoverTheme = "theme-hover theme-" + hoverTheme;

	}
	else
	{
		hoverTheme = "";
	}

	foreach (var node in nodes)
	{
		var hasChildren = node.Nodes.Count() > 0;

		string dropdownAttributes = hasChildren ? " role=\"button\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"" : "";

		if (node.IsClickable)
		{
			<a class="nav-link nav-link-clean @(contentPadding) @(hoverTheme) @(node.IsActive ? " active" : "")@(hasChildren ? " dropdown-toggle" : "")" href="@(hasChildren ? "#" : node.Link)" title="@node.Name" @dropdownAttributes>
				@RenderNavigationItem(node)
			</a>
		}
		else
		{
			<span class="nav-link nav-link-clean" title="@node.Name" @dropdownAttributes>
				@RenderNavigationItem(node)
			</span>
		}

		if (hasChildren)
		{
			var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
			string pageType = page.ItemType;

			<ul class="dropdown-menu border-0 rounded-0" aria-labelledby="NavGroup@(node.PageId)">
				@if (pageType == "R4_SignIn")
				{
					if (Pageview.User == null)
					{
						<li class="dropdown-item py-2">
							<a href="@node.Link" class="btn btn-primary w-100 m-0">@node.Name</a>
						</li>
					}
				}
				@foreach (var subnode in node.Nodes)
				{
					<li>
						<a class="dropdown-item py-2" href="@subnode.Link">@subnode.Name</a>
					</li>
				}
				@if (pageType == "R4_SignIn")
				{
					if (Pageview.User != null)
					{
						<li class="dropdown-item py-2">
							<a href="/Admin/Public/ExtranetLogoff.aspx?ID=@Pageview.Page.ID" class="btn btn-primary m-0 w-100">@Translate("Sign out")</a>
						</li>
					}
				}
			</ul>
		}
	}
}

@helper RenderNavigationItem(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node)
{
	var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
	string pageType = page.ItemType;

	string icon = page.Item["Icon"] != null ? page.Item["Icon"].ToString() : "";
	string layout = Model?.Parameters["Layout"] != null ? Model.Parameters["Layout"].ToString() : "";

	if (pageType == "R4_Checkout")
	{
		double totalProducts = 0;

		if (Dynamicweb.Ecommerce.Common.Context.Cart != null)
		{
			totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentProductLineQuantityCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
		}

		if (layout == "linksOnly")
		{
			<span>@node.Name</span>
		}

		if (layout == "iconsOnly")
		{
			if (Path.GetExtension(icon).ToLower() == ".svg")
			{
				@RenderIcon(icon)
				<span class="ms-1 js-cart-qty">@totalProducts</span>
			}
		}

		if (layout == "iconsAndLinks")
		{
			if (Path.GetExtension(icon).ToLower() == ".svg")
			{
				@RenderIcon(icon)
				<span class="ms-1 js-cart-qty">@totalProducts</span>
				<span>@node.Name</span>

			}
		}
	}
	else
	{
		if (layout == "linksOnly")
		{
			<div>@node.Name</div>
		}

		if (layout == "iconsOnly")
		{
			@RenderIcon(icon)
		}

		if (layout == "iconsAndLinks")
		{
			@RenderIcon(icon)
			<span>@node.Name</span>
		}
	}
}

@helper RenderIcon(string icon)
{
	if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none"))
	{
		string iconPath = HttpContext.Current.Server.MapPath(icon);

		if (File.Exists(iconPath))
		{
			<span class="icon-3">
				@System.IO.File.ReadAllText(iconPath)
			</span>
		}
	}
}
