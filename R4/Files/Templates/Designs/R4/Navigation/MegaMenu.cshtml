@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using System.Web
@using System.IO

@{ 
	string theme = Model.Parameters["theme"].ToString();
	string navAlignment = Model.Parameters["NavAlignment"].ToString();
	string linkFontWeight = Model.Parameters["LinkFontWeight"].ToString();
	string linkCasing = Model.Parameters["LinkCasing"].ToString();
	string linkFontSize = Model.Parameters["LinkFontSize"].ToString();
}

<nav class="d-none d-lg-flex nav flex-nowrap mx-n3 @navAlignment">
	@RenderFirstLevelNodes(Model.Nodes, theme, linkFontWeight, linkCasing, linkFontSize)
</nav>

<nav class="d-flex d-lg-none nav flex-nowrap mx-n3">
	@RenderFirstLevelNodesMobile(Model.Nodes, linkFontWeight, linkCasing, linkFontSize)
</nav>

@helper RenderFirstLevelNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, string theme, string linkFontWeight, string linkCasing, string linkFontSize)
{
	string dropdownAlignment = Model.Parameters["DropdownAlignment"].ToString();
	string dropdownLinkHeaderFontWeight = Model.Parameters["DropdownLinkHeaderFontWeight"].ToString();
	string dropdownLinkHeaderCasing = Model.Parameters["DropdownLinkHeaderCasing"].ToString();
	string dropdownLinkHeaderFontSize = Model.Parameters["DropdownLinkHeaderFontSize"].ToString();
	string dropdownLinkFontWeight = Model.Parameters["DropdownLinkFontWeight"].ToString();
	string dropdownLinkCasing = Model.Parameters["DropdownLinkCasing"].ToString();
	string dropdownLinkFontSize = Model.Parameters["DropdownLinkFontSize"].ToString();

	foreach (var node in nodes)
	{
		var hasChildren = node.Nodes.Count() > 0;
		string dropdownAttributes = hasChildren ? " role=\"button\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"" : "";

		bool hasManyChildren = false;
		foreach (var subnode in node.Nodes)
		{
			if (subnode.Nodes.Any())
			{
				hasManyChildren = true;
			}
		}
		string submenuType = "auto";

		if (submenuType == "auto")
		{
			submenuType = hasManyChildren ? "megamenu" : "dropdown";
		}

		<div class="nav-item has-megamenu@(node.IsActive ? " active" : "")">

			@if (node.IsClickable)
			{
				<a class="nav-link nav-link-clean @linkFontWeight @linkCasing @linkFontSize@(theme)@(node.IsActive ? " active" : "")@(hasChildren ? " dropdown-toggle" : "")" href="@(hasChildren ? "#" : node.Link)" title="@node.Name" @dropdownAttributes>
					@RenderNavigationItem(node)
				</a>
			}
			else
			{
				<span class="nav-link nav-link-clean @linkFontWeight @linkCasing @linkFontSize" title="@node.Name" @dropdownAlignment>
					@RenderNavigationItem(node)
				</span>
			}

			@if (hasChildren)
			{
				if (submenuType == "megamenu")
				{
					<div class="dropdown-menu megamenu px-3 py-4 mt-n1@(theme)" id="NavGroup@(node.PageId)">
						<div class="container-xl">
							<div class="row @dropdownAlignment">
								@foreach (var subnode in node.Nodes)
								{
									<div class="col-2">
										<a href="@subnode.Link" class="nav-link mx-n3">
											<h6 class="m-0 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
										</a>
										@if (subnode.Nodes.Any())
										{
											foreach (var subsubnode in subnode.Nodes)
											{
												<a class="nav-link mx-n3" href="@subsubnode.Link">
													<span class="@dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
												</a>
											}
										}
										else
										{
											<a class="nav-link mx-n3" href="@subnode.Link">
												<span class="@dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subnode.Name</span>
											</a>
										}
									</div>
								}
							</div>
						</div>
					</div> 
					}
				else
				{
					var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
					string pageType = page.ItemType;

					<ul class="dropdown-menu@(theme)" aria-labelledby="NavGroup@(node.PageId)">
						@if (pageType == "R4_SignIn")
						{
							if (Pageview.User == null)
							{
								<li class="dropdown-item">
									<a href="@node.Link" class="btn btn-primary w-100 m-0 @linkFontWeight @linkCasing @linkFontSize">@node.Name</a>
								</li>
							}
						}

						@foreach (var subnode in node.Nodes)
						{
							<li>
								<a class="dropdown-item @linkFontWeight @linkCasing @linkFontSize" href="@subnode.Link">@subnode.Name</a>
							</li>
						}

						@if (pageType == "R4_SignIn")
						{
							if (Pageview.User != null)
							{
								<li class="dropdown-item">
									<a href="/Admin/Public/ExtranetLogoff.aspx?ID=@Pageview.Page.ID" class="btn btn-primary m-0 w-100 @linkFontWeight @linkCasing @linkFontSize">@Translate("Sign out")</a>
								</li>
							}
						}
					</ul>
				}
			}
		</div>
	}
}

@helper RenderFirstLevelNodesMobile(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, string linkFontWeight, string linkCasing, string linkFontSize)
{
	foreach (var node in nodes)
	{
		var hasChildren = node.Nodes.Count() > 0;

		if (node.IsClickable)
		{
			<a class="nav-link nav-link-clean text-nowrap @linkFontWeight @linkCasing @linkFontSize @(node.IsActive ? " active" : "")" href="@node.Link" title="@node.Name">
				@RenderNavigationItem(node)
			</a>
		}
		else
		{
			<span class="nav-link nav-link-clean text-nowrap @linkFontWeight @linkCasing @linkFontSize" title="@node.Name">
				@RenderNavigationItem(node)
			</span>
		}
	}
}

@helper RenderNavigationItem(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node)
{
	var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
	string pageType = page.ItemType;
	string linkFontSize = Model.Parameters["LinkFontSize"].ToString();
	string layout = Model?.Parameters["Layout"].ToString();
	string icon = page.Item["Icon"] != null ? page.Item["Icon"].ToString() : "";
	string iconSize = "icon-3";

	if (linkFontSize == "fs-7")
	{
		iconSize = "icon-2";
	}
	if (linkFontSize == "fs-5")
	{
		iconSize = "icon-4";
	}

	if (pageType == "R4_Cart")
	{
		double totalProducts = 0;

		if (Dynamicweb.Ecommerce.Common.Context.Cart != null)
		{
			totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentProductLineQuantityCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
		}

		switch (layout)
		{
			case "linksOnly":
				<span class="align-middle">@node.Name</span>
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
			break;
		case "iconsOnly":
			@RenderIcon(icon, iconSize)
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				break;
			case "iconsAndLinks":
				@RenderIcon(icon, iconSize)
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				<span class="align-middle">@node.Name</span>
				break;
			case "linksAndIcons":
				<span class="align-middle">@node.Name</span>
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				@RenderIcon(icon, iconSize)
				break;
		}
	}
	else
	{
		switch (layout)
		{
			case "linksOnly":
				<span class="align-middle">@node.Name</span>
				break;

			case "iconsOnly":
				@RenderIcon(icon, iconSize)
				break;
			case "iconsAndLinks":
				@RenderIcon(icon, iconSize)
				<span class="align-middle">@node.Name</span>
				break;
			case "linksAndIcons":
				<span class="align-middle">@node.Name</span>
				@RenderIcon(icon, iconSize)
				break;
		}
	}
}

@helper RenderIcon(string icon, string iconSize)
{
	if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none"))
	{
		string iconPath = HttpContext.Current.Server.MapPath(icon);

		<span class="@iconSize">
			@ReadFile(iconPath)
		</span>
	}
}

