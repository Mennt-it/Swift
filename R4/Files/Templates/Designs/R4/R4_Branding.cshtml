@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb.Frontend
@MasterPageFile("MasterClean.cshtml")
@{
	List<string> fontList = new List<string>();

	GoogleFontViewModel headerFont = null;
	string headerFontFamily = "Roboto";
	string headerFontWeight = "300";
	string headerCasing = "inherit";
	double headerLineHeight = 1.2;
	double headerLetterSpacing = 0;
	GoogleFontViewModel displayFont = null;
	string displayFontFamily = "Roboto";
	string displayFontWeight = "bold";
	string displayCasing = "inherit";
	double displayLineHeight = 1.2;
	double displayLetterSpacing = 0;
	GoogleFontViewModel bodyFont = null;
	string bodyFontFamily = "Roboto";
	string bodyFontWeight = "regular";
	string bodyCasing = "inherit";
	double bodyLineHeight = 1.4;
	double bodyLetterSpacing = 0;

	string primaryButtonFontWeight = "normal";
	string primaryButtonCasing = "inherit";
	string primaryButtonShape = "0";
	string primaryButtonFontSize = "inherit";
	string primaryButtonPaddingX = "inherit";
	string primaryButtonPaddingY = "inherit";

	string secondaryButtonFontWeight = "normal";
	string secondaryButtonCasing = "inherit";
	string secondaryButtonShape = "0";
	string secondaryButtonFontSize = "inherit";
	string secondaryButtonPaddingX = "inherit";
	string secondaryButtonPaddingY = "inherit";

	if (Model.Item != null)
	{
		@* HEADER font*@
		headerFont = Model.Item.GetGoogleFont("HeaderFont");
		if (headerFont != null)
		{
			headerFontFamily = headerFont.Family;
			headerFontWeight = headerFont.Weight;
			fontList.Add(headerFontFamily);
		}
		headerCasing = Model.Item.GetRawValueString("HeaderCasing");
		headerLineHeight = Model.Item.GetDouble("HeaderLineHeight");
		headerLetterSpacing = Model.Item.GetDouble("HeaderLetterSpacing");

		@* DISPLAY font*@
		displayFont = Model.Item.GetGoogleFont("DisplayFont");
		if (displayFont != null)
		{
			displayFontFamily = displayFont.Family;
			displayFontWeight = displayFont.Weight;
			fontList.Add(displayFontFamily);
		}
		displayCasing = Model.Item.GetRawValueString("DisplayCasing");
		displayLineHeight = Model.Item.GetDouble("DisplayLineHeight");
		displayLetterSpacing = Model.Item.GetDouble("DisplayLetterSpacing");

		@* BODY font*@
		bodyFont = Model.Item.GetGoogleFont("BodyFont");
		if (bodyFont != null)
		{
			bodyFontFamily = bodyFont.Family;
			bodyFontWeight = bodyFont.Weight;
			fontList.Add(bodyFontFamily);
		}
		bodyCasing = Model.Item.GetRawValueString("BodyCasing");
		bodyLineHeight = Model.Item.GetDouble("BodyLineHeight");
		bodyLetterSpacing = Model.Item.GetDouble("BodyLetterSpacing");

		@* Primary button *@
		primaryButtonFontWeight = Model.Item.GetRawValueString("PrimaryButtonFontWeight", "normal");
		primaryButtonCasing = Model.Item.GetRawValueString("PrimaryButtonCasing", "initial");

		primaryButtonShape = Model.Item.GetRawValueString("PrimaryButtonShape", "0");
		primaryButtonShape = primaryButtonShape == "rounded" ? "4px" : primaryButtonShape;
		primaryButtonShape = primaryButtonShape == "pill" ? "200px" : primaryButtonShape;

		string primaryButtonSize = Model.Item.GetRawValueString("PrimaryButtonSize", "regular");
		primaryButtonFontSize = primaryButtonSize == "small" ? "0.875rem" : primaryButtonFontSize;
		primaryButtonFontSize = primaryButtonSize == "regular" ? "1rem" : primaryButtonFontSize;
		primaryButtonFontSize = primaryButtonSize == "large" ? "1.25rem" : primaryButtonFontSize;

		primaryButtonPaddingX = primaryButtonSize == "small" ? "0.5rem" : primaryButtonPaddingX;
		primaryButtonPaddingX = primaryButtonSize == "regular" ? "1rem" : primaryButtonPaddingX;
		primaryButtonPaddingX = primaryButtonSize == "large" ? "3rem" : primaryButtonPaddingX;

		primaryButtonPaddingY = primaryButtonSize == "small" ? "0.25rem" : primaryButtonPaddingY;
		primaryButtonPaddingY = primaryButtonSize == "regular" ? "0.5rem" : primaryButtonPaddingY;
		primaryButtonPaddingY = primaryButtonSize == "large" ? "1rem" : primaryButtonPaddingY;

		@* Secondary button *@
		secondaryButtonFontWeight = Model.Item.GetRawValueString("SecondaryButtonFontWeight", "normal");
		secondaryButtonCasing = Model.Item.GetRawValueString("SecondaryButtonCasing"), "initial");

		secondaryButtonShape = Model.Item.GetRawValueString("SecondaryButtonShape", "0");
		secondaryButtonShape = secondaryButtonShape == "rounded" ? "4px" : secondaryButtonShape;
		secondaryButtonShape = secondaryButtonShape == "pill" ? "200px" : secondaryButtonShape;

		string secondaryButtonSize = Model.Item.GetRawValueString("PrimaryButtonSize", "regular");
		secondaryButtonFontSize = secondaryButtonSize == "small" ? "0.875rem" : secondaryButtonFontSize;
		secondaryButtonFontSize = secondaryButtonSize == "regular" ? "1rem" : secondaryButtonFontSize;
		secondaryButtonFontSize = secondaryButtonSize == "large" ? "1.25rem" : secondaryButtonFontSize;

		secondaryButtonPaddingX = secondaryButtonSize == "small" ? "0.5rem" : secondaryButtonPaddingX;
		secondaryButtonPaddingX = secondaryButtonSize == "regular" ? "1rem" : secondaryButtonPaddingX;
		secondaryButtonPaddingX = secondaryButtonSize == "large" ? "3rem" : secondaryButtonPaddingX;

		secondaryButtonPaddingY = secondaryButtonSize == "small" ? "0.25rem" : secondaryButtonPaddingY;
		secondaryButtonPaddingY = secondaryButtonSize == "regular" ? "0.5rem" : secondaryButtonPaddingY;
		secondaryButtonPaddingY = secondaryButtonSize == "large" ? "1rem" : secondaryButtonPaddingY;
	}

	var fontsToLink = string.Join("&", fontList.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("family={0}", System.Net.WebUtility.UrlEncode(x))));

	var sb = new System.Text.StringBuilder();


	sb.AppendLine($"@import url('https://fonts.googleapis.com/css2?{fontsToLink}&display=swap');");

	sb.AppendLine("");


	sb.AppendLine(".brand {");

	sb.AppendLine($"--r4-header-font: {headerFontFamily};");
	sb.AppendLine($"--r4-header-font-weight: {headerFontWeight};");
	sb.AppendLine($"--r4-header-casing: {headerCasing};");
	sb.AppendLine($"--r4-header-line-height: {headerLineHeight};");
	sb.AppendLine($"--r4-header-letter-spacing: {headerLetterSpacing};");
	sb.AppendLine($"--r4-display-font: {displayFontFamily};");
	sb.AppendLine($"--r4-display-font-weight: {displayFontWeight};");
	sb.AppendLine($"--r4-display-casing: {displayCasing};");
	sb.AppendLine($"--r4-display-line-height: {displayLineHeight};");
	sb.AppendLine($"--r4-display-letter-spacing: {displayLetterSpacing};");
	sb.AppendLine($"--r4-body-font: {bodyFontFamily};");
	sb.AppendLine($"--r4-body-font-weight: {bodyFontWeight};");
	sb.AppendLine($"--r4-body-casing: {bodyCasing};");
	sb.AppendLine($"--r4-body-line-height: {bodyLineHeight};");
	sb.AppendLine($"--r4-body-letter-spacing: {bodyLetterSpacing};");

	sb.AppendLine($"--r4-button-primary-font-weight: {primaryButtonFontWeight};");
	sb.AppendLine($"--r4-button-primary-casing: {primaryButtonCasing};");
	sb.AppendLine($"--r4-button-primary-shape: {primaryButtonShape};");
	sb.AppendLine($"--r4-button-primary-font-size: {primaryButtonFontSize};");
	sb.AppendLine($"--r4-button-primary-padding-x: {primaryButtonPaddingX};");
	sb.AppendLine($"--r4-button-primary-padding-y: {primaryButtonPaddingY};");

	sb.AppendLine($"--r4-button-secondary-font-weight: {secondaryButtonFontWeight};");
	sb.AppendLine($"--r4-button-secondary-casing: {secondaryButtonCasing};");
	sb.AppendLine($"--r4-button-secondary-shape: {secondaryButtonShape};");
	sb.AppendLine($"--r4-button-secondary-font-size: {secondaryButtonFontSize};");
	sb.AppendLine($"--r4-button-secondary-padding-x: {secondaryButtonPaddingX};");
	sb.AppendLine($"--r4-button-secondary-padding-y: {secondaryButtonPaddingY};");
	sb.AppendLine($"--r4-debug-css-written: '{DateTime.Now.ToString()}';");
	sb.AppendLine($"--r4-debug-page-changed: '{Model.UpdatedDate.ToString()}';");

	sb.AppendLine("}");

	//return sb.ToString();

	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(sb.ToString(), Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/R4/_parsed/R4_css/R4_branding_styles_{Model.Area.ID}.css"), false);
}

@sb.ToString()
