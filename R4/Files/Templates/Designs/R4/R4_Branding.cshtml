@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb.Frontend
@using System.Web

@MasterPageFile("MasterNoLayout.cshtml")

@{
	List<string> fontList = new List<string>();

	GoogleFontViewModel headerFont = null;
	string headerFontFamily = "Roboto";
	string headerFontWeight = "300";
	string headerCasing = "inherit";
	double headerLineHeight = 1.2;
	double headerLetterSpacing = 0;
	GoogleFontViewModel displayFont = null;
	string displayFontFamily = "Roboto";
	string displayFontWeight = "bold";
	string displayCasing = "inherit";
	double displayLineHeight = 1.2;
	double displayLetterSpacing = 0;
	GoogleFontViewModel bodyFont = null;
	string bodyFontFamily = "Roboto";
	string bodyFontWeight = "regular";
	string bodyCasing = "inherit";
	double bodyLineHeight = 1.4;
	double bodyLetterSpacing = 0;

	string primaryButtonFontWeight = "normal";
	string primaryButtonCasing = "inherit";
	string primaryButtonShape = "0";
	string primaryButtonFontSize = "inherit";
	string primaryButtonPaddingX = "inherit";
	string primaryButtonPaddingY = "inherit";

	string secondaryButtonFontWeight = "normal";
	string secondaryButtonCasing = "inherit";
	string secondaryButtonShape = "0";
	string secondaryButtonFontSize = "inherit";
	string secondaryButtonPaddingX = "inherit";
	string secondaryButtonPaddingY = "inherit";

	if (Model.Item != null)
	{
		@* HEADER font*@
		headerFont = Model.Item.GetGoogleFont("HeaderFont");
		if (headerFont != null)
		{
			headerFontFamily = headerFont.Family;
			headerFontWeight = headerFont.Weight;
			fontList.Add(headerFontFamily);
		}
		headerCasing = Model.Item.GetRawValueString("HeaderCasing");
		headerLineHeight = Model.Item.GetDouble("HeaderLineHeight");
		headerLetterSpacing = Model.Item.GetDouble("HeaderLetterSpacing");

		@* DISPLAY font*@
		displayFont = Model.Item.GetGoogleFont("DisplayFont");
		if (displayFont != null)
		{
			displayFontFamily = displayFont.Family;
			displayFontWeight = displayFont.Weight;
			fontList.Add(displayFontFamily);
		}
		displayCasing = Model.Item.GetRawValueString("DisplayCasing");
		displayLineHeight = Model.Item.GetDouble("DisplayLineHeight");
		displayLetterSpacing = Model.Item.GetDouble("DisplayLetterSpacing");

		@* BODY font*@
		bodyFont = Model.Item.GetGoogleFont("BodyFont");
		if (bodyFont != null)
		{
			bodyFontFamily = bodyFont.Family;
			bodyFontWeight = bodyFont.Weight;
			fontList.Add(bodyFontFamily);
		}
		bodyCasing = Model.Item.GetRawValueString("BodyCasing");
		bodyLineHeight = Model.Item.GetDouble("BodyLineHeight");
		bodyLetterSpacing = Model.Item.GetDouble("BodyLetterSpacing");

		@* Primary button *@
		primaryButtonFontWeight = Model.Item.GetRawValueString("PrimaryButtonFontWeight", "normal");
		primaryButtonCasing = Model.Item.GetRawValueString("PrimaryButtonCasing", "initial");

		primaryButtonShape = Model.Item.GetRawValueString("PrimaryButtonShape", "0");
		primaryButtonShape = primaryButtonShape == "rounded" ? "4px" : primaryButtonShape;
		primaryButtonShape = primaryButtonShape == "pill" ? "200px" : primaryButtonShape;

		string primaryButtonSize = Model.Item.GetRawValueString("PrimaryButtonSize", "regular");
		primaryButtonFontSize = primaryButtonSize == "small" ? "0.875rem" : primaryButtonFontSize;
		primaryButtonFontSize = primaryButtonSize == "regular" ? "1rem" : primaryButtonFontSize;
		primaryButtonFontSize = primaryButtonSize == "large" ? "1.25rem" : primaryButtonFontSize;

		primaryButtonPaddingX = primaryButtonSize == "small" ? "0.5rem" : primaryButtonPaddingX;
		primaryButtonPaddingX = primaryButtonSize == "regular" ? "1rem" : primaryButtonPaddingX;
		primaryButtonPaddingX = primaryButtonSize == "large" ? "3rem" : primaryButtonPaddingX;

		primaryButtonPaddingY = primaryButtonSize == "small" ? "0.25rem" : primaryButtonPaddingY;
		primaryButtonPaddingY = primaryButtonSize == "regular" ? "0.5rem" : primaryButtonPaddingY;
		primaryButtonPaddingY = primaryButtonSize == "large" ? "1rem" : primaryButtonPaddingY;

		@* Secondary button *@
		secondaryButtonFontWeight = Model.Item.GetRawValueString("SecondaryButtonFontWeight", "normal");
		secondaryButtonCasing = Model.Item.GetRawValueString("SecondaryButtonCasing", "initial");

		secondaryButtonShape = Model.Item.GetRawValueString("SecondaryButtonShape", "0");
		secondaryButtonShape = secondaryButtonShape == "rounded" ? "4px" : secondaryButtonShape;
		secondaryButtonShape = secondaryButtonShape == "pill" ? "200px" : secondaryButtonShape;

		string secondaryButtonSize = Model.Item.GetRawValueString("PrimaryButtonSize", "regular");
		secondaryButtonFontSize = secondaryButtonSize == "small" ? "0.875rem" : secondaryButtonFontSize;
		secondaryButtonFontSize = secondaryButtonSize == "regular" ? "1rem" : secondaryButtonFontSize;
		secondaryButtonFontSize = secondaryButtonSize == "large" ? "1.25rem" : secondaryButtonFontSize;

		secondaryButtonPaddingX = secondaryButtonSize == "small" ? "0.5rem" : secondaryButtonPaddingX;
		secondaryButtonPaddingX = secondaryButtonSize == "regular" ? "1rem" : secondaryButtonPaddingX;
		secondaryButtonPaddingX = secondaryButtonSize == "large" ? "3rem" : secondaryButtonPaddingX;

		secondaryButtonPaddingY = secondaryButtonSize == "small" ? "0.25rem" : secondaryButtonPaddingY;
		secondaryButtonPaddingY = secondaryButtonSize == "regular" ? "0.5rem" : secondaryButtonPaddingY;
		secondaryButtonPaddingY = secondaryButtonSize == "large" ? "1rem" : secondaryButtonPaddingY;
	}

	var fontsToLink = string.Join("&", fontList.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("family={0}", System.Net.WebUtility.UrlEncode(x))));

	var sb = new System.Text.StringBuilder();


	sb.AppendLine($"@import url('https://fonts.googleapis.com/css2?{fontsToLink}&display=swap');");

	sb.AppendLine("");


	sb.AppendLine(".brand {");

	sb.AppendLine($"--r4-header-font: {headerFontFamily};");
	sb.AppendLine($"--r4-header-font-weight: {headerFontWeight};");
	sb.AppendLine($"--r4-header-casing: {headerCasing};");
	sb.AppendLine($"--r4-header-line-height: {headerLineHeight};");
	sb.AppendLine($"--r4-header-letter-spacing: {headerLetterSpacing};");
	sb.AppendLine($"--r4-display-font: {displayFontFamily};");
	sb.AppendLine($"--r4-display-font-weight: {displayFontWeight};");
	sb.AppendLine($"--r4-display-casing: {displayCasing};");
	sb.AppendLine($"--r4-display-line-height: {displayLineHeight};");
	sb.AppendLine($"--r4-display-letter-spacing: {displayLetterSpacing};");
	sb.AppendLine($"--r4-body-font: {bodyFontFamily};");
	sb.AppendLine($"--r4-body-font-weight: {bodyFontWeight};");
	sb.AppendLine($"--r4-body-casing: {bodyCasing};");
	sb.AppendLine($"--r4-body-line-height: {bodyLineHeight};");
	sb.AppendLine($"--r4-body-letter-spacing: {bodyLetterSpacing};");

	sb.AppendLine($"--r4-button-primary-font-weight: {primaryButtonFontWeight};");
	sb.AppendLine($"--r4-button-primary-casing: {primaryButtonCasing};");
	sb.AppendLine($"--r4-button-primary-shape: {primaryButtonShape};");
	sb.AppendLine($"--r4-button-primary-font-size: {primaryButtonFontSize};");
	sb.AppendLine($"--r4-button-primary-padding-x: {primaryButtonPaddingX};");
	sb.AppendLine($"--r4-button-primary-padding-y: {primaryButtonPaddingY};");

	sb.AppendLine($"--r4-button-secondary-font-weight: {secondaryButtonFontWeight};");
	sb.AppendLine($"--r4-button-secondary-casing: {secondaryButtonCasing};");
	sb.AppendLine($"--r4-button-secondary-shape: {secondaryButtonShape};");
	sb.AppendLine($"--r4-button-secondary-font-size: {secondaryButtonFontSize};");
	sb.AppendLine($"--r4-button-secondary-padding-x: {secondaryButtonPaddingX};");
	sb.AppendLine($"--r4-button-secondary-padding-y: {secondaryButtonPaddingY};");
	sb.AppendLine($"--r4-debug-css-written: '{DateTime.Now.ToString()}';");
	sb.AppendLine($"--r4-debug-page-changed: '{Model.UpdatedDate.ToString()}';");

	sb.AppendLine("}");

	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(sb.ToString(), Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/R4/_parsed/R4_css/R4_branding_styles_{Model.Area.ID}.css"), false);
}

<div class="container my-5">
	<div class="row g-4 mb-5 pb-3 text-center border-bottom">
		<div class="col-12">
			<h1 class="h1">@Translate("Branding") </h1>
			<div class="lead">@Translate("Define how you appear")</div>
		</div>
	</div>
	<div class="row g-4">
		<div class="col-12">
			<div class="lead text-muted text-uppercase mb-3 pb-2 border-bottom">@Translate("Header font")</div>
		</div>
		<div class="col-12 col-lg-7">
			<div class="fs-7 text-muted">H1</div>
			<h1 class="h1 mb-3">@Translate("The whole beauty appeared before them in a swift")</h1>
			<div class="fs-7 text-muted">H2</div>
			<h2 class="h2 mb-3">@Translate("The whole beauty appeared before them in a swift")</h2>
			<div class="fs-7 text-muted">H3</div>
			<h3 class="h3 mb-3">@Translate("The whole beauty appeared before them in a swift")</h3>
			<div class="fs-7 text-muted">H4</div>
			<h4 class="h4 mb-3">@Translate("The whole beauty appeared before them in a swift")</h4>
			<div class="fs-7 text-muted">H5</div>
			<h5 class="h5 mb-3">@Translate("The whole beauty appeared before them in a swift")</h5>
			<div class="fs-7 text-muted">H6</div>
			<h6 class="h6 mb-3">@Translate("The whole beauty appeared before them in a swift")</h6>
		</div>
		<div class="col-12 col-lg-5">
			<div class="row fs-7">
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerFontFamily');">@headerFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerFontWeight');">@headerFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerCasing');">@headerCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerLineHeight');">@headerLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerLetterSpacing');">@headerLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								<div class="mb-2">@Translate("Simply use these css classes"):</div>
								<div>.h1, .h2, .h3, .h4, .h5, .h6</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="col-12">
			<div class="lead text-muted text-uppercase my-3 pb-2 border-bottom">@Translate("Display font")</div>
		</div>
		<div class="col-12 col-lg-7">
			<div class="fs-7 text-muted">Display 1</div>
			<h1 class="display-1 mb-4">@Translate("Just in a swift")</h1>
			<div class="fs-7 text-muted">Display 2</div>
			<h2 class="display-2 mb-4">@Translate("Just in a swift")</h2>
			<div class="fs-7 text-muted">Display 3</div>
			<h3 class="display-3 mb-4">@Translate("Just in a swift")</h3>
			<div class="fs-7 text-muted">Display 4</div>
			<h4 class="display-4 mb-4">@Translate("Just in a swift")</h4>
			<div class="fs-7 text-muted">Display 5</div>
			<h5 class="display-5 mb-4">@Translate("Just in a swift")</h5>
			<div class="fs-7 text-muted">Display 6</div>
			<h6 class="display-6 mb-4">@Translate("Just in a swift")</h6>
		</div>
		<div class="col-12 col-lg-5">
			<div class="row fs-7">
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayFontFamily');">@displayFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayFontWeight');">@displayFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayCasing');">@displayCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayLineHeight');">@displayLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayLetterSpacing');">@displayLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								<div class="mb-2">@Translate("Simply use these css classes"):</div>
								<div>.display-1, .display-2, .display-3, .display-4, .display-5, .display-6</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Body font")</div>
		</div>
		<div class="col-12 col-lg-7">
			<p class="mb-3">@Translate("The whole beauty appeared before them in a swift")</p>
		</div>
		<div class="col-12 col-lg-5">
			<div class="row fs-7">
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyFontFamily');">@bodyFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyFontWeight');">@bodyFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyCasing');">@bodyCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyLineHeight');">@bodyLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyLetterSpacing');">@bodyLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@Translate("Works on all text that is not styled with a heading or display class")
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Primary button")</div>
		</div>
		<div class="col-12 col-lg-7">
			<button class="btn btn-primary">@Translate("Add to cart")</button>
		</div>
		<div class="col-12 col-lg-5">
			<div class="row fs-7">
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font size")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonFontSize');">@primaryButtonFontSize</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonFontWeight');">@primaryButtonFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonCasing');">@primaryButtonCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Shape")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonShape');">@primaryButtonShape</a></td>
						</tr>
						<tr>
							<td>@Translate("Padding x")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonPaddingX');">@primaryButtonPaddingX</a></td>
						</tr>
						<tr>
							<td>@Translate("Padding y")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonPaddingY');">@primaryButtonPaddingY</a></td>
						</tr>
					</table>
				</div>
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@{ 
									string implementationPrimary = "<button class=\"btn btn-primary\">" + Translate("Add to cart") + "</button>";
								}
								<div class="text-muted">
									<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('btn btn-primary');">
										@HttpUtility.HtmlEncode(implementationPrimary)
									</a>
								</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Secondary button")</div>
		</div>
		<div class="col-12 col-lg-7">
			<button class="btn btn-primary">@Translate("Read more")</button>
		</div>
		<div class="col-12 col-lg-5">
			<div class="row fs-7">
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font size")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonFontSize');">@secondaryButtonFontSize</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonFontWeight');">@secondaryButtonFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonCasing');">@secondaryButtonCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Shape")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonShape');">@secondaryButtonShape</a></td>
						</tr>
						<tr>
							<td>@Translate("Padding x")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonPaddingX');">@secondaryButtonPaddingX</a></td>
						</tr>
						<tr>
							<td>@Translate("Padding y")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonPaddingY');">@secondaryButtonPaddingY</a></td>
						</tr>
					</table>
				</div>
				<div class="col-12 col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@{ 
									string implementationSecondary = "<button class=\"btn btn-secondary\">" + Translate("Read more") + "</button>";
								}
								<div class="text-muted">
									<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('btn btn-secondary');">
										@HttpUtility.HtmlEncode(implementationSecondary)
									</a>
								</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	function fallbackCopyTextToClipboard(text) {
	  var textArea = document.createElement("textarea");
	  textArea.value = text;
  
	  // Avoid scrolling to bottom
	  textArea.style.top = "0";
	  textArea.style.left = "0";
	  textArea.style.position = "fixed";

	  document.body.appendChild(textArea);
	  textArea.focus();
	  textArea.select();

	  try {
		var successful = document.execCommand('copy');
		var msg = successful ? 'successful' : 'unsuccessful';
		console.log('Fallback: Copying text command was ' + msg);
	  } catch (err) {
		console.error('Fallback: Oops, unable to copy', err);
	  }

	  document.body.removeChild(textArea);
	}
	function copyTextToClipboard(text) {
	  if (!navigator.clipboard) {
		fallbackCopyTextToClipboard(text);
		return;
	  }
	  navigator.clipboard.writeText(text).then(function() {
		console.log('Async: Copying to clipboard was successful!');
	  }, function(err) {
		console.error('Async: Could not copy text: ', err);
	  });
	}
</script>
