@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@MasterPageFile("MasterClean.cshtml")
@{ 
	string[] fontList = new string[50];
	int fontCount = 0;
	GoogleFontViewModel headerFont = null;
	string headerFontFamily = "Roboto";
	string headerFontWeight = "300";
	string headerCasing = "inherit";
	double headerLineHeight = 1.2;
	double headerLetterSpacing = 0;
	GoogleFontViewModel displayFont = null;
	string displayFontFamily = "Roboto";
	string displayFontWeight = "bold";
	string displayCasing = "inherit";
	double displayLineHeight = 1.2;
	double displayLetterSpacing = 0;
	GoogleFontViewModel bodyFont = null;
	string bodyFontFamily = "Roboto";
	string bodyFontWeight = "regular";
	string bodyCasing = "inherit";
	double bodyLineHeight = 1.4;
	double bodyLetterSpacing = 0;
	if (Model.Item != null) {
		headerFont = Model.Item.GetGoogleFont("HeaderFont");
		if (headerFont != null) {
			headerFontFamily = headerFont.Family;
			headerFontWeight = headerFont.Weight;
			fontList[fontCount] = headerFontFamily;
			fontCount++;
		}
		headerCasing = Model.Item.GetList("HeaderCasing").SelectedValue;
		headerLineHeight = Model.Item.GetDouble("HeaderLineHeight");
		headerLetterSpacing = Model.Item.GetDouble("HeaderLetterSpacing");
		displayFont = Model.Item.GetGoogleFont("DisplayFont");
		if (displayFont != null)
		{
			displayFontFamily = displayFont.Family;
			displayFontWeight = displayFont.Weight;
			fontList[fontCount] = displayFontFamily;
			fontCount++;
		}
		displayCasing = Model.Item.GetList("DisplayCasing").SelectedValue;
		displayLineHeight = Model.Item.GetDouble("DisplayLineHeight");
		displayLetterSpacing = Model.Item.GetDouble("DisplayLetterSpacing");
		bodyFont = Model.Item.GetGoogleFont("BodyFont");
		if (bodyFont != null)
		{
			bodyFontFamily = bodyFont.Family;
			bodyFontWeight = bodyFont.Weight;
			fontList[fontCount] = bodyFontFamily;
			fontCount++;
		}
		bodyCasing = Model.Item.GetList("BodyCasing").SelectedValue;
		bodyLineHeight = Model.Item.GetDouble("BodyLineHeight");
		bodyLetterSpacing = Model.Item.GetDouble("BodyLetterSpacing");
	}
	var fontsToLink = string.Join("%7C", fontList.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("{0}:100,200,300,400,500,600,700,800,900", x)));
}
.brand {
--r4-header-font: @headerFontFamily;
--r4-header-font-weight: @headerFontWeight;
--r4-header-casing: @headerCasing;
--r4-header-line-height: @headerLineHeight;
--r4-header-letter-spacing: @headerLetterSpacing;
--r4-display-font: @displayFontFamily;
--r4-display-font-weight: @displayFontWeight;
--r4-display-casing: @displayCasing;
--r4-display-line-height: @displayLineHeight;
--r4-display-letter-spacing: @displayLetterSpacing;
--r4-body-font: @bodyFontFamily;
--r4-body-font-weight: @bodyFontWeight;
--r4-body-casing: @bodyCasing;
--r4-body-line-height: @bodyLineHeight;
--r4-body-letter-spacing: @bodyLetterSpacing;
}
