@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@MasterPageFile("MasterClean.cshtml")
@{
	string[] fontList = new string[50];
	int fontCount = 0;
	GoogleFontViewModel headerFont = null;
	string headerFontFamily = "Roboto";
	string headerFontWeight = "300";
	string headerCasing = "inherit";
	double headerLineHeight = 1.2;
	double headerLetterSpacing = 0;
	GoogleFontViewModel displayFont = null;
	string displayFontFamily = "Roboto";
	string displayFontWeight = "bold";
	string displayCasing = "inherit";
	double displayLineHeight = 1.2;
	double displayLetterSpacing = 0;
	GoogleFontViewModel bodyFont = null;
	string bodyFontFamily = "Roboto";
	string bodyFontWeight = "regular";
	string bodyCasing = "inherit";
	double bodyLineHeight = 1.4;
	double bodyLetterSpacing = 0;

	string primaryButtonFontWeight = "normal";
	string primaryButtonCasing = "inherit";
	string primaryButtonShape = "0";
	string primaryButtonFontSize = "inherit";
	string primaryButtonPaddingX = "inherit";
	string primaryButtonPaddingY = "inherit";

	string secondaryButtonFontWeight = "normal";
	string secondaryButtonCasing = "inherit";
	string secondaryButtonShape = "0";
	string secondaryButtonFontSize = "inherit";
	string secondaryButtonPaddingX = "inherit";
	string secondaryButtonPaddingY = "inherit";

	if (Model.Item != null) {
		headerFont = Model.Item.GetGoogleFont("HeaderFont");
		if (headerFont != null) {
			headerFontFamily = headerFont.Family;
			headerFontWeight = headerFont.Weight;
			fontList[fontCount] = headerFontFamily;
			fontCount++;
		}
		headerCasing = Model.Item.GetList("HeaderCasing").SelectedValue;
		headerLineHeight = Model.Item.GetDouble("HeaderLineHeight");
		headerLetterSpacing = Model.Item.GetDouble("HeaderLetterSpacing");
		displayFont = Model.Item.GetGoogleFont("DisplayFont");
		if (displayFont != null)
		{
			displayFontFamily = displayFont.Family;
			displayFontWeight = displayFont.Weight;
			fontList[fontCount] = displayFontFamily;
			fontCount++;
		}
		displayCasing = Model.Item.GetList("DisplayCasing").SelectedValue;
		displayLineHeight = Model.Item.GetDouble("DisplayLineHeight");
		displayLetterSpacing = Model.Item.GetDouble("DisplayLetterSpacing");
		bodyFont = Model.Item.GetGoogleFont("BodyFont");
		if (bodyFont != null)
		{
			bodyFontFamily = bodyFont.Family;
			bodyFontWeight = bodyFont.Weight;
			fontList[fontCount] = bodyFontFamily;
			fontCount++;
		}
		bodyCasing = Model.Item.GetList("BodyCasing").SelectedValue;
		bodyLineHeight = Model.Item.GetDouble("BodyLineHeight");
		bodyLetterSpacing = Model.Item.GetDouble("BodyLetterSpacing");
		
		@* Primary button *@
		primaryButtonFontWeight = !string.IsNullOrEmpty(Model.Item.GetString("PrimaryButtonFontWeight")) ? Model.Item.GetList("PrimaryButtonFontWeight").SelectedValue : "normal";
		primaryButtonCasing = !string.IsNullOrEmpty(Model.Item.GetString("PrimaryButtonCasing")) ? Model.Item.GetList("PrimaryButtonCasing").SelectedValue : "initial";

		primaryButtonShape = !string.IsNullOrEmpty(Model.Item.GetString("PrimaryButtonShape")) ? Model.Item.GetList("PrimaryButtonShape").SelectedValue : "0";
		primaryButtonShape = primaryButtonShape == "rounded" ? "4px" : primaryButtonShape;
		primaryButtonShape = primaryButtonShape == "pill" ? "200px" : primaryButtonShape;

		string primaryButtonSize = !string.IsNullOrEmpty(Model.Item.GetString("PrimaryButtonSize")) ? Model.Item.GetList("PrimaryButtonSize").SelectedValue : "regular";
		primaryButtonFontSize = primaryButtonSize == "small" ? "0.875rem" : primaryButtonFontSize;
		primaryButtonFontSize = primaryButtonSize == "regular" ? "1rem" : primaryButtonFontSize;
		primaryButtonFontSize = primaryButtonSize == "large" ? "1.25rem" : primaryButtonFontSize;

		primaryButtonPaddingX = primaryButtonSize == "small" ? "0.5rem" : primaryButtonPaddingX;
		primaryButtonPaddingX = primaryButtonSize == "regular" ? "1rem" : primaryButtonPaddingX;
		primaryButtonPaddingX = primaryButtonSize == "large" ? "3rem" : primaryButtonPaddingX;

		primaryButtonPaddingY = primaryButtonSize == "small" ? "0.25rem" : primaryButtonPaddingY;
		primaryButtonPaddingY = primaryButtonSize == "regular" ? "0.5rem" : primaryButtonPaddingY;
		primaryButtonPaddingY = primaryButtonSize == "large" ? "1rem" : primaryButtonPaddingY;

		@* Secondary button *@
		secondaryButtonFontWeight = !string.IsNullOrEmpty(Model.Item.GetString("SecondaryButtonFontWeight")) ? Model.Item.GetList("SecondaryButtonFontWeight").SelectedValue : "normal";
		secondaryButtonCasing = !string.IsNullOrEmpty(Model.Item.GetString("SecondaryButtonCasing")) ? Model.Item.GetList("SecondaryButtonCasing").SelectedValue : "initial";

		secondaryButtonShape = !string.IsNullOrEmpty(Model.Item.GetString("SecondaryButtonShape")) ? Model.Item.GetList("SecondaryButtonShape").SelectedValue : "0";
		secondaryButtonShape = secondaryButtonShape == "rounded" ? "4px" : secondaryButtonShape;
		secondaryButtonShape = secondaryButtonShape == "pill" ? "200px" : secondaryButtonShape;

		string secondaryButtonSize = !string.IsNullOrEmpty(Model.Item.GetString("SecondaryButtonSize")) ? Model.Item.GetList("PrimaryButtonSize").SelectedValue : "regular";
		secondaryButtonFontSize = secondaryButtonSize == "small" ? "0.875rem" : secondaryButtonFontSize;
		secondaryButtonFontSize = secondaryButtonSize == "regular" ? "1rem" : secondaryButtonFontSize;
		secondaryButtonFontSize = secondaryButtonSize == "large" ? "1.25rem" : secondaryButtonFontSize;

		secondaryButtonPaddingX = secondaryButtonSize == "small" ? "0.5rem" : secondaryButtonPaddingX;
		secondaryButtonPaddingX = secondaryButtonSize == "regular" ? "1rem" : secondaryButtonPaddingX;
		secondaryButtonPaddingX = secondaryButtonSize == "large" ? "3rem" : secondaryButtonPaddingX;

		secondaryButtonPaddingY = secondaryButtonSize == "small" ? "0.25rem" : secondaryButtonPaddingY;
		secondaryButtonPaddingY = secondaryButtonSize == "regular" ? "0.5rem" : secondaryButtonPaddingY;
		secondaryButtonPaddingY = secondaryButtonSize == "large" ? "1rem" : secondaryButtonPaddingY;
	}
	var fontsToLink = string.Join("%7C", fontList.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("{0}:100,200,300,400,500,600,700,800,900", x)));
}
.brand {
--r4-header-font: @headerFontFamily;
--r4-header-font-weight: @headerFontWeight;
--r4-header-casing: @headerCasing;
--r4-header-line-height: @headerLineHeight;
--r4-header-letter-spacing: @headerLetterSpacing;
--r4-display-font: @displayFontFamily;
--r4-display-font-weight: @displayFontWeight;
--r4-display-casing: @displayCasing;
--r4-display-line-height: @displayLineHeight;
--r4-display-letter-spacing: @displayLetterSpacing;
--r4-body-font: @bodyFontFamily;
--r4-body-font-weight: @bodyFontWeight;
--r4-body-casing: @bodyCasing;
--r4-body-line-height: @bodyLineHeight;
--r4-body-letter-spacing: @bodyLetterSpacing;

--r4-button-primary-font-weight: @primaryButtonFontWeight;
--r4-button-primary-casing: @primaryButtonCasing;
--r4-button-primary-shape: @primaryButtonShape;
--r4-button-primary-font-size: @primaryButtonFontSize;
--r4-button-primary-padding-x: @primaryButtonPaddingX;
--r4-button-primary-padding-y: @primaryButtonPaddingY;

--r4-button-secondary-font-weight: @secondaryButtonFontWeight;
--r4-button-secondary-casing: @secondaryButtonCasing;
--r4-button-secondary-shape: @secondaryButtonShape;
--r4-button-secondary-font-size: @secondaryButtonFontSize;
--r4-button-secondary-padding-x: @secondaryButtonPaddingX;
--r4-button-secondary-padding-y: @secondaryButtonPaddingY;
}
