@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@using Dynamicweb.Content


@{ 
	var colorService = new ColorSwatchService();
	string sectionClass = "py-2";
	string containerClass = "container";

	string spaceBetweenRows = !string.IsNullOrEmpty(Model?.Item?.GetString("SpaceBetweenRows")) ? Model.Item.GetList("SpaceBetweenRows").SelectedValue.ToLower() : ""; 
	if (spaceBetweenRows != "spacing") {
		sectionClass = "";
	}
	if (spaceBetweenRows == "spacing-large") {
		sectionClass = "py-6";
	}
	if (spaceBetweenRows == "spacing-top") {
		sectionClass = "pt-6";
	}
	if (spaceBetweenRows == "spacing-bottom")	{
		sectionClass = "pb-6";
	}

	string width = !string.IsNullOrEmpty(Model?.Item?.GetString("Width")) ? Model.Item.GetList("Width").SelectedValue.ToLower() : ""; 
	if (width == "stretch") {
		containerClass = "container-fluid";
	}
	if (width == "none") {
		containerClass = "";
	}
	if (width == "compressed") {
		containerClass = " container-compressed";
	}

	string rowClass = "g-3 gy-md-0";
	if (!string.IsNullOrEmpty(Model?.Item?.GetString("SpaceBetweenColumns")))
	{
		if (Model.Item.GetList("SpaceBetweenColumns").SelectedValue.ToLower() == "stick") {
			rowClass = "g-0";
		}
		if (Model.Item.GetList("SpaceBetweenColumns").SelectedValue.ToLower() == "spacing-large") {
			rowClass = "g-5 gy-md-0";
		}
	}

	string theme = !string.IsNullOrEmpty(Model.Item.GetString("Theme")) ? Model.Item.GetString("Theme").ToLower() : "";
	if (theme != "theme default" && theme != "")
	{
		theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
		theme = theme.Replace("theme", "");
		theme = "theme theme-" + theme;
	}
}
 
<section class="@sectionClass @theme">
	<div class="@containerClass">
		<div class="row @rowClass">
			<div class="col-12 col-md-9 text-scale-lg">
				@Model.Column(1).Output()
			</div>
			<div class="col-12 col-md-3 text-scale-sm">
				@Model.Column(2).Output()
			</div>
		</div>
	</div>
</section>
