@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@using Dynamicweb.Content


@{ 
	var colorService = new ColorSwatchService();
	string sectionClass = "py-2";
	string containerClass = "container";

	if (!string.IsNullOrEmpty(Model?.Item?.GetString("SpaceBetweenRows")))
	{
		if (Model.Item.GetList("SpaceBetweenRows").SelectedValue.ToLower() != "spacing") {
			sectionClass = "";
		}
	}

	if (!string.IsNullOrEmpty(Model?.Item?.GetString("Width"))) {
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "stretch") {
			containerClass = "container-fluid";
		}
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "none") {
			containerClass = "";
		}
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "compressed") {
			containerClass = "container-compressed";
		}
	}

	string rowClass = "g-3";
	if (!string.IsNullOrEmpty(Model?.Item?.GetString("SpaceBetweenColumns")))
	{
		if (Model.Item.GetList("SpaceBetweenColumns").SelectedValue.ToLower() == "stick") {
			rowClass = "g-0";
		}
	}

	string theme = Model.Item?.GetList("Theme")?.SelectedValue != null ? Model.Item.GetList("Theme").SelectedValue.ToLower() : "";
	theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
	theme = theme.Replace("theme", "");
}
 
<section class="@sectionClass theme theme-@theme">
	<div class="@containerClass">
		<div class="row @rowClass">
			<div class="col-12 col-md-9 text-scale-lg">
				@Model.Column(1).Output()
			</div>
			<div class="col-12 col-md-3 text-scale-sm">
				@Model.Column(2).Output()
			</div>
		</div>
	</div>
</section>
