@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Content.Items


@{ 
	var colorService = new ColorSwatchService();
	string containerClass = "container";

	if (!string.IsNullOrEmpty(Model?.Item?.GetString("Width"))) {
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "stretch") {
			containerClass = "container-fluid";
		}
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "none") {
			containerClass = "";
		}
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "compressed") {
			containerClass = "container-compressed";
		}
	}

	string theme = "";
	if (Model.Item?.GetList("Theme")?.SelectedValue != null) {
		if (Model.Item.GetList("Theme").SelectedValue.ToLower() != "theme default")
		{
			theme = Model.Item.GetList("Theme").SelectedValue.ToLower();
			theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
			theme = theme.Replace("theme", "");
			theme = "theme theme-" + theme;
		}
	}

	string primaryTheme = theme;
	string secondaryTheme = "";
	if (Model.Item?.GetList("SecondaryTheme")?.SelectedValue != null) {
		if (Model.Item.GetList("SecondaryTheme").SelectedValue.ToLower() != "theme default")
		{
			secondaryTheme = Model.Item.GetList("SecondaryTheme").SelectedValue.ToLower();
			secondaryTheme = String.Concat(secondaryTheme.Where(c => !Char.IsWhiteSpace(c)));
			secondaryTheme = secondaryTheme.Replace("theme", "");
			secondaryTheme = "theme theme-" + secondaryTheme;
		}
	}

	string headerCssClass = Pageview.Item["MoveThisPageBehindTheHeader"] != null ? Pageview.Item["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
	headerCssClass = headerCssClass == "" ? "sticky-top" : headerCssClass;

	string themeSwitchers = "";
	if (headerCssClass == "fixed-top") {
		theme = secondaryTheme;
		themeSwitchers = "data-primary-theme=\"" + primaryTheme + "\" data-secondary-theme=\"" + secondaryTheme + "\"";
	}
}

<section class="@theme" @themeSwitchers>
    <div class="@containerClass">
        <div class="d-flex flex-row">
			<div class="flex-fill text-scale-md">
                @Model.Column(1).Output()
            </div>
            <div class="flex-fill text-scale-md">
                @Model.Column(2).Output()
            </div>
        </div>
    </div>
</section>
