@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Content.Items


@{ 
	var colorService = new ColorSwatchService();
	string containerClass = "container";

	if (!string.IsNullOrEmpty(Model?.Item?.GetString("Width"))) {
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "stretch") {
			containerClass = "container-fluid";
		}
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "none") {
			containerClass = "";
		}
		if (Model.Item.GetList("Width").SelectedValue.ToLower() == "compressed") {
			containerClass = "container-compressed";
		}
	}

	string theme = "";
	if (Model.Item?.GetList("Theme")?.SelectedValue != null) {
		if (Model.Item.GetList("Theme").SelectedValue.ToLower() != "theme default")
		{
			theme = Model.Item.GetList("Theme").SelectedValue.ToLower();
			theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
			theme = theme.Replace("theme", "");
			theme = "theme theme-" + theme;
		}
	}

	string mainTheme = theme;
	string alternativeTheme = "";
	if (Model.Item?.GetList("AlternativeTheme")?.SelectedValue != null) {
		if (Model.Item.GetList("AlternativeTheme").SelectedValue.ToLower() != "theme default")
		{
			alternativeTheme = Model.Item.GetList("AlternativeTheme").SelectedValue.ToLower();
			alternativeTheme = String.Concat(alternativeTheme.Where(c => !Char.IsWhiteSpace(c)));
			alternativeTheme = alternativeTheme.Replace("theme", "");
			alternativeTheme = "theme theme-" + alternativeTheme;
		}
	}

	string headerCssClass = Pageview.Item["MoveThisPageBehindTheHeader"] != null ? Pageview.Item["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
	headerCssClass = headerCssClass == "" ? "sticky-top" : headerCssClass;

	string themeSwitchers = "";
	if (headerCssClass == "fixed-top") {
		theme = alternativeTheme;
		themeSwitchers = "data-main-theme=\"" + mainTheme + "\" data-alternative-theme=\"" + alternativeTheme + "\"";
	}
}

<section class="@theme" @themeSwitchers>
	<div class="@containerClass">
		<div class="d-flex flex-row">
			<div class="flex-fill text-scale-sm">
				@Model.Column(1).Output()
			</div>
			<div class="flex-fill text-scale-sm">
				@Model.Column(2).Output()
			</div>
			<div class="flex-fill text-scale-sm">
				@Model.Column(3).Output()
			</div>
			<div class="flex-fill text-scale-sm">
				@Model.Column(4).Output()
			</div>
		</div>
	</div>
</section>
