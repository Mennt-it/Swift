@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Content.Items


@{ 
	var colorService = new ColorSwatchService();
	string containerClass = "container";

	string column1Fill = Model.Item.GetBoolean("Column1Fill") ? "col" : "col-auto";
	string column2Fill = Model.Item.GetBoolean("Column2Fill") ? "col" : "col-auto";
	string column3Fill = Model.Item.GetBoolean("Column3Fill") ? "col" : "col-auto";
	string column4Fill = Model.Item.GetBoolean("Column4Fill") ? "col" : "col-auto";

	string width = !string.IsNullOrEmpty(Model?.Item?.GetString("Width")) ? Model.Item.GetList("Width").SelectedValue.ToLower() : ""; 
	if (width == "stretch") {
		containerClass = "container-fluid";
	}
	if (width == "none") {
		containerClass = "";
	}
	if (width == "compressed") {
		containerClass = " container-compressed";
	}

	string theme = !string.IsNullOrEmpty(Model.Item.GetString("Theme")) ? Model.Item.GetString("Theme").ToLower() : "";
	if (theme != "theme default" && theme != "")
	{
		theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
		theme = theme.Replace("theme", "");
		theme = "theme theme-" + theme;
	}

	string mainTheme = theme;
	string alternativeTheme = !string.IsNullOrEmpty(Model.Item.GetString("AlternativeTheme")) ? Model.Item.GetString("AlternativeTheme").ToLower() : "";
	if (alternativeTheme != "theme default" && alternativeTheme != "")
	{
		alternativeTheme = String.Concat(alternativeTheme.Where(c => !Char.IsWhiteSpace(c)));
		alternativeTheme = alternativeTheme.Replace("theme", "");
		alternativeTheme = "theme theme-" + alternativeTheme;
	}

	string headerCssClass = Pageview.Item["MoveThisPageBehindTheHeader"] != null ? Pageview.Item["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
	headerCssClass = headerCssClass == "" ? "sticky-top" : headerCssClass;

	string themeSwitchers = "";
	string themeAnimated = "";
	if (headerCssClass == "fixed-top") {
		theme = alternativeTheme;
		themeSwitchers = "data-main-theme=\"" + mainTheme + "\" data-alternative-theme=\"" + alternativeTheme + "\"";
		themeAnimated = "theme-animated";
	}
}

<div class="@themeAnimated @theme" @themeSwitchers>
	<div class="@containerClass">
		<div class="row">
			<div class="@column1Fill">
				@Model.Column(1).Output()
			</div>
			<div class="@column2Fill">
				@Model.Column(2).Output()
			</div>
			<div class="@column3Fill">
				@Model.Column(3).Output()
			</div>
			<div class="@column4Fill">
				@Model.Column(4).Output()
			</div>
		</div>
	</div>
</div>
