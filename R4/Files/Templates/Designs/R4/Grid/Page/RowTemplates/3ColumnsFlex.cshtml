@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@{ 
	string containerClass = "container-xl";

	string width = !string.IsNullOrEmpty(Model?.Item?.GetString("Width")) ? Model.Item.GetList("Width").SelectedValue.ToLower() : "";
	if (width == "stretch")
	{
		containerClass = "container-fluid";
	}
	if (width == "none")
	{
		containerClass = "overflow-hidden";
	}

	string columnPosition = !string.IsNullOrEmpty(Model?.Item?.GetString("columnPosition")) ? Model.Item.GetList("columnPosition").SelectedValue.ToLower() : "align-items-center";
	if (columnPosition == "top")
	{
		columnPosition = "align-items-start";
	}
	if (columnPosition == "center")
	{
		columnPosition = "align-items-center";
	}
	if (columnPosition == "bottom")
	{
		columnPosition = "align-items-end";
	}

	string rowHeight = !string.IsNullOrEmpty(Model?.Item?.GetString("RowHeight")) ? Model.Item.GetList("RowHeight").SelectedValue.ToLower() : "0";
	rowHeight = "py-" + rowHeight;

	string column1width = !string.IsNullOrEmpty(Model?.Item?.GetString("Column_1Width")) ? Model.Item.GetList("Column_1Width").SelectedValue.ToLower() : "";
	column1width = column1width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column2width = !string.IsNullOrEmpty(Model?.Item?.GetString("Column_2Width")) ? Model.Item.GetList("Column_2Width").SelectedValue.ToLower() : "";
	column2width = column2width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column3width = !string.IsNullOrEmpty(Model?.Item?.GetString("Column_3Width")) ? Model.Item.GetList("Column_3Width").SelectedValue.ToLower() : "";
	column3width = column3width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string hideOnScroll = !string.IsNullOrEmpty(Model?.Item?.GetString("HideOnScroll")) ? Model.Item.GetList("HideOnScroll").SelectedValue.ToLower() : "";
	hideOnScroll = hideOnScroll == "hide" ? "js-hide-on-scroll" : "";

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string alternativeTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("AlternativeTheme")) ? " theme " + Model.Item.GetRawValueString("AlternativeTheme").Replace(" ", "").Trim().ToLower() : "";
	string mainTheme = theme;

	string headerCssClass = Pageview.Item["MoveThisPageBehindTheHeader"] != null ? Pageview.Item["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
	headerCssClass = headerCssClass == "" ? "sticky-top" : headerCssClass;

	string themeSwitchers = "";
	string themeAnimated = "";
	if (headerCssClass == "fixed-top") {
		theme = alternativeTheme;
		themeSwitchers = "data-main-theme=\"" + mainTheme + "\" data-alternative-theme=\"" + alternativeTheme + "\"";
		themeAnimated = "theme-animated ";
	}
}

<div class="@rowHeight @themeAnimated @theme @hideOnScroll" @themeSwitchers>
	<div class="@containerClass">
		<div class="row gx-0 gx-lg-3 @columnPosition">
			<div class="col @column1width">
				@Model.Column(1).Output()
			</div>
			<div class="col @column2width">
				@Model.Column(2).Output()
			</div>
			<div class="col @column3width">
				@Model.Column(3).Output()
			</div>
		</div>
	</div>
</div>
