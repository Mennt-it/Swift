@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Content.Items


@{ 
	string sectionClass = "py-3";
	string containerClass = "container-xl";

	//string spaceBetweenRows = !string.IsNullOrEmpty(Model?.Item?.GetString("SpaceBetweenRows")) ? Model.Item.GetList("SpaceBetweenRows").SelectedValue.ToLower() : ""; 
	string spaceBetweenRows = Model.Item.GetRawValueString("SpaceBetweenRows", "spacing");
	if (spaceBetweenRows != "spacing") {
		sectionClass = "";
	}
	if (spaceBetweenRows == "spacing-large") {
		sectionClass = "py-6";
	}
	if (spaceBetweenRows == "spacing-top") {
		sectionClass = "pt-6";
	}
	if (spaceBetweenRows == "spacing-bottom")   {
		sectionClass = "pb-6";
	}

	//string width = !string.IsNullOrEmpty(Model?.Item?.GetString("Width")) ? Model.Item.GetList("Width").SelectedValue.ToLower() : "";
	string width = Model.Item.GetRawValueString("Width");
	if (width == "stretch") {
		containerClass = "container-fluid";
	}
	if (width == "none") {
		containerClass = "";
	}
	if (width == "compressed") {
		containerClass = " container-compressed";
	}

	//string theme = !string.IsNullOrEmpty(Model.Item.GetString("Theme")) ? Model.Item.GetString("Theme").ToLower() : "";
	string theme = Model.Item.GetRawValueString("Theme");
	if (theme != "theme default" && theme != "")
	{
		theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
		theme = theme.Replace("theme", "");
		theme = " theme theme-" + theme;
	} else {
		theme = "";
	}
}

<div class="@(sectionClass)@(theme)">
	<div class="@containerClass">
		<div class="row">
			<div class="col text-scale-lg">
				@Model.Column(1).Output()
			</div>
		</div>
	</div>
</div>
