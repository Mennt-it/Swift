@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using System.Web
@using Dynamicweb.Content.Items

@{ 
	var brandingPage = Dynamicweb.Services.Pages?.GetPage(Model.Area.Item.GetInt32("BrandingPage")) ?? null;
	string[] fontList = new string[50];
	int fontCount = 0;

	dynamic headerFont = null;
	string headerFontFamily = "Roboto";
	string headerFontWeight = "300";
	string headerCasing = "inherit";
	double headerLineHeight = 1.2;
	double headerLetterSpacing = 0;

	dynamic displayFont = null;
	string displayFontFamily = "Roboto";
	string displayFontWeight = "bold";
	string displayCasing = "inherit";
	double displayLineHeight = 1.2;
	double displayLetterSpacing = 0;

	dynamic bodyFont = null;
	string bodyFontFamily = "Roboto";
	string bodyFontWeight = "regular";
	string bodyCasing = "inherit";
	double bodyLineHeight = 1.4;
	double bodyLetterSpacing = 0;

	if (brandingPage != null) {
		headerFont = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item["HeaderFont"].ToString());
		if (headerFont != null) {
			headerFontFamily = headerFont.Family;
			headerFontWeight = headerFont.SelectedVariant;
			fontList[fontCount] = headerFontFamily;
			fontCount++;
		}
		headerCasing = brandingPage.Item["HeaderCasing"].ToString();
		headerLineHeight = Convert.ToDouble(brandingPage.Item["HeaderLineHeight"].ToString());
		headerLetterSpacing = Convert.ToDouble(brandingPage.Item["HeaderLetterSpacing"].ToString());

		displayFont = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item["DisplayFont"].ToString());
		if (displayFont != null) {
			displayFontFamily = displayFont.Family;
			displayFontWeight = displayFont.SelectedVariant;
			fontList[fontCount] = displayFontFamily;
			fontCount++;
		}
		displayCasing = brandingPage.Item["DisplayCasing"].ToString();
		displayLineHeight = Convert.ToDouble(brandingPage.Item["DisplayLineHeight"].ToString());
		displayLetterSpacing = Convert.ToDouble(brandingPage.Item["DisplayLetterSpacing"].ToString());

		bodyFont = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item["BodyFont"].ToString());
		if (bodyFont != null) {
			bodyFontFamily = bodyFont.Family;
			bodyFontWeight = bodyFont.SelectedVariant;
			fontList[fontCount] = bodyFontFamily;
			fontCount++;
		}
		bodyCasing = brandingPage.Item["BodyCasing"].ToString();
		bodyLineHeight = Convert.ToDouble(brandingPage.Item["BodyLineHeight"].ToString());
		bodyLetterSpacing = Convert.ToDouble(brandingPage.Item["BodyLetterSpacing"].ToString());
	}

	var fontsToLink = string.Join("%7C", fontList.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("{0}:100,200,300,400,500,600,700,800,900", x)));


	var themesPageParagraphs = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(Model.Area.Item.GetInt32("ThemesPage")) ?? null;
}

<!doctype html>
<html lang="@Pageview.Area.CultureInfo.TwoLetterISOLanguageName" class="h-100">

<head>
	<!-- Required meta tags -->
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="ie=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="robots" content="noindex nofollow">
	<meta name="googlebot" content="noindex">
	<meta name="googlebot-news" content="nosnippet">

	<title>@Model.Title</title>

	<!-- R4 Styles -->
	<link href="~/Files/Templates/Designs/R4/Assets/css/r4.min.css" rel="stylesheet" type="text/css">

	<style>
		.brand {
			--r4-header-font: @headerFontFamily;
			--r4-header-font-weight: @headerFontWeight;
			--r4-header-casing: @headerCasing;
			--r4-header-line-height: @headerLineHeight;
			--r4-header-letter-spacing: @headerLetterSpacing;

			--r4-display-font: @displayFontFamily;
			--r4-display-font-weight: @displayFontWeight;
			--r4-display-casing: @displayCasing;
			--r4-display-line-height: @displayLineHeight;
			--r4-display-letter-spacing: @displayLetterSpacing;

			--r4-body-font: @bodyFontFamily;
			--r4-body-font-weight: @bodyFontWeight;
			--r4-body-casing: @bodyCasing;
			--r4-body-line-height: @bodyLineHeight;
			--r4-body-letter-spacing: @bodyLetterSpacing;
		}

		@if (themesPageParagraphs != null)
		{
			foreach (Dynamicweb.Content.Paragraph paragraph in themesPageParagraphs) {
				string themeClassName = paragraph.Item["Name"].ToString().ToLower();
				themeClassName = String.Concat(themeClassName.Where(c => !Char.IsWhiteSpace(c)));
				themeClassName = themeClassName.Replace("theme", "");

				string foregroundColor = paragraph.Item["ForegroundColor"] != null ? paragraph.Item["ForegroundColor"].ToString() : "";
				string backgroundColor = paragraph.Item["BackgroundColor"] != null ? paragraph.Item["BackgroundColor"].ToString() : "";
				string borderColor = paragraph.Item["BorderColor"] != null ? paragraph.Item["BorderColor"].ToString() : "";
				string buttonPrimaryBackgroundColor = paragraph.Item["ButtonPrimaryBackgroundColor"] != null ? paragraph.Item["ButtonPrimaryBackgroundColor"].ToString() : "";
				string buttonPrimaryForegroundColor = paragraph.Item["ButtonPrimaryForegroundColor"] != null ? paragraph.Item["ButtonPrimaryForegroundColor"].ToString() : "";
				string buttonSecondaryBackgroundColor = paragraph.Item["ButtonSecondaryBackgroundColor"] != null ? paragraph.Item["ButtonSecondaryBackgroundColor"].ToString() : "";
				string buttonSecondaryForegroundColor = paragraph.Item["ButtonSecondaryForegroundColor"] != null ? paragraph.Item["ButtonSecondaryForegroundColor"].ToString() : "";

				<text>
					.theme-@themeClassName {
						@if (!string.IsNullOrEmpty(foregroundColor)) {
							<text>
							--r4-foreground-color: @foregroundColor;
							</text>
						}
						@if (!string.IsNullOrEmpty(backgroundColor)) {
							<text>
							--r4-background-color: @backgroundColor;
							</text>
						}
						@if (!string.IsNullOrEmpty(borderColor)) {
							<text>
							--r4-border-color: @borderColor;
							</text>
						}
						@if (!string.IsNullOrEmpty(buttonPrimaryBackgroundColor)) {
							<text>
							--r4-button-primary-background-color: @buttonPrimaryBackgroundColor;
							</text>
						}
						@if (!string.IsNullOrEmpty(buttonPrimaryForegroundColor)) {
							<text>
							--r4-button-primary-foreground-color: @buttonPrimaryForegroundColor;
							</text>
						}
						@if (!string.IsNullOrEmpty(buttonSecondaryBackgroundColor)) {
							<text>
							--r4-button-secondary-background-color: @buttonSecondaryBackgroundColor;
							</text>
						}
						@if (!string.IsNullOrEmpty(buttonSecondaryForegroundColor)) {
							<text>
							--r4-button-secondary-foreground-color: @buttonSecondaryForegroundColor;
							</text>
						}
					}
				</text>
			}
		}
	</style>

	<!-- Fonts -->
	<link href="https://fonts.googleapis.com/css?family=@fontsToLink" rel="stylesheet">
</head>

	<body class="d-flex flex-column min-vh-100 brand theme theme-light">
		<header class="page-header border-bottom position-sticky top-0 d-none d-lg-block" id="page-header" style="z-index: 10">
			@if (@Model.Area.Item.GetString("HeaderDesktop") != null)
			{
				@RenderGrid(@Model.Area.Item.GetInt32("HeaderDesktop"))
			}
		</header>

		<header class="page-header border-bottom position-sticky top-0 d-block d-lg-none" id="page-header" style="z-index: 10">
			@if (@Model.Area.Item.GetString("HeaderMobile") != null)
			{
				@RenderGrid(@Model.Area.Item.GetInt32("HeaderMobile"))
			}
			
		</header>

		<main id="page-content" class="overflow-hidden">
			<div id="content">
				@ContentPlaceholder()
			</div>
		</main>

		<footer class="page-footer d-none d-lg-block mt-auto" id="page-footer">
			@if (@Model.Area.Item.GetString("FooterDesktop") != null)
			{
				@RenderGrid(@Model.Area.Item.GetInt32("FooterDesktop"))
			}
		</footer>
		
		<footer class="page-footer d-block d-lg-none mt-auto" id="page-footer">
			@if (@Model.Area.Item.GetString("FooterMobile") != null)
			{
				@RenderGrid(@Model.Area.Item.GetInt32("FooterMobile"))
			}
		</footer>
		
		<!-- R4 Scripts -->
		<script src="~/Files/Templates/Designs/R4/Assets/js/r4.min.js" type="text/javascript"></script>

	</body>

</html>
