@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string layout = Model.Item?.GetList("Layout")?.SelectedValue != null ? Model.Item.GetList("Layout").SelectedValue : "align-left";
	string textAlign = layout;

	string contentPadding = !string.IsNullOrEmpty(Model.Item.GetString("ContentPadding")) ? Model.Item.GetList("ContentPadding").SelectedValue : "";
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string theme = !string.IsNullOrEmpty(Model.Item.GetString("Theme")) ? Model.Item.GetString("Theme").ToLower() : "";
	if (theme != "theme default" && theme != "")
	{
		theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
		theme = theme.Replace("theme", "");
		theme = " theme theme-" + theme;
	} else {
		theme = "";
	}
}

<div class="h-100 position-relative @(layout)@(contentPadding)@(theme)">
	@switch (layout)
	{
		case "text-start":
			<div class="d-flex flex-column align-items-start text-start">
				@RenderBody()
			</div>
		break;
		
		case "text-center":
			<div class="d-flex flex-column align-items-center text-center">
				@RenderBody()
			</div>
		break;
		case "align-middle-center-text-center":
			<div class="d-flex flex-column align-items-center justify-content-center text-center h-100">
				@RenderBody()
			</div>
		break;
		case "align-middle-center-text-start":
			<div class="d-flex flex-column align-items-start justify-content-center text-start h-100">
				@RenderBody()
			</div>
		break;
	}
</div>

@helper RenderBody()
{
	Dynamicweb.Frontend.LinkViewModel link = Model.Item.GetLink("ButtonLink");

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		string titleFontSize = Model.Item?.GetList("TitleFontSize")?.SelectedValue != null ? Model.Item.GetList("TitleFontSize").SelectedValue : "h3";

		<h2 class="@titleFontSize mb-md-3">@Model.Item.GetString("Title")</h2>
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
	{
		string subtitleFontSize = Model.Item?.GetList("SubtitleFontSize")?.SelectedValue != null ? Model.Item.GetList("SubtitleFontSize").SelectedValue : "fs-5";

		<p class="@subtitleFontSize lead mb-2 mb-md-3 max-w-75ch">@Model.Item.GetString("Lead")</p>
	}
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<div class="max-w-75ch">
			@Model.Item.GetString("Text")
		</div>
	}

	if (Model.Item.GetLink("ButtonLink") != null && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : "";
		string buttonStyle = !string.IsNullOrEmpty(Model.Item.GetString("ButtonStyle")) ? 
		Model.Item.GetList("ButtonStyle").SelectedValue : "";
		buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;

		<a href="@link.Url" @target class="btn @buttonStyle stretched-link">@Model.Item.GetString("ButtonLabel")</a>
	}
	else if (Model.Item.GetLink("ButtonLink") != null)
	{
		string target = link.IsExternal ? "target=\"_blank\"" : "";
		<a href="@link.Url" @target class="stretched-link"></a>
	}
}

