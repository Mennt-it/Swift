@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string layout = !string.IsNullOrEmpty(Model.Item.GetString("Layout")) ? Model.Item.GetList("Layout").SelectedValue : "text-start";
	layout = layout == "alignLeft" ? "text-start" : layout;
	layout = layout == "alignCenter" ? "text-center" : layout;
	layout = layout == "alignRight" ? "text-end" : layout;

	string contentPadding = !string.IsNullOrEmpty(Model.Item.GetString("ContentPadding")) ? Model.Item.GetList("ContentPadding").SelectedValue : "";
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

<div class="h-100 position-relative d-flex flex-column @(contentPadding) @(layout)@(theme)">
	@RenderBody()
</div>

@helper RenderBody()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		string titleFontSize = Model.Item?.GetList("TitleFontSize")?.SelectedValue != null ? Model.Item.GetList("TitleFontSize").SelectedValue : "h3";

		<h2 class="@titleFontSize mb-md-3">@Model.Item.GetString("Title")</h2>
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
	{
		string subtitleFontSize = Model.Item?.GetList("SubtitleFontSize")?.SelectedValue != null ? Model.Item.GetList("SubtitleFontSize").SelectedValue : "fs-5";

		<p class="@subtitleFontSize lead mb-2 mb-md-3 max-w-75ch">@Model.Item.GetString("Lead")</p>
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<div class="max-w-75ch">
			@Model.Item.GetString("Text")
		</div>
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink")) && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		string buttonStyle = !string.IsNullOrEmpty(Model.Item.GetString("ButtonStyle")) ?
		Model.Item.GetList("ButtonStyle").SelectedValue : "";
		buttonStyle = buttonStyle == "primary" ? "btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? "btn-secondary" : buttonStyle;
		
		<div class="mt-3">
			<a href="@Model.Item.GetString("ButtonLink")" class="btn @(buttonStyle) stretched-link">@Model.Item.GetString("ButtonLabel")</a>
		</div>
	}
	else if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink"))){
		<a href="@Model.Item.GetString("ButtonLink")" class="stretched-link">
			<span class="visually-hidden">@Model.Item.GetString("Title")</span>
		</a>
	}
}

