@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.Products.FieldDisplayGroups
@using Dynamicweb.Frontend
@using System.Web
@using System.Linq

<style>
	.btn.active {
		border: 4px solid red;
	}

	.btn.in-active {
		opacity: 0.5;
	}
</style>

@functions{ 
	List<string> variantCombinations = new List<string>();

	public AvailableVariants GetAvailableVariants(ProductViewModel productModel) {

		AvailableVariants variants = new AvailableVariants();
		if (productModel.VariantInfo.VariantInfo != null)
		{
			FillVariants(variants, productModel.VariantInfo);
		}
		return variants;
	}

	public void FillVariants(AvailableVariants variants, VariantInfoViewModel variantInfo)
	{
		if (variantInfo.VariantInfo != null)
		{
			if (!variants.Groups.ContainsKey(variantInfo.VariantInfoGroupName))
			{
				variants.Groups.Add(variantInfo.VariantInfoGroupName, new VariantGroup { Name = variantInfo.VariantInfoGroupName });
			}
			foreach (var variantoption in variantInfo.VariantInfo)
			{
				if (!variants.Groups[variantInfo.VariantInfoGroupName].Options.ContainsKey(variantoption.OptionID))
				{
					variants.Groups[variantInfo.VariantInfoGroupName].Options.Add(variantoption.OptionID, new VariantOption()
					{
						ID = variantoption.OptionID,
						Name = variantoption.OptionName,
						Color = variantoption.OptionColor,
						Image = variantoption.OptionImage.Value
					});
				}
				FillVariants(variants, variantoption);
			}
		}
	}

	public void FillAvailableVariants(VariantInfoViewModel variantInfo) {
		if (variantInfo.VariantInfo != null)
		{
			foreach (var variantOption in variantInfo.VariantInfo)
			{
				var parent = variantOption.GetParent();
				FillAvailableVariants(variantOption);
			}
		}
	}

	public class AvailableVariants
	{
		public Dictionary<string, VariantGroup> Groups { get; set; } = new Dictionary<string, VariantGroup>();
	}

	public class VariantGroup
	{
		public string Name { get; set; }
		public Dictionary<string, VariantOption> Options { get; set; } = new Dictionary<string, VariantOption>();
	}

	public class VariantOption
	{
		public string ID { get; set; }
		public string Name { get; set; }
		public string Color { get; set; }
		public string Image { get; set; }
	}

	public void GetChild(IEnumerable<VariantInfoViewModel> variantModels) {
		foreach (VariantInfoViewModel variantModel in variantModels) {
			if(variantModel?.VariantInfo == null)
			{
				variantCombinations.Add(variantModel?.VariantID);
			}
			else
			{
				GetChild(variantModel?.VariantInfo);
			}
		}	
	}
}

@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	string[] variantId = product.VariantId.Split('.');

	string url = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=R4_MiniCart.cshtml" : "?LayoutTemplate=R4_MiniCart.cshtml";
	}

	GetChild(new List<VariantInfoViewModel>() { product.VariantInfo });

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	
	string disableAddToCart = string.IsNullOrEmpty(product.VariantId) && product.VariantInfo != null ? "disabled" : "";
}

<div class="d-flex flex-column@(theme) js-product">
	<div class="mb-4">
		<h1 class="display-6">@product.Name</h1>
		@if (!Model.Item.GetBoolean("HideProductNumber")) { 
			<div class="text-muted">@product.Number</div>
		}
	</div>
	<div class="mb-4">
		<div class="fs-4 fw-bold">
			<span class="text-price">@product.Price.PriceFormatted</span>
		</div>
		@if (product.Price.Price != product.PriceBeforeDiscount.Price) {
			<div class="text-decoration-line-through text-muted">
				@product.PriceBeforeDiscount.PriceFormatted
			</div>
		}
	</div>

	@if (!string.IsNullOrEmpty(product.ShortDescription))
	{
		<div class="mb-4">
			@product.ShortDescription
		</div>
	}

	@RenderVariantSelector(GetAvailableVariants(product), variantId)

	<form method="post" action="@url" class="mb-3 d-flex flex-row">
		<input type="hidden" name="redirect" value="false" />
		<input type="hidden" name="ProductId" value="@product.Id" />
		<input type="hidden" name="cartcmd" value="add" />

		<div class="input-group flex-fill">
			<input id="Quantity_@product.Id" name="Quantity" value="1" type="hidden">
			<button type="button" onclick="Cart.UpdateCart(event)" class="btn btn-primary js-add-to-cart-button w-100 @disableAddToCart" title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)">@Translate("Add to cart")</button>
		</div>
	</form>

	@if (!Model.Item.GetBoolean("HideStockState")) {
		if (product.StockLevel > 0) {
			if (!Model.Item.GetBoolean("HideInventory")) {
				<small class="text-success">@product.StockLevel @Translate("Products available in stock")</small>
			} else {
				<small class="text-success">@Translate("Available in stock")</small>
			}
		} else {
			<small class="text-danger">@Translate("Out of Stock")</small>
		}
	}
</div>





@helper RenderVariantSelector(AvailableVariants availableVariants, string[] variantId)
{
	int groupNumber = 1;

	<div class="js-variant-selector" data-combinations="@string.Join(",", variantCombinations)">
		@foreach (var variantGroup in availableVariants.Groups)
		{
			VariantGroup group = variantGroup.Value;

			<h3 class="h5">@group.Name</h3>
			<div class="mb-4 js-variant-group" data-group-id="@groupNumber">
				@RenderVariantOptions(group.Options, variantId)
			</div>
			
			groupNumber++;
		}
	</div>
}

@helper RenderVariantOptions(Dictionary<string, VariantOption> variantOptions, string[] variantId) {
	if (variantOptions != null)
	{
		foreach (VariantOption option in variantOptions.Values)
		{
			string active = variantId.Contains(option.ID) ? "active" : "";

			<button type="button" class="btn btn-secondary d-inline-block js-variant-option @active" onclick="VariantsOptionClick(event)" data-variant-id="@option.ID">@option.Name</button>
		}
	}
}

<script>
	document.addEventListener('DOMContentLoaded', function (event) {
		init();
	});

	function init() {
		document.querySelectorAll(".js-variant-selector").forEach(function (variantSelector) {
			UpdateAllVariants(variantSelector);
		});
	}

	function VariantsOptionClick(e) {
		var clickedButton = e.currentTarget;
		var variantSelectorElement = clickedButton.closest(".js-variant-selector");

		ToggleActiveState(clickedButton);
		UpdateAllVariants(variantSelectorElement);
		CheckSelectionComplete(variantSelectorElement);
	}

	function UpdateAllVariants(variantSelectorElement) {
		var combinations = variantSelectorElement.getAttribute("data-combinations");
		combinations = combinations.split(",");

		//Go through each option, in their group, and check the availability
		variantSelectorElement.querySelectorAll(".js-variant-option").forEach(function (option) {
			var groupId = option.closest(".js-variant-group").getAttribute("data-group-id");
			var variantId = option.getAttribute("data-variant-id");

			option.classList.add("in-active");

			var show = IsOptionAvailable(variantSelectorElement, variantId, groupId, combinations);

			if (show == true) {
				option.classList.remove("in-active");
			}
		});
	}

	function IsOptionAvailable(variantSelectorElement, currentVariantId, currentGroupId, combinations) {
		var show = false;
		var selections = [];

		//Add the VariantId we are testing for
		selections.push(currentVariantId);

		//Find all selections, excluding selections in the current group
		variantSelectorElement.querySelectorAll(".js-variant-option").forEach(function (option) {
			var parentGroupId = option.closest(".js-variant-group").getAttribute("data-group-id");

			if (parentGroupId != currentGroupId) {
				if (option.classList.contains("active")) {
					var activeVariantId = option.getAttribute("data-variant-id");
					selections.push(activeVariantId);
				}
			}
		});

		var selectionsTotal = selections.length;

		//Compare the selections with the available combinations
		combinations.forEach(function (combi) {
			var selectionsCount = 0;
			var combiVariantIds = combi.split(".");

			combiVariantIds.forEach(function (combiVariantId) {
				selections.forEach(function (selectionVariantId) {
					if (combiVariantId == selectionVariantId) {
						selectionsCount++;
					}
				});
			});

			if (selectionsCount == selectionsTotal) {
				show = true;
			}
		});

		return show;
	}

	function ToggleActiveState(clickedButton) {
		var inactiveClicked = clickedButton.classList.contains("in-active");
		var isAlreadyActive = clickedButton.classList.contains("active");

		//Allow clicking in-active options
		if (inactiveClicked) {
			clickedButton.closest(".js-variant-selector").querySelectorAll(".js-variant-option").forEach(function (option) {
				option.classList.remove("active");
			});
		}

		//Remove all active options in the current group
		clickedButton.closest(".js-variant-group").querySelectorAll(".js-variant-option").forEach(function (option) {
			option.classList.remove("active");
		});

		//Add active to the selected options
		if (!isAlreadyActive) {
			clickedButton.classList.add("active");
		}
	}

	function CheckSelectionComplete(variantSelectorElement) {
		var selections = [];
		var selectionCount = 0;
		var totalGroups = variantSelectorElement.querySelectorAll(".js-variant-group").length;

		variantSelectorElement.querySelectorAll(".js-variant-option").forEach(function (option) {
			if (option.classList.contains("active")) {
				var activeVariantId = option.getAttribute("data-variant-id");
				selections.push(activeVariantId);
				selectionCount++;
			}
		});

		if (selectionCount == totalGroups) {
			var url = new URL(window.location);
			var searchParams = url.searchParams;
			searchParams.set('VariantId', selections.join("."));
			url.search = searchParams.toString();
			window.location = url.toString();
		}

		var productElement = variantSelectorElement.closest(".js-product");
		if (productElement) {
			var addToCartElement = variantSelectorElement.querySelector(".js-add-to-cart");

			if (addToCartElement) {
				if (selectionCount == totalGroups) {
					addToCartElement.classList.remove("disabled");
				} else {
					addToCartElement.classList.add("disabled");
				}
			}
		}
	}
</script>

