@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using System.Web

@{
	bool isVisualEditor = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("VisualEdit")) : false;

	bool productViewModelFound = false;
	ProductViewModel product = new ProductViewModel();

	if (System.Web.HttpContext.Current.Items.Contains("ProductDetails"))
	{
		productViewModelFound = true;
		product = (ProductViewModel)System.Web.HttpContext.Current.Items["ProductDetails"];
	}

	string theme = !string.IsNullOrEmpty(Model.Item.GetString("Theme")) ? Model.Item.GetString("Theme").ToLower() : "";
	if (theme != "theme default" && theme != "")
	{
		theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
		theme = theme.Replace("theme", "");
		theme = " theme theme-" + theme;
	} else {
		theme = "";
	}

	string pageId = Model?.Item?.GetString("ProductSliderServicePage") != null ? Model.Item.GetString("ProductSliderServicePage") : "";
	string servicePageByNavigationTag = GetPageIdByNavigationTag("ProductSliderService") != 0 ? GetPageIdByNavigationTag("ProductSliderService").ToString() : "";
	pageId = pageId == "" ? servicePageByNavigationTag : pageId;

	string url = "/Default.aspx?ID=" + pageId;
	if (!url.Contains("LayoutTemplate")) {
		url += url.Contains("?") ? "&LayoutTemplate=Designs/R4/R4_PageClean.cshtml" : "?LayoutTemplate=Designs/R4/R4_PageClean.cshtml";
	}
	if (isVisualEditor) {
		url += "&VisualEdit=True";
	}

	//If products is added through the selector
	ProductListViewModel productsToRelateTo = Model.Item.GetValue("ProductsToRelateTo") as ProductListViewModel;
	IList<string> relateFromProductIds = new List<string>{};
	IList<string> relateFromGroupIds = new List<string>{};

	if (productsToRelateTo != null) {
		foreach (var fromProduct in productsToRelateTo.Products)
		{
			relateFromProductIds.Add(fromProduct.Id);
			relateFromGroupIds.Add(fromProduct.PrimaryOrDefaultGroup.Id);
		}
	}

	ProductListViewModel products = Model.Item.GetValue("Products") as ProductListViewModel;
	IList<string> selectedProductIds = new List<string>{};

	if (products != null) {
		foreach (var productSelection in products.Products)
		{
			selectedProductIds.Add(productSelection.Id);
		}
	}

	string groupIds = productViewModelFound ? product.PrimaryOrDefaultGroup.Id : string.Join(",", relateFromGroupIds);
	string productIds = productViewModelFound ? product.Id : string.Join(",", relateFromProductIds);
	string relationType = Model?.Item?.GetList("RelationType") != null ? Model.Item.GetList("RelationType").SelectedValue : "trending";
	string relationTypeName = Model?.Item?.GetString("Title") != null ? Model.Item.GetString("Title") : Translate("Products");

	string height = !Model.Item.GetBoolean("HideTitle") ? "605px" : "390px";
}

<form method="post" action="@url" data-response-target-element="RelatedProducts_@Model.ID" data-preloader="inline" data-update-url="false" class="w-100 js-product-list" id="RelatedProducts_@Model.ID" style="min-height: @height">
	@if (!string.IsNullOrEmpty(Model.Item.GetString("ProductDetailsPage"))) { 
		<input type="hidden" name="ProductDetailsPage" value="@Model.Item.GetString("ProductDetailsPage")" />
	}
	@if (!Model.Item.GetBoolean("HideTitle")) { 
		<input type="hidden" name="HeadingTitle" value="@relationTypeName" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("ImageAspectRatio"))) { 
		string ratio = Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "0" && Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "" ? Model.Item.GetList("ImageAspectRatio").SelectedValue : "";
		<input type="hidden" name="ImageAspectRatio" value="@ratio" />
	}
	@if (theme != "") { 
		<input type="hidden" name="Theme" value="@theme" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("ContentPadding"))) { 
		string contentPadding = Model.Item.GetList("ContentPadding").SelectedValue;
		<input type="hidden" name="ContentPadding" value="@contentPadding" />
	}
	<input type="hidden" name="HideNavigationBar" value="@Model.Item.GetString("HideNavigationBar").ToLower()" />

	@if (groupIds != "" && relationType != "frequently" && relationType != "selected") {
		<input type="hidden" name="GroupId" value="@groupIds" />
	}

	@if (relationType == "trending") {
		<input type="hidden" name="SortBy" value="OrderCountGrowth" /> 
	}
	@if (relationType == "most-sold") {
		<input type="hidden" name="SortBy" value="OrderCount" /> 
	}
	@if (relationType == "frequently") {
		<input type="hidden" name="BoughtWithProductIds" value="[@productIds]" /> 
	}
	@if (relationType == "selected") {
		productIds = string.Join(",", selectedProductIds);
		<input type="hidden" name="MainProductID" value="@productIds" /> 
	}

	<div id="RelatedProducts_@Model.ID"></div>
</form>

