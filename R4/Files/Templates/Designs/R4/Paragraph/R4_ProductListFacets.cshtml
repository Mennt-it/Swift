@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Environment

@{
	bool isVisualEditor = Dynamicweb.Context.Current.Request.GetBoolean("visualedit");

	ProductListViewModel productList = new ProductListViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}

	string url = "/Default.aspx?ID=" + Model.PageID;
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Designs/R4/R4_PageClean.cshtml" : "?LayoutTemplate=Designs/R4/R4_PageClean.cshtml";
	}

	string groupId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("GroupID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("GroupID") : "";

	if (groupId != "")
	{
		url += url.Contains("?") ? "&GroupID=" + groupId : "";
	}

	bool facetsFound = false;
	int selectedFacetsCount = 0;

	if (productList.FacetGroups != null)
	{
		foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
		{
			foreach (FacetViewModel facet in facetGroup.Facets)
			{
				if (facet.Options.Count() > 0)
				{
					facetsFound = true;

					foreach (FacetOptionViewModel option in facet.Options)
					{
						if (option.Selected)
						{
							selectedFacetsCount++;
						}
					}
				}
			}
		}
	}
}

@if (facetsFound)
{
	string iconPath = "/Files/Icons/";

	//Desktop
	<form method="post" action="@url" data-response-target-element="content" id="FacetsForm_Desktop" class="d-none d-lg-block">
		@RenderForm(productList, "desktop")
	</form>

	//Mobile
	<div class="d-block d-lg-none mt-n2 mt-lg-0">
		<button type="button" class="btn btn-primary w-100 d-flex" data-bs-toggle="modal" data-bs-target="#FacetsModal">
			<span class="flex-fill text-start">
				@Translate("Filter")
			</span>
			<span class="icon-2 position-relative" style="top: 5px">
				@ReadFile(iconPath+"sliders.svg")
			</span>
		</button>

		<form method="post" action="@url" data-response-target-element="content" class="modal fade" id="FacetsModal" tabindex="-1" aria-labelledby="FacetsModal" aria-hidden="false">
			<div class="modal-dialog modal-fullscreen">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">@Translate("Filters and sorting")</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body px-0">
						@RenderForm(productList, "mobile")
					</div>
					<div class="modal-footer d-flex">
						@if (selectedFacetsCount != 0)
						{
							<button type="button" class="btn btn-secondary flex-fill" onclick="ProductList.ResetFacets(event)">@Translate("Clear") (@selectedFacetsCount)</button>
						}
						<button type="button" class="btn btn-primary flex-fill" onclick="location.reload();">@Translate("Update")</button>
					</div>
				</div>
			</div>
		</form>
	</div>
}
else
{
	if (isVisualEditor)
	{
		<div class="alert alert-dark m-0" role="alert">
			<span>@Translate("Facets: The facets selectors will be shown here, if any")</span>
		</div>
	}
	else
	{
		<div class="alert alert-dark m-0">
			@Translate("No filters are available")
		</div>
	}
}

@helper RenderForm(ProductListViewModel productList, string deviceType)
{
	string groupId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("GroupID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("GroupID") : "";
	string pageSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("PageSize")) ? Dynamicweb.Context.Current.Request.QueryString.Get("PageSize") : productList.PageSize.ToString();
	string sortBySelection = Dynamicweb.Context.Current.Request?.Form["SortBy"] ?? "name";
	sortBySelection = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("SortBy")) ? Dynamicweb.Context.Current.Request.QueryString.Get("SortBy") : sortBySelection;
	string sortNameSelectedAZ = sortBySelection.ToLower() == "name" ? "checked" : "";
	string sortNameSelectedZA = sortBySelection.ToLower() == "-name" ? "checked" : "";
	string sortPriceLowSelected = sortBySelection.ToLower() == "price" ? "checked" : "";
	string sortPriceHighSelected = sortBySelection.ToLower() == "-price" ? "checked" : "";
	string sortNewSelected = sortBySelection.ToLower() == "created" ? "checked" : "";
	string sortMostSoldSelected = sortBySelection.ToLower() == "ordercount" ? "checked" : "";

	bool enableSorting = Model.Item.GetBoolean("SortByNameAZ");
	enableSorting = Model.Item.GetBoolean("SortByNameZA") || enableSorting == true ? true : false;
	enableSorting = Model.Item.GetBoolean("SortByNewest") || enableSorting == true ? true : false;
	enableSorting = Model.Item.GetBoolean("SortByLowestPrice") || enableSorting == true ? true : false;
	enableSorting = Model.Item.GetBoolean("SortByHighestPrice") || enableSorting == true ? true : false;

	string groupsTheme = "";
	if (deviceType != "mobile")
	{
		groupsTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("FacetGroupsTheme")) ? " theme " + Model.Item.GetRawValueString("FacetGroupsTheme").Replace(" ", "").Trim().ToLower() : "";
	}

	string padding = Model.Item.GetRawValueString("ContentPadding", "");
	string headerPadding = padding == "small" ? " px-3" : " px-3 px-lg-0";
	string bodyPadding = padding == "small" ? " px-3" : " px-3 px-lg-0";

	if (productList?.Group?.Id != null)
	{
		<input type="hidden" name="GroupId" value="@productList.Group.Id" />
	}

	<input type="hidden" name="PageSize" value="@pageSize" />

	if (Model.Item.GetBoolean("EnableGroupNavigation"))
	{
		var navigationSettings = new NavigationSettings();
		navigationSettings.StartLevel = 2;
		navigationSettings.StopLevel = 10;
		navigationSettings.ExpandMode = ExpandMode.All;
		navigationSettings.Parameters.Add("HideTexts", false);
		navigationSettings.Parameters.Add("HideIcons", true);

		<div class="@groupsTheme border-bottom">
			<div class="d-flex @(headerPadding)" data-bs-toggle="collapse" data-bs-target="#ProductGroupNavigation_@deviceType" role="button" aria-expanded="true" aria-controls="ProductGroupNavigation_@deviceType">
				<h6 class="my-3 opacity-75 m-0 flex-fill">@Translate("Navigation")</h6>
				<div class="my-auto collapse-chevron-icon"></div>
			</div>
			<div class="collapse show pb-3@(bodyPadding)" id="ProductGroupNavigation_@deviceType">
				@Navigation.RenderNavigation("Navigation/Vertical.cshtml", navigationSettings)
			</div>
		</div>
	}

	if (enableSorting)
	{
		<div class="@groupsTheme border-bottom">
			<div class="d-flex@(headerPadding)">
				<h6 class="my-3 opacity-75 flex-fill">@Translate("Sort by")</h6>
			</div>
			<div class="pb-3@(bodyPadding)">
				@if (Model.Item.GetBoolean("SortByNameAZ"))
				{
					<div class="form-check mb-1">
						<input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="name" id="SortByNameAZ_@deviceType" @sortNameSelectedAZ>
						<label class="form-check-label" for="SortByNameAZ_@deviceType">
							@Translate("Name (A-Z)")
						</label>
					</div>
				}
				@if (Model.Item.GetBoolean("SortByNameZA"))
				{
					<div class="form-check mb-1">
						<input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="-name" id="SortByNameZA_@deviceType" @sortNameSelectedZA>
						<label class="form-check-label" for="SortByNameZA_@deviceType">
							@Translate("Name (Z-A)")
						</label>
					</div>
				}
				@if (Model.Item.GetBoolean("SortByNewest"))
				{
					<div class="form-check mb-1">
						<input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="created" id="SortByNew_@deviceType" @sortNewSelected>
						<label class="form-check-label" for="SortByNew_@deviceType">
							@Translate("Newest")
						</label>
					</div>
				}
				@if (Model.Item.GetBoolean("SortByLowestPrice"))
				{
					<div class="form-check mb-1">
						<input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="price" id="SortByPriceLow_@deviceType" @sortPriceLowSelected>
						<label class="form-check-label" for="SortByPriceLow_@deviceType">
							@Translate("Lowest price")
						</label>
					</div>
				}
				@if (Model.Item.GetBoolean("SortByHighestPrice"))
				{
					<div class="form-check mb-1">
						<input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="-price" id="SortByPriceHigh_@deviceType" @sortPriceHighSelected>
						<label class="form-check-label" for="SortByPriceHigh_@deviceType">
							@Translate("Highest price")
						</label>
					</div>
				}
				@if (Model.Item.GetBoolean("SortByMostSold"))
				{
					<div class="form-check mb-1">
						<input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="OrderCount" id="SortByMostSold_@deviceType" @sortMostSoldSelected>
						<label class="form-check-label" for="SortByMostSold_@deviceType">
							@Translate("Most sold")
						</label>
					</div>
				}
			</div>
		</div>
	}

	int groupCount = 0;
	int totalGroups =  productList.FacetGroups.Count();

	foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
	{
		string border = groupCount != totalGroups ? "border-bottom" : ""; 

		foreach (FacetViewModel facet in facetGroup.Facets)
		{
			if (facet.Options.Count() > 0)
			{
				<div class="@groupsTheme @border @groupCount @totalGroups">
					<div class="d-flex @(headerPadding)" data-bs-toggle="collapse" data-bs-target="#FacetGroup_@facet.Name.Replace(" ", "")_@deviceType" role="button" aria-expanded="true" aria-controls="FacetGroup_@facet.Name.Replace(" ", "")_@deviceType">
						<h6 class="my-3 opacity-75 m-0 flex-fill">@facet.Name</h6>
						<div class="my-auto collapse-chevron-icon"></div>
					</div>
					<div class="collapse show pb-3@(bodyPadding)" id="FacetGroup_@facet.Name.Replace(" ", "")_@deviceType">
						@foreach (FacetOptionViewModel facetOption in facet.Options)
						{
							string renderType = facet.RenderType;

							if (renderType == "Colors")
							{
								@RenderColorOption(facet, facetOption)
							}
							else
							{
								@RenderCheckboxOption(facet, facetOption)
							}
						}
					</div>
				</div>
			}

			groupCount++;
		}
	}
}

@helper RenderCheckboxOption(FacetViewModel facet, FacetOptionViewModel facetOption)
{
	string facetLabel = facetOption.Label;
	string disabled = facetOption.Count <= 0 ? "disabled" : "";
	string selected = facetOption.Selected ? "checked" : "";

	if (facetLabel.ToLower() == "true")
	{
		facetLabel = Translate("Yes");
	}

	if (facetLabel.ToLower() == "false")
	{
		facetLabel = Translate("No");
	}

	<label class="form-check mb-1" @disabled>
		<input type="checkbox" onclick="ProductList.Update(event)" class="form-check-input" name="@facet.QueryParameter" value="[@facetOption.Value]" data-filter-value="@facetLabel" @selected>
		<span class="form-check-label d-flex align-items-center">
			<span class="flex-fill">@facetLabel </span>
			<small class="opacity-75">@facetOption.Count</small>
		</span>
	</label>
}

@helper RenderColorOption(FacetViewModel facet, FacetOptionViewModel facetOption)
{
	string facetLabel = facetOption.Label;
	string disabled = facetOption.Count <= 0 ? "disabled" : "";
	string selected = facetOption.Selected ? "checked" : "";

	string colorCode = facetOption.Value;

	if (!facetOption.Value.Contains("#"))
	{
		var variantOption = Dynamicweb.Ecommerce.Services.VariantOptions.GetVariantOption(facetOption.Value.ToString(), Dynamicweb.Ecommerce.Common.Context.LanguageID);
		if (variantOption != null)
		{
			colorCode = variantOption.LargeImage;
		}
	}

	<div class="colorbox">
		<input type="checkbox" onclick="ProductList.Update(event)" class="@disabled @selected" name="@facet.QueryParameter" value="[@facetOption.Value]" data-filter-value="@facetLabel" @selected title="@facetOption.Label"></input>
		@if (facetOption.Value.Contains("#"))
		{
			<span class="colorbox-background" style="background-color: @facetOption.Value"></span>
		}
		else
		{
			<img class="colorbox-background" src="/Admin/Public/GetImage.ashx?width=25&height=25&image=@colorCode" />
		}
	</div>
}
