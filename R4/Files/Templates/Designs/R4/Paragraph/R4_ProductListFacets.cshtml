@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend.Navigation
@using System.Web

@{ 
    bool isVisualEditor = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("VisualEdit")) : false;

    ProductListViewModel productList = new ProductListViewModel();

    if (System.Web.HttpContext.Current.Items.Contains("ProductList"))
    {
        productList = (ProductListViewModel)System.Web.HttpContext.Current.Items["ProductList"];
    }

    string url = "/Default.aspx?ID=" + Model.PageID;
    if (!url.Contains("LayoutTemplate")) {
        url += url.Contains("?") ? "&LayoutTemplate=Designs/R4/R4_PageClean.cshtml" : "?LayoutTemplate=Designs/R4/R4_PageClean.cshtml";
    }

    string groupId = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("GroupID")) ? HttpContext.Current.Request.QueryString.Get("GroupID") : "";

    if (groupId != "") {
        url += url.Contains("?") ? "&GroupID=" + groupId : "";
	}

    bool facetsFound = false;

	if (productList.FacetGroups != null) {
		foreach (FacetGroupViewModel facetGroup in productList.FacetGroups) {
			foreach (FacetViewModel facet in facetGroup.Facets) {
				if (facet.Options.Count() > 0) {
                    facetsFound = true;
				}
			}
		}
	} 
}

@if (facetsFound) { 
    //Desktop
    <div class="d-none d-lg-block">
        <form method="post" action="@url" data-response-target-element="content" id="FacetsForm_Desktop">
            @RenderForm(productList, "desktop")
        </form>
    </div>

    //Mobile
    <div class="d-block d-lg-none">
        <button type="button" class="btn btn-primary w-100 d-flex" data-bs-toggle="modal" data-bs-target="#FacetsModal">
            <div class="flex-fill text-start"> 
                @Translate("Filters and sorting") 
            </div>
            <span class="icon-2 position-relative" style="transform: rotate(90deg); top: 5px">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M272 352h-24V16c0-8.8-7.2-16-16-16h-16c-8.8 0-16 7.2-16 16v336h-24c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h24v80c0 8.8 7.2 16 16 16h16c8.8 0 16-7.2 16-16v-80h24c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM112 96H88V16c0-8.8-7.2-16-16-16H56c-8.8 0-16 7.2-16 16v80H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h24v336c0 8.8 7.2 16 16 16h16c8.8 0 16-7.2 16-16V160h24c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm320 128h-24V16c0-8.8-7.2-16-16-16h-16c-8.8 0-16 7.2-16 16v208h-24c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h24v208c0 8.8 7.2 16 16 16h16c8.8 0 16-7.2 16-16V288h24c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"/></svg>
            </span>
        </button>

        <form method="post" action="@url" data-response-target-element="content">
            <div class="modal" id="FacetsModal" tabindex="-1" aria-labelledby="FacetsModal" aria-hidden="false">
              <div class="modal-dialog modal-fullscreen">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title">@Translate("Filters and sorting")</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body px-0">
                      @RenderForm(productList, "mobile")
                  </div>
                  <div class="modal-footer"> 
                    <button type="button" class="btn btn-secondary" onclick="ProductList.ResetFacets(event)">@Translate("Clear filters")</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">@Translate("Update list")</button>
                  </div>
                </div>
              </div>
            </div>
        </form>
    </div>
} else {
    if (!isVisualEditor) {
        <div class="alert alert-dark m-0">
            @Translate("No filters are available")
        </div>
	} else {
         <div class="alert alert-dark m-0" role="alert">
            <span>@Translate("Facets: The facets selectors will be shown here, if any")</span>
        </div>
	}
}

@helper RenderForm(ProductListViewModel productList, string deviceType) { 
    string groupId = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("GroupID")) ? HttpContext.Current.Request.QueryString.Get("GroupID") : "";
    string pageSize = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("PageSize")) ? HttpContext.Current.Request.QueryString.Get("PageSize") : "30";
    string sortBySelection = HttpContext.Current.Request?.Form["SortBy"] ?? "name";
	string sortNameSelectedAZ = sortBySelection.ToLower() == "name" ? "checked" : "";
    string sortNameSelectedZA = sortBySelection.ToLower() == "-name" ? "checked" : "";
	string sortPriceLowSelected = sortBySelection.ToLower() == "price" ? "checked" : "";
    string sortPriceHighSelected = sortBySelection.ToLower() == "-price" ? "checked" : "";
    string sortNewSelected = sortBySelection.ToLower() == "created" ? "checked" : "";
    string sortMostSoldSelected = sortBySelection.ToLower() == "ordercount" ? "checked" : "";

    bool enableSorting = Model.Item.GetBoolean("SortByNameAZ");
    enableSorting = Model.Item.GetBoolean("SortByNameZA") || enableSorting == true ? true : false;
    enableSorting = Model.Item.GetBoolean("SortByNewest") || enableSorting == true ? true : false;
    enableSorting = Model.Item.GetBoolean("SortByLowestPrice") || enableSorting == true ? true : false;
    enableSorting = Model.Item.GetBoolean("SortByHighestPrice") || enableSorting == true ? true : false;

    string groupsTheme = "";
    if (deviceType != "mobile") {
        groupsTheme = !string.IsNullOrEmpty(Model.Item.GetString("FacetGroupsTheme")) ? Model.Item.GetString("FacetGroupsTheme").ToLower() : "";
	    if (groupsTheme != "theme default" && groupsTheme != "")
	    {
		    groupsTheme = String.Concat(groupsTheme.Where(c => !Char.IsWhiteSpace(c)));
		    groupsTheme = groupsTheme.Replace("theme", "");
		    groupsTheme = "theme theme-" + groupsTheme;
	    }
    }

    if (productList?.Group?.Id != null) {
        <input type="hidden" name="GroupId" value="@productList.Group.Id" />
    }

    <input type="hidden" name="PageSize" value="@pageSize" />

    if (enableSorting) {
        <div class="card mb-3 border-0 rounded-0 @groupsTheme">
            <div class="card-header collapsed" data-bs-toggle="collapse" data-bs-target="#ProductSorting_@deviceType" role="button" aria-expanded="true" aria-controls="ProductSorting">
                <div class="d-flex">
                    <h6 class="card-title fw-bold m-0 flex-fill">@Translate("Sort by")</h6>
                    <div class="my-auto collapse-chevron-icon"></div>
                </div>
            </div>
            <div class="collapse hide" id="ProductSorting_@deviceType">
                <div class="card-body">
                    @if (Model.Item.GetBoolean("SortByNameAZ")) 
                    {
                        <div class="form-check">
                            <input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="name" id="SortByNameAZ_@deviceType" @sortNameSelectedAZ>
                            <label class="form-check-label" for="SortByNameAZ_@deviceType">
                                @Translate("Name (A-Z)") 
                            </label>
                        </div>
				    }
                    @if (Model.Item.GetBoolean("SortByNameZA"))
				    {
                        <div class="form-check">
                            <input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="-name" id="SortByNameZA_@deviceType" @sortNameSelectedZA>
                            <label class="form-check-label" for="SortByNameZA_@deviceType">
                                @Translate("Name (Z-A)") 
                            </label>
                        </div>
				    }
                    @if (Model.Item.GetBoolean("SortByNewest"))
				    {
                        <div class="form-check">
                            <input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="created" id="SortByNew_@deviceType" @sortNewSelected>
                            <label class="form-check-label" for="SortByNew_@deviceType">
                                @Translate("Newest") 
                            </label>
                        </div>
				    }
                    @if (Model.Item.GetBoolean("SortByLowestPrice"))
				    {
                        <div class="form-check">
                            <input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="price" id="SortByPriceLow_@deviceType" @sortPriceLowSelected>
                            <label class="form-check-label" for="SortByPriceLow_@deviceType">
                                @Translate("Lowest price")
                            </label>
                        </div>
				    }
                    @if (Model.Item.GetBoolean("SortByHighestPrice"))
				    {
                        <div class="form-check">
                            <input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="-price" id="SortByPriceHigh_@deviceType" @sortPriceHighSelected>
                            <label class="form-check-label" for="SortByPriceHigh_@deviceType">
                                @Translate("Highest price")
                            </label>
                        </div>
				    }
                    @if (Model.Item.GetBoolean("SortByMostSold"))
				    {
                        <div class="form-check">
                            <input class="form-check-input" onchange="ProductList.Update(event)" type="radio" name="SortBy" value="OrderCount" id="SortByMostSold_@deviceType" @sortMostSoldSelected>
                            <label class="form-check-label" for="SortByMostSold_@deviceType">
                                @Translate("Most sold")
                            </label>
                        </div>
				    }
                </div>
            </div>
        </div>
    }

    if (Model.Item.GetBoolean("EnableGroupNavigation")) {
        var navigationSettings = new NavigationSettings();
        navigationSettings.StartLevel = 1;
        navigationSettings.StopLevel = 10;
        navigationSettings.ExpandMode = ExpandMode.All;
        navigationSettings.Parameters.Add("HideTexts", false);
        navigationSettings.Parameters.Add("HideIcons", true);

        <div class="card mb-3 border-0 rounded-0 @groupsTheme">
            <div class="card-header" data-bs-toggle="collapse" data-bs-target="#ProductGroupNavigation_@deviceType" role="button" aria-expanded="true" aria-controls="ProductGroupNavigation_@deviceType">
                <div class="d-flex">
                    <h6 class="card-title fw-bold m-0 flex-fill">@Translate("Navigation")</h6>
                    <div class="my-auto collapse-chevron-icon"></div>
                </div>
            </div>
            <div class="collapse show" id="ProductGroupNavigation_@deviceType">
                <div class="card-body pe-0">
                    @Navigation.RenderNavigation("Navigation/Vertical.cshtml", navigationSettings)
                </div>
            </div>
        </div>
    }

    foreach (FacetGroupViewModel facetGroup in productList.FacetGroups) {
        foreach (FacetViewModel facet in facetGroup.Facets) {
            if (facet.Options.Count() > 0) {
                <div class="card mb-3 border-0 rounded-0 @groupsTheme">
                    <div class="card-header" data-bs-toggle="collapse" data-bs-target="#FacetGroup_@facet.Name.Replace(" ", "")_@deviceType" role="button" aria-expanded="true" aria-controls="FacetGroup_@facet.Name.Replace(" ", "")_@deviceType">
                        <div class="d-flex">
			                <h6 class="card-title fw-bold m-0 flex-fill">@facet.Name</h6>
                            <div class="my-auto collapse-chevron-icon"></div>
		                </div>
                    </div>
                    <div class="collapse show" id="FacetGroup_@facet.Name.Replace(" ", "")_@deviceType">
                        <div class="card-body">
			                @foreach (FacetOptionViewModel facetOption in facet.Options) {
                                string renderType = facet.RenderType;

                                if (renderType == "Colors") {
                                    @RenderColorOption(facet, facetOption)
                                } else {
                                    @RenderCheckboxOption(facet, facetOption)
                                }
                            }
		                </div>
                    </div>
	            </div>
            }
        }
    }
}

@helper RenderCheckboxOption(FacetViewModel facet, FacetOptionViewModel facetOption) { 
    string facetLabel = facetOption.Label;
    string disabled = facetOption.Count <= 0 ? "disabled" : "";
    string selected = facetOption.Selected ? "checked" : "";

    if (facetLabel.ToLower() == "true")
    {
        facetLabel = Translate("Yes");
    }

    if (facetLabel.ToLower() == "false")
    {
        facetLabel = Translate("No");
    }

    <label class="form-check" @disabled>
		<input type="checkbox" onclick="ProductList.Update(event)" class="form-check-input" name="@facet.QueryParameter" value="[@facetOption.Value]" data-filter-value="@facetLabel" @selected>
		<div class="form-check-label d-flex align-items-center"><span class="flex-fill">@facetLabel </span><small class="opacity-50">@facetOption.Count</small></div>
	</label>
}

@helper RenderColorOption(FacetViewModel facet, FacetOptionViewModel facetOption) { 
    string facetLabel = facetOption.Label;
    string disabled = facetOption.Count <= 0 ? "disabled" : "";
    string selected = facetOption.Selected ? "checked" : "";

    string colorCode = facetOption.Value;

    if (!facetOption.Value.Contains("#")) {
        var variantOption = Dynamicweb.Ecommerce.Services.VariantOptions.GetVariantOption(facetOption.Value.ToString(), Dynamicweb.Ecommerce.Common.Context.LanguageID);
        if (variantOption != null) {
            colorCode = variantOption.LargeImage;
        }
    }

    <div class="colorbox">
        <input type="checkbox" onclick="ProductList.Update(event)" class="@disabled @selected" name="@facet.QueryParameter" value="[@facetOption.Value]" data-filter-value="@facetLabel" @selected title="@facetOption.Label"></input>
        @if (facetOption.Value.Contains("#")) {
            <span class="colorbox-background" style="background-color: @facetOption.Value"></span>
        } else {
            <img class="colorbox-background" src="/Admin/Public/GetImage.ashx?width=25&height=25&image=@colorCode"/>
        }
    </div>
}
