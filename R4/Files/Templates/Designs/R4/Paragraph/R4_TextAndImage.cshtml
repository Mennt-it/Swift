@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{ 
	string layout = Model.Item.GetRawValueString("Layout", "image-top");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "px-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

	string ratioCssClass = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "ratio" : "";
	string ratioVariable = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "style=\"--bs-aspect-ratio: " + Model.Item.GetRawValueString("ImageAspectRatio") + "\"" : "";

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	Dynamicweb.Frontend.LinkViewModel link = Model.Item.GetLink("ButtonLink");
	string buttonLabel = Model.Item.GetString("ButtonLabel");
	
}

<div class="h-100 position-relative @(theme)">
	@switch (layout) {

		case "image-top":
			if (link != null && string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel"))) {
				<a href="@Model.Item.GetString("ButtonLink")" class="text-decoration-none text-reset d-block">
					@RenderImageTop(contentPadding, titleFontSize, subtitleFontSize)
				</a>
			}
			else
			{
				@RenderImageTop(contentPadding, titleFontSize, subtitleFontSize)
			}
		break;

		case "title-top":
			if (link != null && string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel"))) {
				<a href="@Model.Item.GetString("ButtonLink")" class="text-decoration-none text-reset d-block">
					@RenderTitleTop(contentPadding, titleFontSize, subtitleFontSize)
				</a>
			}
			else
			{
				@RenderTitleTop(contentPadding, titleFontSize, subtitleFontSize)
			}
		break;

		case "title-lead-top":
			if (link != null && string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel"))) {
				<a href="@Model.Item.GetString("ButtonLink")" class="text-decoration-none text-reset d-block">
					@RenderTitleLeadTop(contentPadding, titleFontSize, subtitleFontSize)
				</a>
			}
			else
			{
				@RenderTitleLeadTop(contentPadding, titleFontSize, subtitleFontSize)
			}
		break;

		case "text-center":
			if (link != null && string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel"))) {
				<a href="@Model.Item.GetString("ButtonLink")" class="text-decoration-none text-reset d-block">
					@RenderTextCenter(contentPadding, titleFontSize, subtitleFontSize)
				</a>
			}
			else
			{
				@RenderTextCenter(contentPadding, titleFontSize, subtitleFontSize)
			}
		break;

		case "image-bottom":
			if (link != null && string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel"))) {
				<a href="@Model.Item.GetString("ButtonLink")" class="text-decoration-none text-reset d-block">
					@RenderImageBottom(contentPadding, titleFontSize, subtitleFontSize)
				</a>
			}
			else
			{
				@RenderImageBottom(contentPadding, titleFontSize, subtitleFontSize)
			}
		break;

	} 
</div>


@helper RenderImage() { 
	if (!string.IsNullOrEmpty(Model.Item.GetString("Image"))) {
		var parms = new Dictionary<string, object>();
		parms.Add("loading", "lazy");
		parms.Add("cssClass", "w-100 h-100 rounded-0 h-100 w-100");
		parms.Add("style", "");
		parms.Add("alt", @Model.Item.GetString("ImageAltText"));

		int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
		int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

		string ratioCssClass = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "ratio" : "";
		string ratioVariable = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "style=\"--bs-aspect-ratio: " + Model.Item.GetRawValueString("ImageAspectRatio") + "\"" : "";

		<figure class="m-0 @ratioCssClass" @ratioVariable>
			@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image"), parms)
		</figure>
	}
}

@helper RenderTitle() { 

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		@Model.Item.GetString("Title")
	}
}

@helper RenderLead() {

	if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
	{
		@Model.Item.GetString("Lead")
	}
}

@helper RenderText() { 
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<div class="mb-0 mt-3 max-w-75ch">
			@Model.Item.GetString("Text")
		</div>
	}
}

@helper RenderButton() {
	Dynamicweb.Frontend.LinkViewModel link = Model.Item.GetLink("ButtonLink");

	if (link != null && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : "";
		string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "");
		buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;
		<a href="@Model.Item.GetString("ButtonLink")" @target class="btn @buttonStyle mt-3 stretched-link">@Model.Item.GetString("ButtonLabel")</a>
	}
}

@helper RenderImageTop(string contentPadding, string titleFontSize, string subtitleFontSize)
{
	@RenderImage()
	<div class="p-3 flex-fill @contentPadding">
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			<h3 class="@titleFontSize h3 mb-3">@RenderTitle()</h3>
		}
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
		{
			<p class="@subtitleFontSize lead mb-0 mt-3 max-w-75ch">@RenderLead()</p>
		}
		@RenderText()
		@RenderButton()
	</div>
}

@helper RenderTitleTop(string contentPadding, string titleFontSize, string subtitleFontSize)
{
	<div class="d-flex flex-column h-100">
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Title"))) {
			<div class="p-3 flex-fill @contentPadding">
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
				{
					<h3 class="@titleFontSize mb-0">@RenderTitle()</h3>
				}
			</div>
		}
		@RenderImage()
		<div class="p-3 flex-fill @contentPadding">
			@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
			{
				<p class="@subtitleFontSize lead mb-3 max-w-75ch">@RenderLead()</p>
			}
			@RenderText()
			@RenderButton()
		</div>
	</div>
}

@helper RenderTitleLeadTop(string contentPadding, string titleFontSize, string subtitleFontSize)
{
	if (
		!string.IsNullOrEmpty(Model.Item.GetString("Title")) ||
		!string.IsNullOrEmpty(Model.Item.GetString("lead"))
		) {
		<div class="p-3 flex-fill @contentPadding">
			@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
			{
				<h3 class="@titleFontSize mb-3">@RenderTitle()</h3>
			}
			@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
			{
				<p class="@subtitleFontSize lead mb-0 max-w-75ch">@RenderLead()</p>
			}
		</div>
	}
	@RenderImage()
	<div class="p-3 flex-fill @contentPadding">
		@RenderText()
		@RenderButton()
	</div>
}

@helper RenderTextCenter(string contentPadding, string titleFontSize, string subtitleFontSize)
{
	@RenderImage()
	<div class="p-3 d-flex flex-column align-items-center text-center flex-fill @contentPadding">
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			<h3 class="@titleFontSize mb-0">@RenderTitle()</h3>
		}
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
		{
			<p class="@subtitleFontSize lead mb-0 mt-3 max-w-75ch">@RenderLead()</p>
		}
		@RenderText()
		@RenderButton()
	</div>
}

@helper RenderImageBottom(string contentPadding, string titleFontSize, string subtitleFontSize)
{
	<div class="p-3 flex-fill @contentPadding">
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			<h3 class="@titleFontSize mb-3">@RenderTitle()</h3>
		}
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
		{
			<p class="@subtitleFontSize lead mb-3 max-w-75ch">@RenderLead()</p>
		}
		@RenderText()
		@RenderButton()
	</div>
	@RenderImage()
}
