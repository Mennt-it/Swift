@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend


@{ 
	string layout = Model.Item?.GetList("Layout")?.SelectedValue != null ? Model.Item.GetList("Layout").SelectedValue : "image-top";
	string contentPadding = Model.Item?.GetList("contentPadding")?.SelectedValue != null ? Model.Item.GetList("contentPadding").SelectedValue : "";
	
	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

	string ratioCssClass = Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "0" && Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "" ? "ratio" : "";
	string ratioVariable = Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "0" && Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "" ? "style=\"--bs-aspect-ratio: " + Model.Item.GetList("ImageAspectRatio").SelectedValue + "\"" : "";


	string theme = "";
	if (Model.Item?.GetList("Theme")?.SelectedValue != null) {
		if (Model.Item.GetList("Theme").SelectedValue.ToLower() != "theme default")
		{
			theme = Model.Item.GetList("Theme").SelectedValue.ToLower();
			theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
			theme = theme.Replace("theme", "");
			theme = "theme theme-" + theme;
		}
	}

}

<div class="card border-0 rounded-0 h-100 @theme">
    @switch (layout) {
        case "image-top":
				@RenderImage()
			<div class="flex-fill @contentPadding">
				@RenderTitle()
				@RenderLead()
				@RenderText()
				@RenderButton()
			</div>
        break;

        case "title-top":
            <div class="d-flex flex-column h-100">
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Title"))) {
					<div class="flex-fill @contentPadding">
						@RenderTitle()
					</div>
				}

				@RenderImage()
				<div class="flex-fill @contentPadding">
					@RenderLead()
					@RenderText()
                    @RenderButton()
                </div>
            </div>
        break;

        case "title-lead-top":
				if (
					!string.IsNullOrEmpty(Model.Item.GetString("Title")) ||
					!string.IsNullOrEmpty(Model.Item.GetString("lead"))
					) {
					<div class="flex-fill @contentPadding">
						@RenderTitle()
						@RenderLead()
					</div>
				}
				@RenderImage()
			<div class="flex-fill @contentPadding">
				@RenderText()
				@RenderButton()
			</div>
        break;

        case "text-center":
				@RenderImage()
			<div class="d-flex flex-column align-items-center text-center flex-fill px-0 @contentPadding">
				@RenderTitle()
				@RenderLead()
				@RenderText()
				@RenderButton()
			</div>
        break;
		case "image-bottom":
			<div class="flex-fill @contentPadding">
				@RenderTitle()
				@RenderLead()
				@RenderText()
				@RenderButton()
			</div>
			<figure class="@ratioCssClass" @ratioVariable>
				@RenderImage()
			</figure>
        break;
    } 
</div>


@helper RenderImage() { 
	if (!string.IsNullOrEmpty(Model.Item.GetString("Image"))) {
		var parms = new Dictionary<string, object>();
		parms.Add("loading", "lazy");
		parms.Add("cssClass", "card-img w-100 h-100 rounded-0 h-100 w-100");
		parms.Add("style", "");
		parms.Add("alt", @Model.Item.GetString("Title"));

		int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
		int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

		string ratioCssClass = Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "0" && Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "" ? "ratio" : "";
		string ratioVariable = Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "0" && Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "" ? "style=\"--bs-aspect-ratio: " + Model.Item.GetList("ImageAspectRatio").SelectedValue + "\"" : "";

		<figure class="m-0 @ratioCssClass" @ratioVariable>
			@RenderPartial("Components/Image.cshtml", Model, parms)
		</figure>
    }
}

@helper RenderTitle() { 
    if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
    {
        <h3 class="h3">@Model.Item.GetString("Title")</h3>
    }
}

@helper RenderLead() { 
    if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
    {
        <p class="lead mb-2 max-w-75ch">@Model.Item.GetString("Lead")</p>
    }
}

@helper RenderText() { 
    if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
    {
        <div class="max-w-75ch">
			@Model.Item.GetString("Text")
		</div>
    }
}

@helper RenderButton() { 
    if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink")) && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
    {
		<a href="@Model.Item.GetString("ButtonLink")" class="btn btn-primary stretched-link">@Model.Item.GetString("ButtonLabel")</a>
    } 
	else if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink"))) {
		<a href="@Model.Item.GetString("ButtonLink")" class="stretched-link"></a>
	}
}
