@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend


@{ 
	string layout = Model.Item?.GetList("Layout")?.SelectedValue != "" ? Model.Item.GetList("Layout").SelectedValue : "image-top";
    string theme = Model.Item?.GetList("Theme")?.SelectedValue != "" ? Model.Item.GetList("Theme").SelectedValue.ToLower() : "";
	theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
	theme = theme.Replace("theme", "");

	string ratioCssClass = Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "0" && Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "" ? "ratio" : "";
	string ratioVariable = Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "0" && Model.Item?.GetList("ImageAspectRatio")?.SelectedValue != "" ? "style=\"--aspect-ratio: " + Model.Item.GetList("ImageAspectRatio").SelectedValue + "\"" : "";

    string contentPadding = Model.Item.GetBoolean("ContentPadding") ? "p-3" : "";
}

<div class="card border-0 theme theme-@theme">
    @switch (layout) {
        case "image-top":
			<figure class="@ratioCssClass" @ratioVariable>
				@RenderImage()
			</figure>
			<div class="card-body p-0 max-w-75ch @contentPadding">
				@RenderTitle()
				@RenderLead()
				@RenderText()
				@RenderButton()
			</div>
        break;

        case "title-top":
            <div class="d-flex flex-column h-100">
				@RenderTitle()
				<figure class="@ratioCssClass" @ratioVariable>
					@RenderImage()
				</figure>
				<div class="card-body p-0 max-w-75ch @contentPadding">
					@RenderLead()
					@RenderText()
                    @RenderButton()
                </div>
            </div>
        break;

        case "title-lead-top":
				@RenderTitle()
				@RenderLead()
			<figure class="@ratioCssClass" @ratioVariable>
				@RenderImage()
			</figure>
			<div class="card-body p-0 max-w-75ch @contentPadding">
				@RenderText()
				@RenderButton()
			</div>
        break;

        case "text-center":
			<figure class="@ratioCssClass" @ratioVariable>
				@RenderImage()
			</figure>
			<div class="d-flex flex-column align-items-center text-center">
				<div class="card-body p-0 max-w-75ch @contentPadding">
					@RenderTitle()
					@RenderLead()
					@RenderText()
					@RenderButton()
				</div>
			</div>
        break;
    } 
</div>


@helper RenderImage() { 
if (Model.Item.GetString("Image") != null)
{
	string imagePath = Model.Item?.GetFile("Image")?.Path ?? "";
	imagePath = "/Admin/Public/GetImage.ashx?width=" + 1920 + "&height=" + 845 + "&image=" + imagePath + "&Format=WebP&Quality=100";

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

        <img loading="lazy" src="@imagePath" class="card-img w-100 h-100 rounded-0 h-100 w-100" style="object-fit: cover; object-position: @(xPos)% @(yPos)%" title="@Model.Item.GetString("Title")" alt="@Model.Item.GetString("Title")" />
    }
}

@helper RenderTitle() { 
    if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
    {
        <h3 class="h3">@Model.Item.GetString("Title")</h3>
    }
}

@helper RenderLead() { 
    if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
    {
        <p class="lead mb-2">@Model.Item.GetString("Lead")</p>
    }
}

@helper RenderText() { 
    if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
    {
        @Model.Item.GetString("Text")
    }
}

@helper RenderButton() { 
    if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink")) && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
    {
		<a href="@Model.Item.GetString("ButtonLink")" class="btn btn-primary stretched-link">@Model.Item.GetString("ButtonLabel")</a>
    } 
	else if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink"))) {
		<a href="@Model.Item.GetString("ButtonLink")" class="stretched-link"></a>
	}
}
