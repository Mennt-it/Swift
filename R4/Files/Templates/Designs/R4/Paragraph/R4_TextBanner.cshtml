@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string link = Model.Item.GetString("Link");

	string layout = Model.Item.GetRawValueString("Layout", "text-start");	
	layout = layout == "alignLeft"   ? "text-start"  : layout;
	layout = layout == "alignCenter" ? "text-center" : layout;
	layout = layout == "alignRight"  ? "text-end"    : layout;

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none"  ? "py-0"         : contentPadding;
	contentPadding = contentPadding == "small" ? "py-3"         : contentPadding;
	contentPadding = contentPadding == "large" ? "py-4 py-xl-5" : contentPadding;

	string textScaling = Model.Item.GetRawValueString("TextScaling", "");
	textScaling = textScaling == "small"  ? "fs-7" : textScaling;
	textScaling = textScaling == "medium" ? ""     : textScaling;
	textScaling = textScaling == "large"  ? "fs-5" : textScaling;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
{
<aside class="@(contentPadding) @(textScaling) @(layout) @(theme)">
	<div class="container-xl">
		@if (!string.IsNullOrEmpty(@link))
		{
			<a href="@(link)">
				@Model.Item.GetString("Text")
			</a>
		}
		else
		{
			@Model.Item.GetString("Text")
		}
	</div>
</aside>
}
