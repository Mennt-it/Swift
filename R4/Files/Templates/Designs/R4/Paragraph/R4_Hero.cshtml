@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend


@{
	string layout = Model.Item?.GetList("Layout")?.SelectedValue != "" ? Model.Item.GetList("Layout").SelectedValue : "align-middle-center-text-center";

	string horizontalAlign = "justify-content-center";
	string verticalAlign = "";
	string textAlign = "";

	if (layout.Contains("align-middle-center-text-left"))
	{
		verticalAlign = "align-items-center";
		textAlign = "text-start";
	}
	if (layout.Contains("align-top-center-text-center"))
	{
		verticalAlign = "align-items-start";
		textAlign = "text-center";
	}
	if (layout.Contains("align-middle-center-text-center"))
	{
		verticalAlign = "align-items-center";
		textAlign = "text-center";
	}
	if (layout.Contains("align-bottom-center-text-center"))
	{
		verticalAlign = "align-items-end";
		textAlign = "text-center";
	}
	if (layout.Contains("align-middle-center-text-right"))
	{
		verticalAlign = "align-items-center";
		textAlign = "text-end";
	}
}

<div class="item">
	@switch (layout)
	{
		case "align-middle-center-text-left":
			<div class="position-relative top-0 h-100 w-100 min-h-500px">
				@RenderImage()
				<div class="position-relative top-0 h-100 w-100 py-5 px-3">
					<div class="d-flex @horizontalAlign @verticalAlign h-100">
						<div class="@textAlign max-w-700px">
							@RenderTitle()
							@RenderText()
							@RenderButton()
						</div>
					</div>
				</div>
			</div>
			break;
		case "align-top-center-text-center":
			<div class="position-relative top-0 h-100 w-100 min-h-500px">
				@RenderImage()
				<div class="position-relative top-0 h-100 w-100 py-5 px-3">
					<div class="d-flex @horizontalAlign @verticalAlign h-100">
						<div class="@textAlign max-w-700px">
							@RenderTitle()
							@RenderText()
							@RenderButton()
						</div>
					</div>
				</div>
			</div>
			break;
		case "align-middle-center-text-center":
			<div class="position-relative top-0 h-100 w-100 min-h-500px">
				@RenderImage()
				<div class="position-relative top-0 h-100 w-100 py-5 px-3">
					<div class="d-flex @horizontalAlign @verticalAlign h-100">
						<div class="@textAlign max-w-700px">
							@RenderTitle()
							@RenderText()
							@RenderButton()
						</div>
					</div>
				</div>
			</div>
			break;
		case "align-bottom-center-text-center":
			<div class="position-relative top-0 h-100 w-100 min-h-500px">
				@RenderImage()
				<div class="position-relative top-0 h-100 w-100 py-5 px-3">
					<div class="d-flex @horizontalAlign @verticalAlign h-100">
						<div class="@textAlign max-w-700px">
							@RenderTitle()
							@RenderText()
							@RenderButton()
						</div>
					</div>
				</div>
			</div>
			break;
		case "align-middle-center-text-right":
			<div class="position-relative top-0 h-100 w-100 min-h-500px">
				@RenderImage()
				<div class="position-relative top-0 h-100 w-100 py-5 px-3">
					<div class="d-flex @horizontalAlign @verticalAlign h-100">
						<div class="@textAlign max-w-700px">
							@RenderTitle()
							@RenderText()
							@RenderButton()
						</div>
					</div>
				</div>
			</div>
			break;
	}
</div>

@helper RenderImage()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
	{
		string imagePath = Model.Item?.GetFile("Image")?.Path ?? "";
		imagePath = "/Admin/Public/GetImage.ashx?width=" + 1920 + "&height=" + 845 + "&image=" + imagePath + "&Format=WebP&Quality=100";

		int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
		int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

		<div class="position-absolute h-100 w-100 image-filter-darken">
			<img loading="lazy" src="@imagePath" style="object-fit: cover; object-position: @(xPos)% @(yPos)%" class="w-100 h-100" title="@Model.Item.GetString("Title")" alt="@Model.Item.GetString("Title")" />
		</div>
	}
}

@helper RenderTitle()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		<h2 class="display-3 text-light mb-3">@Model.Item.GetString("Title")</h2>
	}
}

@helper RenderText()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<p class="lead text-light mb-3">@Model.Item.GetString("Text")</p>
	}
}

@helper RenderButton()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink")) && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		<div>
			<a href="@Model.Item.GetString("ButtonLink")" class="btn btn-primary btn-giant">@Model.Item.GetString("ButtonLabel")</a>
		</div>
	}
}
