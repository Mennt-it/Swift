@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using System.Web


@{
	string themeName = !string.IsNullOrWhiteSpace(Model.Item.GetString("Name")) ? Model.Item.GetString("Name") : "Default";
	string themeClassName = !string.IsNullOrWhiteSpace(Model.Item.GetString("CSSClassName")) ? Model.Item.GetString("CSSClassName").Replace(" ", "").Trim().ToLower() : "";

	string imagePath = "files/templates/designs/r4/assets/images/gray.jpg";

	string foregroundColor = Model.Item.GetString("ForegroundColor") != null ? Model.Item.GetString("ForegroundColor") : "";
	foregroundColor = foregroundColor == "" ? "none" : foregroundColor;
	string backgroundColor = Model.Item.GetString("BackgroundColor") != null ? Model.Item.GetString("BackgroundColor") : "";
	backgroundColor = backgroundColor == "" ? "none" : backgroundColor;
	string borderColor = Model.Item.GetString("BorderColor") != null ? Model.Item.GetString("BorderColor") : "";
	borderColor = borderColor == "" ? "none" : borderColor;
	string buttonPrimaryBackgroundColor = Model.Item.GetString("ButtonPrimaryBackgroundColor") != null ? Model.Item.GetString("ButtonPrimaryBackgroundColor") : "";
	buttonPrimaryBackgroundColor = buttonPrimaryBackgroundColor == "" ? "none" : buttonPrimaryBackgroundColor;
	string buttonPrimaryForegroundColor = Model.Item.GetString("ButtonPrimaryForegroundColor") != null ? Model.Item.GetString("ButtonPrimaryForegroundColor") : "";
	buttonPrimaryForegroundColor = buttonPrimaryForegroundColor == "" ? "none" : buttonPrimaryForegroundColor;
	string buttonPrimaryBorderColor = Model.Item.GetString("ButtonPrimaryBorderColor") != null ? Model.Item.GetString("ButtonPrimaryBorderColor") : "";
	buttonPrimaryBorderColor = buttonPrimaryBorderColor == "" ? "none" : buttonPrimaryBorderColor;
	string buttonSecondaryBackgroundColor = Model.Item.GetString("ButtonSecondaryBackgroundColor") != null ? Model.Item.GetString("ButtonSecondaryBackgroundColor") : "";
	buttonSecondaryBackgroundColor = buttonSecondaryBackgroundColor == "" ? "none" : buttonSecondaryBackgroundColor;
	string buttonSecondaryForegroundColor = Model.Item.GetString("ButtonSecondaryForegroundColor") != null ? Model.Item.GetString("ButtonSecondaryForegroundColor") : "";
	buttonSecondaryForegroundColor = buttonSecondaryForegroundColor == "" ? "none" : buttonSecondaryForegroundColor;
	string buttonSecondaryBorderColor = Model.Item.GetString("ButtonSecondaryBorderColor") != null ? Model.Item.GetString("ButtonSecondaryBorderColor") : "";
	buttonSecondaryBorderColor = buttonSecondaryBorderColor == "" ? "none" : buttonSecondaryBorderColor;

	var sb = new System.Text.StringBuilder();

	sb.AppendLine("." + themeClassName + "{");
	if (!string.IsNullOrEmpty(foregroundColor))
	{
		sb.AppendLine($"--r4-foreground-color: {foregroundColor};");
	}
	if (!string.IsNullOrEmpty(backgroundColor))
	{
		sb.AppendLine($"--r4-background-color: {backgroundColor};");
	}
	if (!string.IsNullOrEmpty(borderColor))
	{
		sb.AppendLine($"--r4-border-color: {borderColor};");
	}
	if (!string.IsNullOrEmpty(buttonPrimaryBackgroundColor))
	{
		sb.AppendLine($"--r4-button-primary-background-color: {buttonPrimaryBackgroundColor};");
	}
	if (!string.IsNullOrEmpty(buttonPrimaryForegroundColor))
	{
		sb.AppendLine($"--r4-button-primary-foreground-color: {buttonPrimaryForegroundColor};");
	}
	if (!string.IsNullOrEmpty(buttonPrimaryBorderColor))
	{
		sb.AppendLine($"--r4-button-primary-border-color: {buttonPrimaryBorderColor};");
	}
	if (!string.IsNullOrEmpty(buttonSecondaryBackgroundColor))
	{
		sb.AppendLine($"--r4-button-secondary-background-color: {buttonSecondaryBackgroundColor};");
	}
	if (!string.IsNullOrEmpty(buttonSecondaryForegroundColor))
	{
		sb.AppendLine($"--r4-button-secondary-foreground-color: {buttonSecondaryForegroundColor};");
	}
	if (!string.IsNullOrEmpty(buttonSecondaryBorderColor))
	{
		sb.AppendLine($"--r4-button-secondary-border-color: {buttonSecondaryBorderColor};");
	}
	sb.AppendLine("}");

	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(sb.ToString() + Environment.NewLine, Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/R4/_parsed/R4_css/R4_theme_styles_{Dynamicweb.Services.Pages.GetPage(Model.PageID).AreaId}.tmp"), true);
}

@if (themeClassName != "") {
	string backgroundImage = "";
	string iconPath = "/Files/Icons/";

	if (backgroundColor == "none" || backgroundColor == "") { 
		backgroundImage = "style=\"background-image: url('/Admin/Public/GetImage.ashx?image=" + imagePath + "&width=420&Format=WebP&Quality=70')\"";
	}

	<div class="col-12 col-lg-4">
		<div class="theme-option theme @themeClassName" @backgroundImage>
			<div class="mb-2 pb-1 border-bottom d-flex align-items-center">
				<span class="icon-2 me-2">
					@ReadFile(iconPath+"sun.svg")
				</span>
				<span class="text-uppercase">@themeName</span>
			</div>
			<div>
				<button class="btn btn-sm btn-primary me-1">Primary</button>
				<button class="btn btn-sm btn-secondary">Secondary</button>
			</div>
		</div>
	</div>
	<div class="col-12 col-lg-8 mb-4 mb-lg-0">
		<div class="row fs-7">
			<div class="col-12 col-lg-3">
				<table class="table table-borderless table-sm w-100">
					<tr>
						<td colspan="2" class="fw-bold">@Translate("Base")</td>
					</tr>
					<tr>
						<td>@Translate("Foreground")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@foregroundColor');">@foregroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Background")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@backgroundColor');">@backgroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Border")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@borderColor');">@borderColor</a></td>
					</tr>
				</table>
			</div>
			<div class="col-12 col-lg-3">
				<table class="table table-borderless table-sm w-100">
					<tr>
						<td colspan="2" class="fw-bold">@Translate("Primary button")</td>
					</tr>
					<tr>
						<td>@Translate("Foreground")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryForegroundColor');">@buttonPrimaryForegroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Background")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryBackgroundColor');">@buttonPrimaryBackgroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Border")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryBorderColor');">@buttonPrimaryBorderColor</a></td>
					</tr>
				</table>
			</div>
			<div class="col-12 col-lg-3">
				<table class="table table-borderless table-sm w-100">
					<tr>
						<td colspan="2" class="fw-bold">@Translate("Secondary button")</td>
					</tr>
					<tr>
						<td>@Translate("Foreground")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryForegroundColor');">@buttonSecondaryForegroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Background")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryBackgroundColor');">@buttonSecondaryBackgroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Border")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryBorderColor');">@buttonSecondaryBorderColor</a></td>
					</tr>
				</table>
			</div>
			<div class="col-12 col-lg-3">
				<table class="table table-borderless table-sm w-100">
					<tr>
						<td class="fw-bold">@Translate("Implementation")</td>
					</tr>
					<tr>
						<td>
							@{ 
								string implementation = "<div class=\"theme " + themeClassName + "\"></div>";
							}
							<div class="text-muted">
								<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@themeClassName');">
									@HttpUtility.HtmlEncode(implementation)
								</a>
							</div>
						</td>
					</tr>
				</table>
			</div>
		</div>
	</div>
}

<script>
	function fallbackCopyTextToClipboard(text) {
	  var textArea = document.createElement("textarea");
	  textArea.value = text;
  
	  // Avoid scrolling to bottom
	  textArea.style.top = "0";
	  textArea.style.left = "0";
	  textArea.style.position = "fixed";

	  document.body.appendChild(textArea);
	  textArea.focus();
	  textArea.select();

	  try {
		var successful = document.execCommand('copy');
		var msg = successful ? 'successful' : 'unsuccessful';
		console.log('Fallback: Copying text command was ' + msg);
	  } catch (err) {
		console.error('Fallback: Oops, unable to copy', err);
	  }

	  document.body.removeChild(textArea);
	}
	function copyTextToClipboard(text) {
	  if (!navigator.clipboard) {
		fallbackCopyTextToClipboard(text);
		return;
	  }
	  navigator.clipboard.writeText(text).then(function() {
		console.log('Async: Copying to clipboard was successful!');
	  }, function(err) {
		console.error('Async: Could not copy text: ', err);
	  });
	}
</script>
