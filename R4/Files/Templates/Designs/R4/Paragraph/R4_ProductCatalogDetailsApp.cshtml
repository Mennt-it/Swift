@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	//Set default product data
	ProductViewModelSettings productSetting = new ProductViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	string selectedDummyProduct = "PROD1";
	var list = new ProductListViewModel();
	if (Model.Item.GetValue("DummyProduct") != null) {
		list = Model.Item.GetValue("DummyProduct") as ProductListViewModel;

		foreach (var product in list.Products)
		{
			selectedDummyProduct = product.Id;
		}

		ProductViewModel dummyProduct = ViewModelFactory.CreateView(productSetting, selectedDummyProduct);

		if (!Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
		{
			Dynamicweb.Context.Current.Items.Add("ProductDetails", dummyProduct);
		}
	} else if (isVisualEditor) {
		<div class="alert alert-danger" role="alert">
			<span>@Translate("Please select a Dummy product on this paragraph")</span>
		</div>
	}
}

@if (isVisualEditor)
{
	<div class="alert alert-info" role="alert">
		<span>@Translate("Product catalog App: Edit this column to configure. (Product catalog app must be attached this paragraph)")</span>
	</div>
}

@Model.GetModuleOutput()
