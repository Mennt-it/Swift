@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend
@using System.Web

@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductViewModel product = new ProductViewModel();

	if (System.Web.HttpContext.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)System.Web.HttpContext.Current.Items["ProductDetails"];
	}

	//Collect the images
	int totalImages = 0;
	var selectedImageCategories = Model.Item.GetList("ImageAssets").SelectedValues;
	var imageCategories = product.AssetCategories.Where(x => selectedImageCategories.Contains(x.SystemName));

	if (Model.Item.GetList("ImageAssets").SelectedValues.Count() > 0) {
		foreach (AssetCategoryViewModel group in imageCategories) {
			foreach (MediaViewModel asset in group.Assets) {
				if (asset.Value.ToLower().Contains(".jpeg") || asset.Value.ToLower().Contains(".jpg") || asset.Value.ToLower().Contains(".png") || asset.Value.ToLower().Contains(".gif")) {
					totalImages++;
				}
			}
		}
	} else {
		foreach (AssetCategoryViewModel group in product.AssetCategories) {
			foreach (MediaViewModel asset in group.Assets) {
				if (asset.Value.ToLower().Contains(".jpeg") || asset.Value.ToLower().Contains(".jpg") || asset.Value.ToLower().Contains(".png") || asset.Value.ToLower().Contains(".gif")) {
					totalImages++;
				}
			}
		}
	}

	foreach (var image in product.ImagePatternImages) {
		totalImages++;
	}
}


@* Get images from selected categories or get all images *@
<div class="item">
	<div class="row g-4">
		@if (Model.Item.GetList("ImageAssets").SelectedValues.Count() > 0) {
			foreach (AssetCategoryViewModel group in imageCategories) {
				foreach (MediaViewModel asset in group.Assets) {
					if (asset.Value.ToLower().Contains(".jpeg") || asset.Value.ToLower().Contains(".jpg") || asset.Value.ToLower().Contains(".png") || asset.Value.ToLower().Contains(".gif")) {
						@RenderImage(asset)
					}
				}
			}
		} else {
			foreach (AssetCategoryViewModel group in product.AssetCategories) {
				foreach (MediaViewModel asset in group.Assets) {
					if (asset.Value.ToLower().Contains(".jpeg") || asset.Value.ToLower().Contains(".jpg") || asset.Value.ToLower().Contains(".png") || asset.Value.ToLower().Contains(".gif")) {
						@RenderImage(asset)
					}
				}
			}
		}
	</div>

	<!-- Modal -->
	<div class="modal fade" id="ImageModal_@Model.ID" tabindex="-1" aria-labelledby="@Translate("Full image")" aria-hidden="true">
	  <div class="modal-dialog">
		<div class="modal-content">
		  <div class="modal-header">
			<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@Translate("Close")"></button>
		  </div>
		  <div class="modal-body">
			  <img src="" alt="" style="object-fit: cover;" id="FullImage_@Model.ID">
		  </div>
		</div>
	  </div>
	</div>
</div>


@helper RenderImage(MediaViewModel asset) { 
	string aspectRatio = Model.Item?.GetList("ImageAspectRatio")?.SelectedValue ?? "16x9";
	string fillCanvas = Model.Item.GetBoolean("KeepAspectRatio") ? "&fillcanvas=true" : "";
	string smallImage = "/Admin/Public/GetImage.ashx?width=1200&height=1200&crop=7" + fillCanvas + "&image=" + asset.Value;
	string largeImage = "/Admin/Public/GetImage.ashx?width=1920&height=1920&crop=0&image=" + asset.Value;

	<div class="col-lg-6">
		<div class="ratio ratio-@aspectRatio btn" data-bs-toggle="modal" data-bs-target="#ImageModal_@Model.ID">
			<img loading="lazy" src="@smallImage" data-full-image="@largeImage" alt="@asset.Name" style="object-fit: cover;" onclick="document.querySelector('#FullImage_@Model.ID').src = this.getAttribute('data-full-image')">
		</div>
	</div>
}
