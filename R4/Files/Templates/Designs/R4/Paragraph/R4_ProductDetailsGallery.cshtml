@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend

@{ 
	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	@* Collect the images *@
	var selectedImageCategories = Model.Item.GetList("ImageAssets").SelectedValues;
	var images = product.AssetCategories.Where(x => selectedImageCategories.Contains(x.SystemName)).SelectMany(x => x.Assets).Union(product.ImagePatternImages);

	int totalImages = 0;
	foreach (MediaViewModel asset in images) {
		var assetName = asset.Value.ToLower(); 
		if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
			totalImages++;
		} 
	}

	if (totalImages == 0 && product.DefaultImage != null)
	{
		images = new List<MediaViewModel>(){product.DefaultImage};
		totalImages = 1;
	}

	@* Layout settings *@
	string spacing = Model.Item.GetRawValueString("Spacing", "4");
	spacing = spacing == "none" ? "g-0" : spacing;
	spacing = spacing == "small" ? "g-3" : spacing;
	spacing = spacing == "large" ? "g-4" : spacing;

	string layout = Model.Item.GetRawValueString("Layout", "grid");
}

@* Get images from selected categories or get all images *@
@if (totalImages != 0)
{
	@* Show the gallery on large screens *@
	<div class="d-none d-lg-block">
		<div class="row @spacing">
			@{ 
				int imageNumber = 0;

				foreach (MediaViewModel asset in images) {
					var assetName = asset.Value.ToLower(); 

					if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
						string colClass = totalImages > 1 ? "col-lg-6" : "col-12";
						colClass = layout == "full-first" && imageNumber == 0 ? "col-12" : colClass;
						colClass = layout == "full-last" && imageNumber == (totalImages - 1) ? "col-12" : colClass;
						colClass = layout == "advanced-grid" && imageNumber > 1 ? "col-4" : colClass;

						<div class="@colClass">
							@RenderImage(asset, product, imageNumber)
						</div>

						imageNumber++;
					}
				}
			}
		</div>
	</div>

	@* Modal *@
	<div class="modal fade" id="modal_@Model.ID" tabindex="-1" aria-labelledby="@Translate("Full image")" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered modal-xl">
			<div class="modal-content">
				<div class="modal-body">
					<div id="FullImages_@Model.ID" class="d-flex align-items-center justify-content-center">
						@foreach (MediaViewModel asset in images) {
							var assetName = asset.Value.ToLower(); 
							if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
								string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;
								var parms = new Dictionary<string, object>();
								@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = imagePath }, parms)
							}
						}
					</div>
					<script type="module">
						var sliderFull_@(Model.ID) = tns({
							container: '#FullImages_@Model.ID',
							items: 1,
							gutter: 16,
							mode: 'carousel',
							navPosition: 'bottom',
							mouseDrag: true,
							touch: true,
							arrowKeys: true,
							nav: false,
							loop: false,
							controls: false
						});

						document.querySelectorAll('.js-product-image').forEach(function (imageElement) {
							imageElement.onclick = function (e) {
								var clickedButton = e.currentTarget;
								var slideNumber = clickedButton.getAttribute("data-image-number");
								sliderFull_@(Model.ID).goTo(slideNumber);
							};
						});
					</script>
				</div>
			</div>
		</div>
	</div>

	@* Show the thumbs on small screens *@
	<div class="d-block d-lg-none mini-product-image-slider">
		<div id="SmallScreenImages_@Model.ID">
			@{
				var smallImageNumber = 0;

				foreach (MediaViewModel asset in images)
				{
					var assetName = asset.Value.ToLower();

					if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif"))
					{
						@RenderImage(asset, product, smallImageNumber)
						smallImageNumber++;
					}
				}
			}
		</div>

		@* Tiny slider *@
		<script type="module">
			var slider_@Model.ID = tns({
				container: '#SmallScreenImages_@Model.ID',
				items: 1,
				gutter: 16,
				mode: 'carousel',
				navPosition: 'bottom',
				mouseDrag: true,
				touch: true,
				arrowKeys: true,
				nav: true,
				loop: false,
				controls: false,
			});
		</script>
	</div>
}

@helper RenderImage(MediaViewModel asset, ProductViewModel product, int number) { 
	string padding = "";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	if (theme != "")
	{
		padding = "p-3";
	} 

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
	ratio = ratio != "0" ? ratio : "";
	string ratioCssClass = ratio != "" && ratio != "fill" ? " ratio" : "";
	string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";
	string fillClass = ratio == "fill" ? " h-100" : "";

	string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;
	string productName = product.Name;

	var parms = new Dictionary<string, object>();
	parms.Add("alt", @product.Name);

	if (ratio == "fill") {
		parms.Add("cssClass", "w-100 h-100 image-zoom");
	}
	else
	{
		parms.Add("cssClass", "mw-100 mh-100");
	}

	<div class="@(padding)@(theme)">
		<a href="@imagePath" class="d-block @(ratioCssClass)@(fillClass) js-product-image" style="@(ratioVariable)" data-bs-toggle="modal" data-bs-target="#modal_@Model.ID" data-image-number="@number">
			<span class="d-flex align-items-center justify-content-center overflow-hidden">
				@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = imagePath }, parms)
			</span>
		</a>
	</div>
}
