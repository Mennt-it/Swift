@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog


@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductListViewModel productList = new ProductListViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}

	string detailsPageLink = Dynamicweb.Context.Current.Items["DetailsPageLink"] != null ? Dynamicweb.Context.Current.Items["DetailsPageLink"].ToString() : "";

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string textPadding = theme != "" ? "px-2 px-lg-3 pb-2 pb-lg-3" : "";

	string url = Dynamicweb.Context.Current.Request.RawUrl;
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=R4_PageClean.cshtml" : "?LayoutTemplate=R4_PageClean.cshtml";
	}

	string staticVariantsLayout = Model.Item.GetRawValueString("StaticVariantsLayout", "hide");

	string groupId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("GroupID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("GroupID") : "";
}

@if (productList.TotalProductsCount > 0) { 
	int pageSizeSetting = 30;
	int pageSize = productList.PageSize;
	pageSize += pageSizeSetting;

	int loadedProducts = productList.PageSize > productList.TotalProductsCount ? productList.TotalProductsCount : productList.PageSize;

	<div class="row g-4 mt-n4 mb-5 border-bottom">
		@foreach (ProductViewModel product in productList.Products)
		{
			string link = detailsPageLink + "&amp;ProductID=" + product.Id;
			link += !string.IsNullOrEmpty(product.VariantId) ? "&amp;VariantID=" + product.VariantId : "";
			string price = product?.Price?.PriceFormatted ?? "";
			string imagePath = product?.DefaultImage?.Value ?? "";
			imagePath = Dynamicweb.Context.Current.Server.UrlEncode(imagePath);

			string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
			ratio = ratio != "0" ? ratio : "";
			string ratioCssClass = ratio != "" ? " ratio" : "";
			string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";

			string imagePathXs       = "/Admin/Public/GetImage.ashx?image=" + imagePath + "&width=240&format=WebP&Quality=70";
			string imagePathS        = "/Admin/Public/GetImage.ashx?image=" + imagePath + "&width=350&format=WebP&Quality=70";
			string imagePathFallBack = "/Admin/Public/GetImage.ashx?image=" + imagePath + "&width=350&format=WebP&Quality=70";

			string imageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", "").Trim().ToLower() : "";
			string imagePadding = imageTheme != "" || theme != "" ? "p-2 p-lg-3" : "";

			string imageId = "ProductImage_" + product.Id + product.VariantId;
			string priceId = "ProductPrice_" + product.Id + product.VariantId;

			<article class="col-6 col-lg-4 pb-3 pb-lg-5">
				<a href="@link" class="d-block text-decoration-none text-reset">
					<div class="d-flex flex-column h-100@(theme)">
						<div class="@(ratioCssClass)@(imageTheme)" style="@(ratioVariable);">
							<div class="d-flex align-items-center justify-content-center">
								<img 
									id="@imageId"
									srcset="
										@imagePathXs 240w,
										@imagePathS  350w"
									sizes="(max-width: 640px) 480px, 640px"
									src="@imagePathFallBack"
									height=""
									width=""
									loading="lazy"
									class="mw-100 mh-100 @imagePadding"
									alt="@product.Name">
							</div>
						</div>
						<div class="mt-3 d-flex flex-column h-100 position-relative @textPadding">
							<div class="flex-fill">
								<h3 class="h6">@product.Name @product.VariantId</h3>

								@if (!Model.Item.GetBoolean("HideProductNumber")) { 
									<p class="mb-2">@product.Number</p>
								}
							</div>
							<div>
								@if (product.Price.Price != product.PriceBeforeDiscount.Price) {
									<span class="text-decoration-line-through text-muted">
										@product.PriceBeforeDiscount.PriceFormatted
									</span>
								}
								<span class="fw-bold" id="@priceId">
									<span class="text-price">@price</span>
								</span>
							</div>

						</div>
					</div>
				</a>
				@if (product.VariantInfo.VariantInfo != null && Model.Item.GetBoolean("ShowVariants"))
				{
					var optionCount = product.VariantInfo.VariantInfo.Count();
					var showMaxVariants = 3;

					<section class="mt-3 pt-3 border-top w-100 d-none d-lg-flex">
						@foreach (VariantInfoViewModel variant in product.VariantInfo.VariantInfo.Take(showMaxVariants))
						{
							string variantLink = detailsPageLink + "&amp;ProductID=" + product.Id;
							variantLink += "&amp;VariantID=" + variant.VariantID;

							<article class="w-25 me-2">
								<a href="@variantLink" class="text-decoration-none">
									<figure class="figure w-100 d-block m-0" onmouseover="switchVariantProduct('@product.Id', '@variant.Price.PriceFormatted', '@variant.Image.Value')" onmouseout="switchVariantProduct('@product.Id', '@product.Price.PriceFormatted', '@product.DefaultImage.Value')">
										<div class="@(ratioCssClass)@(imageTheme)" style="@(ratioVariable)">
											<div class="d-flex align-items-center justify-content-center">
												<img src="/admin/public/GetImage.ashx?image=@variant.Image.Value&width=75&height=75&crop=5&FillCanvas=true&format=webp&Quality=70" height="75" width="75" class="mw-100 mh-100 p-1" loading="lazy" alt="@product.Name, @variant.OptionName">
											</div>
										</div>
										<figcaption class="figure-caption text-start text-uppercase text-truncate w-100 d-block">@variant.OptionName</figcaption>
									</figure>
									<div class="visually-hidden">
										<h4>@Translate("Variant Name")</h4>
										<p>@product.Name, @variant.OptionName</p>
										<h4>@Translate("Variant Price")</h4>
										<p><span class="text-price">@variant.Price.PriceFormatted</span></p>
									</div>
								</a>
							</article>
						}
						@if (optionCount > showMaxVariants)
						{
							int left = optionCount - showMaxVariants;
							<div class="px-2 pb-3 d-flex justify-content-center align-items-center">
								<span>+@left</span>
							</div>
						}
					</section>
				}
			</article>
		}
	</div>

	<div class="row mb-3">
		<div class="col text-center">
			<div class="text-muted mb-3">@loadedProducts @Translate("out of") @productList.TotalProductsCount @Translate("products")</div>
			@if (productList.PageCount != 1) {
				string sortBySelection = Dynamicweb.Context.Current.Request?.Form["SortBy"] ?? "name";

				<form method="post" action="@url" data-response-target-element="content" class="w-100">
					@foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
					{
						foreach (FacetViewModel facetItem in facetGroup.Facets)
						{
							foreach (FacetOptionViewModel facetOption in facetItem.Options)
							{
								if (facetOption.Selected)
								{
									<input type="hidden" name="@facetItem.QueryParameter" value="[@facetOption.Value]" />
								}
							}
						}
					}

					@if (productList?.Group?.Id != null) {
						<input type="hidden" name="GroupId" value="@productList.Group.Id" />
					}

					<input type="hidden" name="PageSize" value="@pageSize" />
					<input type="hidden" name="SortBy" value="@sortBySelection" />
					<input type="hidden" name="RequestType" value="UpdateList" />

					<button class="btn btn-primary mb-3" type="button" onclick="ProductList.Update(event)">@Translate("Load more products")</button>
				</form>
			}
			<button type="button" onclick="document.body.scrollTop = 0; document.documentElement.scrollTop = 0;" class="btn btn-clean mb-3">@Translate("Back to top") </button>
		</div>
	</div>

	<script>
		function showStaticVariants(id) {
			var staticVariantsElement = document.querySelector("#StaticVariants_" + id);

			if (staticVariantsElement) {
				staticVariantsElement.style.bottom = 0;
			}
		}

		function hideStaticVariants(id) {
			var staticVariantsElement = document.querySelector("#StaticVariants_" + id);

			if (staticVariantsElement) {
				staticVariantsElement.style.bottom = '-100px';
			}
		}

		function switchVariantProduct(id, price, imagesrc) {
			var productImageElement = document.querySelector("#ProductImage_" + id);
			var productPriceElement = document.querySelector("#ProductPrice_" + id + " .text-price");

			if (productPriceElement) {
				productPriceElement.innerText = price;
			}

			if (productImageElement) {
				productImageElement.src = imagesrc;

				var imageSrcset = productImageElement.srcset;
				imageSrcset = imageSrcset.replace(/image=.*?&/g, 'image=' + imagesrc + "&");

				productImageElement.srcset = imageSrcset;
			}
		}
	</script>
} else {
	if (!isVisualEditor) {
		<div class="alert alert-dark m-0">
			@Translate("We did not find anything matching your search result")
		</div>
	} else {
		<div class="alert alert-dark m-0" role="alert">
			<span>@Translate("Product list: The list will be shown here, if any")</span>
		</div>
	}
}
