@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend

@{
	string layout = Model.Item?.GetList("Layout")?.SelectedValue != null ? Model.Item.GetList("Layout").SelectedValue : "align-middle-center-text-center";
	string theme = Model.Item?.GetList("Theme")?.SelectedValue != null ? Model.Item.GetList("Theme").SelectedValue.ToLower() : "";
	theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
	theme = theme.Replace("theme", "");

	<!-- Pass attributes on to the image tag -->
	var parms = new Dictionary<string, object>();
	parms.Add("loading", "lazy");
	parms.Add("cssClass", "card-img rounded-0 h-100 w-100");
	parms.Add("alt", "");
}

<div class="card border-0 rounded-0 h-100 theme theme-@theme">
	<div class="position-absolute top-0 bottom-0 end-0 start-0">
		@RenderPartial("Components/Image.cshtml", Model, parms)
	</div>

	@switch (layout)
		{
			case "align-middle-center-text-left-narrow":
			    <div class="card-body py-5 py-md-6">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-start max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-middle-center-text-center-narrow":
			    <div class="card-body py-5 py-md-6">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-center max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-middle-center-text-right-narrow":
			    <div class="card-body py-5 py-md-6">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-end max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;

			case "align-middle-center-text-left":
			    <div class="card-body py-6 py-md-8">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-start max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-middle-center-text-center":
				<div class="card-body py-6 py-md-8">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-center max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-middle-center-text-right":
				<div class="card-body py-6 py-md-8">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-end max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-bottom-center-text-center":
				<div class="card-body pt-6 pt-md-8 pb-4 pb-md-6">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-end h-100">
							<div class="text-center max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-top-center-text-center":
				<div class="card-body pt-4 pt-md-6 pb-6 pb-md-8">
						<div class="position-relative h-100 w-100">
							<div class="d-flex justify-content-center align-items-start h-100">
								<div class="text-center max-w-75ch">
									@RenderTitle()
									@RenderText()
									@RenderButton()
								</div>
							</div>
						</div>
				</div>
			break;
		}
</div>

@helper RenderTitle()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		<h2 class="card-title display-1 mb-3">@Model.Item.GetString("Title")</h2>
	}
}

@helper RenderText()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<p class="card-text lead mb-3">@Model.Item.GetString("Text")</p>
	}
}

@helper RenderButton()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink")) && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		<div>
			<a href="@Model.Item.GetString("ButtonLink")" class="btn btn-primary">@Model.Item.GetString("ButtonLabel")</a>
		</div>
	}
}
