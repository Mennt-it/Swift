@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend


@{
	string layout = Model.Item?.GetList("Layout")?.SelectedValue != null ? Model.Item.GetList("Layout").SelectedValue : "align-middle-center-text-center";
	
	string theme = "";
	if (Model.Item?.GetList("Theme")?.SelectedValue != null) {
		if (Model.Item.GetList("Theme").SelectedValue.ToLower() != "theme default")
		{
			theme = Model.Item.GetList("Theme").SelectedValue.ToLower();
			theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
			theme = theme.Replace("theme", "");
			theme = "theme theme-" + theme;
		}
	}
}

<div class="card border-0 rounded-0 h-100 @theme">
	@RenderImage()
		@switch (layout)
		{
			case "align-middle-center-text-left-narrow":
			    <div class="card-body py-5 py-md-6 h-100">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-start max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-middle-center-text-center-narrow":
			    <div class="card-body py-5 py-md-6 h-100">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-center max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-middle-center-text-right-narrow":
			    <div class="card-body py-5 py-md-6 h-100">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-end max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;

			case "align-middle-center-text-left":
				<div class="card-body min-vh-75 min-vh-md-100">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-start max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-middle-center-text-center":
				<div class="card-body min-vh-75 min-vh-md-100">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-center max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-middle-center-text-right":
				<div class="card-body min-vh-75 min-vh-md-100">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-center h-100">
							<div class="text-end max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-bottom-center-text-center":
				<div class="card-body min-vh-75 min-vh-md-100">
					<div class="position-relative h-100 w-100">
						<div class="d-flex justify-content-center align-items-end h-100">
							<div class="text-center max-w-75ch">
								@RenderTitle()
								@RenderText()
								@RenderButton()
							</div>
						</div>
					</div>
				</div>
			break;
			case "align-top-center-text-center":
				<div class="card-body min-vh-75 min-vh-md-100">
						<div class="position-relative h-100 w-100">
							<div class="d-flex justify-content-center align-items-start h-100">
								<div class="text-center max-w-75ch">
									@RenderTitle()
									@RenderText()
									@RenderButton()
								</div>
							</div>
						</div>
				</div>
			break;
		}
</div>

@helper RenderImage()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
	{
		string imagePath = Model.Item?.GetFile("Image")?.Path ?? "";
		imagePath = "/Admin/Public/GetImage.ashx?width=" + 1920 + "&height=" + 845 + "&image=" + imagePath + "&Format=WebP&Quality=100";

		int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
		int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;
		
		<div class="position-absolute top-0 bottom-0 end-0 start-0">
			<img loading="lazy" src="@imagePath" class="card-img rounded-0 h-100 w-100" style="object-fit: cover; object-position: @(xPos)% @(yPos)%" title="@Model.Item.GetString("Title")" alt="@Model.Item.GetString("Title")" />
		</div>
	}
}

@helper RenderTitle()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		<h2 class="card-title display-1 mb-3">@Model.Item.GetString("Title")</h2>
	}
}

@helper RenderText()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<p class="card-text lead mb-3">@Model.Item.GetString("Text")</p>
	}
}

@helper RenderButton()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink")) && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		<a href="@Model.Item.GetString("ButtonLink")" class="btn btn-primary mt-3">@Model.Item.GetString("ButtonLabel")</a>
	}
}
