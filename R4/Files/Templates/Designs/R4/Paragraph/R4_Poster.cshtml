@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string layout = Model.Item.GetRawValueString("Layout", "align-middle-center-text-center");

	string posterHeight = Model.Item.GetRawValueString("PosterHeight", "min-vh-75 min-vh-md-100);
	posterHeight = posterHeight == "small" ? "min-vh-25 min-vh-md-50" : posterHeight;
	posterHeight = posterHeight == "medium" ? "min-vh-50 min-vh-md-75" : posterHeight;
	posterHeight = posterHeight == "large" ? "min-vh-75 min-vh-md-100" : posterHeight;

	string posterWidth = "container-xl";

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;


	string theme = !string.IsNullOrEmpty(Model.Item.GetRawValueString("Theme")) ? Model.Item.GetRawValueString("Theme").ToLower() : "";
	if (theme != "theme default" && theme != "")
	{
		theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
		theme = theme.Replace("theme", "");
		theme = " theme theme-" + theme;
	}
	else
	{
		theme = "";
	}
}

<div class="position-relative h-100@(theme)">
	@RenderImage()

	@switch (layout)
	{
		case "align-top-left-text-left":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative h-100 w-100 @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-top-center-text-center":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative d-flex flex-column align-items-center text-center @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-top-right-text-right":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative d-flex flex-column text-end justify-content-start align-items-end @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-middle-left-text-left":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative d-flex flex-column text-start justify-content-center align-items-start @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-middle-center-text-center":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative d-flex flex-column text-center justify-content-center align-items-center @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-middle-right-text-right":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative d-flex flex-column text-end justify-content-center align-items-end @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-bottom-left-text-left":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative d-flex flex-column text-start justify-content-end align-items-start @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-bottom-center-text-center":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative d-flex flex-column text-center justify-content-end align-items-center @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-bottom-right-text-right":
			<div class="@(posterWidth) px-3 py-5">
				<div class="position-relative d-flex flex-column text-end justify-content-end align-items-end @(posterHeight)">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
	}
</div>

@helper RenderImage()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
	{

		var parms = new Dictionary<string, object>();
		parms.Add("loading", "lazy");
		parms.Add("cssClass", "card-img rounded-0 h-100 w-100");
		parms.Add("alt", "");

		int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
		int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

		<div class="position-absolute top-0 bottom-0 end-0 start-0">
			@RenderPartial("Components/Image.cshtml", Model, parms)
		</div>
	}
}

@helper RenderTitle()
{

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		string titleFontSize = Model.Item?.GetList("TitleFontSize")?.SelectedValue != null ? Model.Item.GetList("TitleFontSize").SelectedValue : "display-1";

		<h2 class="@titleFontSize mb-3">
			@Model.Item.GetString("Title")
		</h2>
	}
}

@helper RenderText()
{

	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{

		string subtitleFontSize = Model.Item?.GetList("SubtitleFontSize")?.SelectedValue != null ? Model.Item.GetList("SubtitleFontSize").SelectedValue : "fs-5";

		<p class="@subtitleFontSize lead mb-3 max-w-75ch">@Model.Item.GetString("Text")</p>
	}
}

@helper RenderButton()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink")) && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		string buttonStyle = !string.IsNullOrEmpty(Model.Item.GetString("ButtonStyle")) ?
		Model.Item.GetList("ButtonStyle").SelectedValue : "";
		buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;

		<div class="mt-3">
			<a href="@Model.Item.GetString("ButtonLink")" class="btn @buttonStyle ">@Model.Item.GetString("ButtonLabel")</a>
		</div>
	}
}
