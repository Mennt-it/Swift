@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend

@{
	string layout = Model.Item?.GetList("Layout")?.SelectedValue != null ? Model.Item.GetList("Layout").SelectedValue : "align-middle-center-text-center";
	string posterSize = Model.Item?.GetList("PosterSize")?.SelectedValue != null ? Model.Item.GetList("PosterSize").SelectedValue : "min-vh-100";

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;


	string theme = "";
	if (Model.Item?.GetList("Theme")?.SelectedValue != null)
	{
		if (Model.Item.GetList("Theme").SelectedValue.ToLower() != "theme default")
		{
			theme = Model.Item.GetList("Theme").SelectedValue.ToLower();
			theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
			theme = theme.Replace("theme", "");
			theme = "theme theme-" + theme;

		}
	}
}

<div class="card border-0 rounded-0 h-100 @theme">
	@RenderImage()

	@switch (layout)
	{
		case "align-top-left-text-left":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-start justify-content-start align-items-top h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-top-center-text-center":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-center justify-content-start align-items-center h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-top-right-text-right":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-end justify-content-start align-items-end h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-middle-left-text-left":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-start justify-content-center align-items-start h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-middle-center-text-center":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-center justify-content-center align-items-center h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-middle-right-text-right":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-end justify-content-center align-items-end h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-bottom-left-text-left":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-start justify-content-end align-items-start h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-bottom-center-text-center":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-center justify-content-end align-items-center h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-bottom-right-text-right":
			<div class="card-body p-md-5 min-vh-75 min-vh-md-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-end justify-content-end align-items-end h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-middle-left-text-left-narrow":
			<div class="card-body py-5 py-md-6 h-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-start justify-content-center align-items-start h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-middle-center-text-center-narrow":
			<div class="card-body py-5 py-md-6 h-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-center justify-content-center align-items-center h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
		case "align-middle-right-text-right-narrow":
			<div class="card-body py-5 py-md-6 h-100">
				<div class="position-relative h-100 w-100">
					<div class="d-flex flex-column text-end justify-content-center align-items-end h-100">
						@RenderTitle()
						@RenderText()
						@RenderButton()
					</div>
				</div>
			</div>
			break;
	}
</div>

@helper RenderImage()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
	{

	var parms = new Dictionary<string, object>();
	parms.Add("loading", "lazy");
	parms.Add("cssClass", "card-img rounded-0 h-100 w-100");
	parms.Add("alt", "");

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

	<div class="position-absolute top-0 bottom-0 end-0 start-0">
		@RenderPartial("Components/Image.cshtml", Model, parms)
	</div>
	}
}

@helper RenderTitle()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		<h2 class="card-title display-1 mb-3">@Model.Item.GetString("Title")</h2>
	}
}

@helper RenderText() {

	if (!string.IsNullOrEmpty(Model.Item.GetString("Text"))) {

		<p class="card-text lead mb-3 max-w-75ch">@Model.Item.GetString("Text")</p>
	}
}

@helper RenderButton()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("ButtonLink")) && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		<div>
			<a href="@Model.Item.GetString("ButtonLink")" class="btn btn-primary mt-3">@Model.Item.GetString("ButtonLabel")</a>
		</div>
	}
}
