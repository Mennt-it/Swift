@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using System.IO


@{ 
	string paragraphId = Model.ID.ToString();

	string horizontalAlign = !string.IsNullOrEmpty(Model.Item.GetString("HorizontalAlignment")) ? "justify-content-" + Model.Item.GetList("HorizontalAlignment").SelectedValue : "";

	var mainNavigationSettings = new NavigationSettings();
	mainNavigationSettings.StartLevel = 1;
	mainNavigationSettings.StopLevel = 10;
	mainNavigationSettings.ExpandMode = ExpandMode.All;
	mainNavigationSettings.Parameters.Add("NavType", "first-nav");

	if (!string.IsNullOrEmpty(Model.Item.GetString("MainNavigationRoot"))) {
		string root = Model.Item.GetString("MainNavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			mainNavigationSettings.RootPageId = rootPageId;
		}
		mainNavigationSettings.StartLevel = 2;
	} else {
		mainNavigationSettings.StartLevel = 1;
	}


	var secondaryNavigationSettings = new NavigationSettings();
	secondaryNavigationSettings.StartLevel = 1;
	secondaryNavigationSettings.StopLevel = 10;
	secondaryNavigationSettings.ExpandMode = ExpandMode.All;
	secondaryNavigationSettings.Parameters.Add("NavType", "second-nav");

	if (!string.IsNullOrEmpty(Model.Item.GetString("SecondaryNavigationRoot"))) {
		string root = Model.Item.GetString("SecondaryNavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			secondaryNavigationSettings.RootPageId = rootPageId;
		}
	} 


	var utilityNavigationSettings = new NavigationSettings();
	utilityNavigationSettings.StartLevel = 1;
	utilityNavigationSettings.StopLevel = 10;
	utilityNavigationSettings.ExpandMode = ExpandMode.All;

	utilityNavigationSettings.Parameters.Add("TextPosition", "right");
    utilityNavigationSettings.Parameters.Add("HideTexts", true);
    utilityNavigationSettings.Parameters.Add("HideIcons", false); 
    utilityNavigationSettings.Parameters.Add("Size", "normal");

	if (!string.IsNullOrEmpty(Model.Item.GetString("UtilityNavigationRoot"))) {
		string root = Model.Item.GetString("UtilityNavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			utilityNavigationSettings.RootPageId = rootPageId;
		}
	}

	string theme = !string.IsNullOrEmpty(Model.Item.GetString("Theme")) ? Model.Item.GetString("Theme").ToLower() : "";
	if (theme != "theme default" && theme != "")
	{
		theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
		theme = theme.Replace("theme", "");
		theme = " theme theme-" + theme;
	} else {
		theme = "";
	}

	string themeSidebarNavigation = !string.IsNullOrEmpty(Model.Item.GetString("ThemeSidebarNavigation")) ? Model.Item.GetString("ThemeSidebarNavigation").ToLower() : "";
	if (themeSidebarNavigation != "theme default" && themeSidebarNavigation != "")
	{
		themeSidebarNavigation = String.Concat(themeSidebarNavigation.Where(c => !Char.IsWhiteSpace(c)));
		themeSidebarNavigation = themeSidebarNavigation.Replace("theme", "");
		themeSidebarNavigation = " theme theme-" + themeSidebarNavigation;
	} else {
		themeSidebarNavigation = "";
	}
}


<div class="d-flex align-items-center h-100 @(horizontalAlign)@(theme)">

	<button class="btn text-reset" type="button" data-bs-toggle="offcanvas" data-bs-target="#navigation_@(paragraphId)" aria-controls="navigation_@(paragraphId)" aria-label="@Translate("Navigation open button")">
		@RenderMenuIcon()
	</button>

	@*Moving offcanvas to Master for optimal rendering*@
	@SnippetStart("offcanvas")
	<nav class="offcanvas offcanvas-start @themeSidebarNavigation" tabindex="-1" id="navigation_@(paragraphId)" aria-label="@Translate("Navigation")" style="visibility: hidden;">
		<div class="offcanvas-header py-3 px-0">
			
			<button type="button" class="btn text-reset" data-bs-dismiss="offcanvas" aria-label="@Translate("Navigation close button")">
				@RenderStaticIcon("x")
			</button>

			@if (!string.IsNullOrEmpty(Model.Item.GetString("UtilityNavigationRoot"))) {
				<div aria-label="@Translate("Utility navigation")">
					@Navigation.RenderNavigation("Navigation/Horizontal.cshtml", utilityNavigationSettings)
				</div>
			}
		</div>
		<div class="offcanvas-body p-0">

			<div class="offcanvas-navigation text-uppercase" role="navigation">
				@Navigation.RenderNavigation("Navigation/MobileNavigationSlide.cshtml", mainNavigationSettings)

				@if (!string.IsNullOrEmpty(Model.Item.GetString("SecondaryNavigationRoot"))) {
					@Navigation.RenderNavigation("Navigation/MobileNavigationSlide.cshtml", secondaryNavigationSettings)
				}
			</div>
			
		</div>
	</nav>
	@SnippetEnd("offcanvas")

</div>


@helper RenderMenuIcon()
{
	if (Model.Item.GetString("Icon") != null) 
	{
		string imagePath = Model.Item?.GetList("Icon")?.SelectedValue ?? "";

		if (!imagePath.ToLower().Contains("none") && imagePath != "")
		{
			if (Path.GetExtension(imagePath).ToLower() == ".svg")
			{
				imagePath = Dynamicweb.Context.Current.Server.MapPath(imagePath);

				<span class="icon-3 pe-none">
					@if (File.Exists(imagePath)) {
						@System.IO.File.ReadAllText(imagePath)
					}
					else {
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
					}
				</span>
			}
			else
			{
				imagePath = "/Admin/Public/GetImage.ashx?width=" + 24 + "&height=" + 24 + "&image=" + imagePath + "&Format=WebP&Quality=100";

				<picture class="mx-auto d-block pe-none" width="24" height="24">
					<img loading="lazy" src="@imagePath" alt="@Model.Item.GetString("Title")" />
				</picture>
			}
		}
	}
}

@helper RenderStaticIcon(string icon)
{
	string iconPath = "/Files/Icons/" + icon + ".svg";  

	if (!iconPath.ToLower().Contains("none") && iconPath != "")
	{
		iconPath = Dynamicweb.Context.Current.Server.MapPath(iconPath);

		<span class="icon-3 pe-none">
			@if (File.Exists(iconPath)) {
				@System.IO.File.ReadAllText(iconPath)
			}
		</span>
	}	
}
