@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend.Navigation

@{ 
	string paragraphId = Model.ID.ToString();

	string horizontalAlign = !string.IsNullOrEmpty(Model.Item.GetString("HorizontalAlignment")) ? "justify-content-" + Model.Item.GetList("HorizontalAlignment").SelectedValue : "";

	var mainNavigationSettings = new NavigationSettings();
	mainNavigationSettings.StartLevel = 1;
	mainNavigationSettings.StopLevel = 10;
	mainNavigationSettings.ExpandMode = ExpandMode.All;
	mainNavigationSettings.Parameters.Add("NavType", "first-nav");

	if (!string.IsNullOrEmpty(Model.Item.GetString("MainNavigationRoot"))) {
		string root = Model.Item.GetString("MainNavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			mainNavigationSettings.RootPageId = rootPageId;
		}
		mainNavigationSettings.StartLevel = 2;
	} else {
		mainNavigationSettings.StartLevel = 1;
	}


	var secondaryNavigationSettings = new NavigationSettings();
	secondaryNavigationSettings.StartLevel = 1;
	secondaryNavigationSettings.StopLevel = 10;
	secondaryNavigationSettings.ExpandMode = ExpandMode.All;
	secondaryNavigationSettings.Parameters.Add("NavType", "second-nav");

	if (!string.IsNullOrEmpty(Model.Item.GetString("SecondaryNavigationRoot"))) {
		string root = Model.Item.GetString("SecondaryNavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			secondaryNavigationSettings.RootPageId = rootPageId;
		}
	} 


	var utilityNavigationSettings = new NavigationSettings();
	utilityNavigationSettings.StartLevel = 1;
	utilityNavigationSettings.StopLevel = 10;
	utilityNavigationSettings.ExpandMode = ExpandMode.All;

	if (!string.IsNullOrEmpty(Model.Item.GetString("UtilityNavigationRoot"))) {
		string root = Model.Item.GetString("UtilityNavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			utilityNavigationSettings.RootPageId = rootPageId;
		}
	}

	string theme = "";
	if (Model.Item?.GetList("Theme")?.SelectedValue != null) {
		if (Model.Item.GetList("Theme").SelectedValue.ToLower() != "theme default")
		{
			theme = Model.Item.GetList("Theme").SelectedValue.ToLower();
			theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
			theme = theme.Replace("theme", "");
			theme = "theme theme-" + theme;
		}
	}
}


<div class="item d-flex align-items-center @horizontalAlign @theme h-100">

	<button class="btn text-reset" type="button" data-bs-toggle="offcanvas" data-bs-target="#navigation_@(paragraphId)" aria-controls="navigation_@(paragraphId)" aria-label="@Translate("Navigation open button")">
		<svg class="pe-none" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
	</button>

	@*Moving offcanvas to Master for optimal rendering*@
	@SnippetStart("offcanvas")
	<nav class="offcanvas offcanvas-start" tabindex="-1" id="navigation_@(paragraphId)" aria-label="@Translate("Navigation")">
		<div class="offcanvas-header border-bottom py-3 px-0">
			
			<button type="button" class="btn text-reset" data-bs-dismiss="offcanvas" aria-label="@Translate("Navigation close button")">
				<svg class="pe-none" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
			</button>

			@if (!string.IsNullOrEmpty(Model.Item.GetString("UtilityNavigationRoot"))) {
				<div aria-label="@Translate("Utility navigation")">
					@Navigation.RenderNavigation("Navigation/MobileUtilityNavigation.cshtml", utilityNavigationSettings)
				</div>
			}
		</div>
		<div class="offcanvas-body p-0 border-top">

			<div class="offcanvas-navigation text-uppercase">
				@Navigation.RenderNavigation("Navigation/MobileNavigationSlide.cshtml", mainNavigationSettings)

				@if (!string.IsNullOrEmpty(Model.Item.GetString("SecondaryNavigationRoot"))) {
					@Navigation.RenderNavigation("Navigation/MobileNavigationSlide.cshtml", secondaryNavigationSettings)
				}
			</div>
			
		</div>
	</nav>
	@SnippetEnd("offcanvas")

</div>
