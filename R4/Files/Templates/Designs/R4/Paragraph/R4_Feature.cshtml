@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@using System.IO
@using System.Web

@{
	string layout = Model.Item?.GetList("Layout")?.SelectedValue != null ? Model.Item.GetList("Layout").SelectedValue : "icon-top";
	string contentPadding = Model.Item?.GetList("contentPadding")?.SelectedValue != null ? Model.Item.GetList("contentPadding").SelectedValue : "";


	string theme = !string.IsNullOrEmpty(Model.Item.GetString("Theme")) ? Model.Item.GetString("Theme").ToLower() : "";
	if (theme != "theme default" && theme != "")
	{
		theme = String.Concat(theme.Where(c => !Char.IsWhiteSpace(c)));
		theme = theme.Replace("theme", "");
		theme = " theme theme-" + theme;
	} else {
		theme = "";
	}
}

<div class="h-100@(theme)">
	@switch (layout)
	{
		case "icon-top":
			<div class="d-flex flex-column align-items-center h-100 overflow-hidden text-center @contentPadding">

				@if (!string.IsNullOrEmpty(Model.Item.GetString("Icon")))
				{
					string imagePath = Model.Item?.GetList("Icon")?.SelectedValue ?? "";
					if (!imagePath.ToLower().Contains("none") && imagePath != "")
					{
						<div class="mb-3">
							@RenderIcon()
						</div>
					}
				}

				<div class="d-flex flex-column w-100 h-100">
					@RenderTitle()
					@RenderBody()
				</div>

			</div>
			break;
		case "icon-left":
			<div class="d-flex flex-row h-100 overflow-hidden text-start @contentPadding">
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Icon")))
				{
					string imagePath = Model.Item?.GetList("Icon")?.SelectedValue ?? "";
					if (!imagePath.ToLower().Contains("none") && imagePath != "")
					{
						<div class="me-3">
							@RenderIcon()
						</div>
					}
				}
				<div class="d-flex flex-column w-100 h-100">
					@RenderTitle()
					@RenderBody()
				</div>
			</div>
			break;
		case "icon-right":
			<div class="d-flex flex-row h-100 overflow-hidden text-end @contentPadding">
				<div class="d-flex flex-column w-100 h-100">
					@RenderTitle()
					@RenderBody()
				</div>

				@if (!string.IsNullOrEmpty(Model.Item.GetString("Icon")))
				{
					string imagePath = Model.Item?.GetList("Icon")?.SelectedValue ?? "";
					if (!imagePath.ToLower().Contains("none") && imagePath != "")
					{
						<div class="ms-3">
							@RenderIcon()
						</div>
					}
				}
				</div>
		break;
	}
</div>


@helper RenderIcon()
{
	if (Model.Item.GetString("Icon") != null) 
	{
		string imagePath = Model.Item?.GetList("Icon")?.SelectedValue ?? "";

		if (!imagePath.ToLower().Contains("none") && imagePath != "")
		{
			if (Path.GetExtension(imagePath).ToLower() == ".svg")
			{
				imagePath = HttpContext.Current.Server.MapPath(imagePath);

				if (File.Exists(imagePath)) {
					<div class="icon-4">
						@System.IO.File.ReadAllText(imagePath)
					</div>
				}
			}
			else
			{
				imagePath = "/Admin/Public/GetImage.ashx?width=" + 32 + "&height=" + 32 + "&image=" + imagePath + "&Format=WebP&Quality=100";

				<picture class="mb-2 mx-auto d-block" width="32" height="32">
					<img loading="lazy" src="@imagePath" title="@Model.Item.GetString("Title")" />
				</picture>
			}
		}
	}
}

@helper RenderTitle()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		<h4>@Model.Item.GetString("Title")</h4>
	}
}

@helper RenderBody()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<p class="m-0">@Model.Item.GetString("Text")</p>
	}
}
