@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@using System.IO
@using System.Web

@{
    string layout = Model.Item?.GetList("Layout")?.SelectedValue != "" ? Model.Item.GetList("Layout").SelectedValue : "icon-top";
}

@switch (layout)
{
    case "icon-top":
        <div class="feature-block-icon-top d-flex flex-column justify-content-center align-items-center h-100 overflow-hidden p-4 position-relative text-center">

            <div class="feature-block-icon" style="height: 3rem; width: 3rem;">
                @RenderIcon()
            </div>

            <div class="mt-3">
                @RenderTitle()
            </div>

            <div class="mt-3">
                @RenderBody()
            </div>

        </div>
        break;
    case "icon-left":
        <div class="feature-block-icon-left d-flex h-100 overflow-hidden p-4 text-start">

            <div class="feature-block-icon me-4" style="flex: 0 0 2rem;">
                @RenderIcon()
            </div>

            <div class="flex-fill">
				@RenderTitle()

				<div class="mt-3">
					@RenderBody()
				</div>
            </div>

        </div>
        break;
    case "icon-right":
        <div class="feature-block-icon-right d-flex h-100 overflow-hidden p-4 text-end">

            <div class="flex-fill">
				@RenderTitle()

				<div class="mt-3">
					@RenderBody()
				</div>
            </div>

            <div class="feature-block-icon ms-4" style="flex: 0 0 2rem;">
                @RenderIcon()
            </div>

        </div>
        break;
    case "icon-background":
        <div class="feature-block-icon-background d-flex flex-column justify-content-center align-items-center h-100 overflow-hidden p-4 position-relative text-center">

            <div class="feature-block-icon position-absolute" style="--icon-offset: -2rem; top: var(--icon-offset); right: var(--icon-offset); bottom: var(--icon-offset); left: var(--icon-offset); opacity: 0.05; z-index: -1;">
                @RenderIcon()
            </div>

            <div>
                @RenderTitle()
            </div>

            <div class="mt-3">
                @RenderBody()
            </div>

        </div>
        break;
}

@helper RenderIcon() {
    if (Model.Item.GetString("Icon") != null)
    {
        string imagePath = Model.Item?.GetList("Icon")?.SelectedValue ?? "";

        if (Path.GetExtension(imagePath).ToLower() == ".svg")
        {
			@System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath(imagePath))
        }
        else
        {
            imagePath = "/Admin/Public/GetImage.ashx?width=" + 26 + "&height=" + 26 + "&image=" + imagePath + "&Format=WebP&Quality=100";

			<picture class="mb-2 mx-auto d-block" width="26" height="26">
				<img loading="lazy" src="@imagePath" title="@Model.Item.GetString("Title")" />
			</picture>
        }
    }
}

@helper RenderTitle() {
	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		<h4 class="h4 m-0">@Model.Item.GetString("Title")</h4>
    }
}

@helper RenderBody() {
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
    {
		<p class="m-0">@Model.Item.GetString("Text")</p>
    }
}
