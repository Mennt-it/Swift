@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using System.IO


@{
	string layout = Model.Item.GetRawValueString("Layout", "icon-top");
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

<div class="h-100@(theme)">
	@switch (layout)
	{
		case "icon-top":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Link")))
			{
				@:<a href="@Model.Item.GetString("Link")" class="text-decoration-none text-reset">
			}

			<div class="d-flex flex-column align-items-center h-100 text-center position-relative @contentPadding">

				@if (!string.IsNullOrEmpty(Model.Item.GetString("Icon")))
				{
					string imagePath = Model.Item.GetRawValueString("Icon", "");
					if (!imagePath.ToLower().Contains("none") && imagePath != "")
					{
						<div class="">
							@RenderIcon()
						</div>
					}
				}

				@if (
					!string.IsNullOrEmpty(Model.Item.GetString("Title")) && 
					!Model.Item.GetBoolean("HideTitle") || 
					!string.IsNullOrEmpty(Model.Item.GetString("Text"))
					)
				{
				<div class="mt-3 d-flex flex-column w-100 h-100">
					@RenderTitle()
					@RenderBody()
				</div>
				}

			</div>

			if (!string.IsNullOrEmpty(Model.Item.GetString("Link")))
			{
				@:</a>
			}
			break;
		case "icon-left":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Link")))
			{
				@:<a href="@Model.Item.GetString("Link")" class="text-decoration-none text-reset">
			}

			<div class="d-flex flex-row h-100 text-start position-relative @contentPadding">


				@if (!string.IsNullOrEmpty(Model.Item.GetString("Icon")))
				{
					string imagePath = Model.Item.GetRawValueString("Icon", "");
					if (!imagePath.ToLower().Contains("none") && imagePath != "")
					{
						<div class="me-3">
							@RenderIcon()
						</div>
					}
				}

				@if (
					!string.IsNullOrEmpty(Model.Item.GetString("Title")) && 
					!Model.Item.GetBoolean("HideTitle") || 
					!string.IsNullOrEmpty(Model.Item.GetString("Text"))
					)
				{
				<div class="d-flex flex-column w-100 h-100">
					@RenderTitle()
					@RenderBody()
				</div>
				}

			</div>

			if (!string.IsNullOrEmpty(Model.Item.GetString("Link")))
			{
				@:</a>
			}
			break;
		case "icon-right":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Link")))
			{
				@:<a href="@Model.Item.GetString("Link")" class="text-decoration-none text-reset">
			}

			<div class="d-flex flex-row h-100 text-end position-relative @contentPadding">
				<div class="d-flex flex-column w-100 h-100">
					@RenderTitle()
					@RenderBody()
				</div>

				@if (!string.IsNullOrEmpty(Model.Item.GetString("Icon")))
				{
					string imagePath = Model.Item.GetRawValueString("Icon", "");
					if (!imagePath.ToLower().Contains("none") && imagePath != "")
					{
						<div class="ms-3">
							@RenderIcon()
						</div>
					}
				}
			</div>
			if (!string.IsNullOrEmpty(Model.Item.GetString("Link")))
			{
				@:</a>
			}
		break;
	}
</div>


@helper RenderIcon()
{
	if (Model.Item.GetString("Icon") != null) 
	{
		string imagePath = Model.Item.GetRawValueString("Icon", "");

		if (!imagePath.ToLower().Contains("none") && imagePath != "")
		{
			if (Path.GetExtension(imagePath).ToLower() == ".svg")
			{
				<div class="icon-4">
					@ReadFile(imagePath)
				</div>
			}
			else
			{
				imagePath = "/Admin/Public/GetImage.ashx?width=" + 32 + "&height=" + 32 + "&image=" + imagePath + "&Format=WebP&Quality=100";

				<picture class="mb-2 mx-auto d-block" width="32" height="32">
					<img loading="lazy" src="@imagePath" title="@Model.Item.GetString("Title")" />
				</picture>
			}
		}
	}
}

@helper RenderTitle()
{
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h4");

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		<h4 class="@titleFontSize">@Model.Item.GetString("Title")</h4>
	}
}

@helper RenderBody()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<p class="m-0">@Model.Item.GetString("Text")</p>
	}
}
