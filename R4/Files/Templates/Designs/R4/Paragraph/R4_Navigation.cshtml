@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation

@{ string Alignment = !string.IsNullOrEmpty(Model.Item.GetString("alignment")) ? "text-" + Model.Item.GetList("alignment").SelectedValue : "start";

	string Layout = !string.IsNullOrEmpty(Model.Item.GetString("Layout")) ? Model.Item.GetList("Layout").SelectedValue : "linksOnly";

	string LinkOrientation = !string.IsNullOrEmpty(Model.Item.GetString("LinkOrientation")) ? Model.Item.GetList("LinkOrientation").SelectedValue : "";
	LinkOrientation = LinkOrientation == "horizontal" ? "flex-row" : LinkOrientation;
	LinkOrientation = LinkOrientation == "vertical" ? "flex-column" : LinkOrientation;

	string linkFontWeight = !string.IsNullOrEmpty(Model.Item.GetString("LinkFontWeight")) ? Model.Item.GetList("LinkFontWeight").SelectedValue : "";
	linkFontWeight = linkFontWeight == "light" ? "fw-light" : linkFontWeight;
	linkFontWeight = linkFontWeight == "normal" ? "fw-normal" : linkFontWeight;
	linkFontWeight = linkFontWeight == "bold" ? "fw-bold" : linkFontWeight;

	string linkCasing = !string.IsNullOrEmpty(Model.Item.GetString("LinkCasing")) ? Model.Item.GetList("LinkCasing").SelectedValue : "";
	linkCasing = linkCasing == "regular" ? "" : linkCasing;
	linkCasing = linkCasing == "uppercase" ? "text-uppercase" : linkCasing;
	linkCasing = linkCasing == "lowercase" ? "text-lowercase" : linkCasing;

	string linkFontSize = !string.IsNullOrEmpty(Model.Item.GetString("LinkFontSize")) ? Model.Item.GetList("LinkFontSize").SelectedValue : "";
	linkFontSize = linkFontSize == "small" ? "fs-7" : linkFontSize;
	linkFontSize = linkFontSize == "regular" ? "fs-6" : linkFontSize;
	linkFontSize = linkFontSize == "large" ? "fs-5" : linkFontSize;

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 1;
	navigationSettings.StopLevel = 10;
	navigationSettings.ExpandMode = ExpandMode.All;

	navigationSettings.Parameters.Add("ContentPadding", Model.Item?.GetList("ContentPadding")?.SelectedValue ?? "");
	navigationSettings.Parameters.Add("hoverTheme", Model.Item?.GetList("hoverTheme")?.SelectedValue ?? "");
	navigationSettings.Parameters.Add("Layout", Model.Item?.GetList("Layout")?.SelectedValue ?? "");

	if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot")))
	{
		string root = Model.Item.GetString("NavigationRoot");

		if (root.Contains("="))
		{
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			navigationSettings.RootPageId = rootPageId;
		}
	}
}

<nav class="nav mx-lg-n3 @(LinkOrientation) @(linkCasing) @(linkFontWeight) @(linkFontSize) @(Alignment)">
	@Navigation.RenderNavigation("Navigation/Navigation.cshtml", navigationSettings)
</nav>
