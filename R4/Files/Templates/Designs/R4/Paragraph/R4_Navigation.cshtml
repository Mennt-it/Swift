@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation

@{ string alignment = !string.IsNullOrEmpty(Model.Item.GetString("alignment")) ? "justify-content-" + Model.Item.GetList("alignment").SelectedValue : "justify-content-start";

	string layout = !string.IsNullOrEmpty(Model.Item.GetString("Layout")) ? Model.Item.GetList("Layout").SelectedValue : "linksOnly";

	string linkOrientation = !string.IsNullOrEmpty(Model.Item.GetString("LinkOrientation")) ? Model.Item.GetList("LinkOrientation").SelectedValue : "flex-row";
	linkOrientation = linkOrientation == "horizontal" ? "flex-row" : linkOrientation;
	linkOrientation = linkOrientation == "vertical" ? "flex-column" : linkOrientation;

	string linkFontWeight = !string.IsNullOrEmpty(Model.Item.GetString("LinkFontWeight")) ? Model.Item.GetList("LinkFontWeight").SelectedValue : "fw-normal";
	linkFontWeight = linkFontWeight == "light" ? "fw-light" : linkFontWeight;
	linkFontWeight = linkFontWeight == "normal" ? "fw-normal" : linkFontWeight;
	linkFontWeight = linkFontWeight == "bold" ? "fw-bold" : linkFontWeight;

	string linkCasing = !string.IsNullOrEmpty(Model.Item.GetString("LinkCasing")) ? Model.Item.GetList("LinkCasing").SelectedValue : "";
	linkCasing = linkCasing == "regular" ? "text-capitalize" : linkCasing;
	linkCasing = linkCasing == "uppercase" ? "text-uppercase" : linkCasing;
	linkCasing = linkCasing == "lowercase" ? "text-lowercase" : linkCasing;

	string linkFontSize = !string.IsNullOrEmpty(Model.Item.GetString("LinkFontSize")) ? Model.Item.GetList("LinkFontSize").SelectedValue : "fs-6";
	linkFontSize = linkFontSize == "small" ? "fs-7" : linkFontSize;
	linkFontSize = linkFontSize == "regular" ? "fs-6" : linkFontSize;
	linkFontSize = linkFontSize == "large" ? "fs-5" : linkFontSize;

	string contentPadding = !string.IsNullOrEmpty(Model.Item.GetString("ContentPadding")) ? Model.Item.GetList("ContentPadding").SelectedValue : "px-3 py-2";
	contentPadding = contentPadding == "none" ? "px-3 py-2" : contentPadding;
	contentPadding = contentPadding == "small" ? "px-2 py-1" : contentPadding;
	contentPadding = contentPadding == "large" ? "px-4 py-3" : contentPadding;

	string negativMargin = "mx-lg-n3";

	if (contentPadding == "px-3 py-2")
	{
		negativMargin = "mx-lg-n3";
	}
	if (contentPadding == "px-2 py-1")
	{
		negativMargin = "mx-lg-n2";
	}
	if (contentPadding == "px-4 py-3")
	{
		negativMargin = "mx-lg-n4";
	}

	string hoverTheme = !string.IsNullOrEmpty(Model.Item.GetString("HoverTheme")) ? Model.Item.GetString("HoverTheme").ToLower() : "";
	if (hoverTheme != "theme default" && hoverTheme != "")
	{
		hoverTheme = String.Concat(hoverTheme.Where(c => !Char.IsWhiteSpace(c)));
		hoverTheme = hoverTheme.Replace("theme", "");
		hoverTheme = "theme-hover theme-" + hoverTheme;
	} else {
		hoverTheme = "";
	}

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 1;
	navigationSettings.StopLevel = 10;
	navigationSettings.ExpandMode = ExpandMode.All;

	navigationSettings.Parameters.Add("ContentPadding", contentPadding);
	navigationSettings.Parameters.Add("Layout", layout);
	navigationSettings.Parameters.Add("LinkFontSize", linkFontSize);
	navigationSettings.Parameters.Add("HoverTheme", hoverTheme);

	if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot")))
	{
		string root = Model.Item.GetString("NavigationRoot");

		if (root.Contains("="))
		{
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			navigationSettings.RootPageId = rootPageId;
		}
	}
}

<nav class="nav @negativMargin @(linkOrientation) @(linkCasing) @(linkFontWeight) @(linkFontSize) @(alignment)">
	@Navigation.RenderNavigation("Navigation/Navigation.cshtml", navigationSettings)
</nav>
