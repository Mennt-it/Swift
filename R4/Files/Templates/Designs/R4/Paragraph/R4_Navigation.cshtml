@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation

@{ string navAlignment = !string.IsNullOrEmpty(Model.Item.GetString("navAlignment")) ? Model.Item.GetList("navAlignment").SelectedValue : "justify-content-start";
	navAlignment = navAlignment == "start" ? "start" : navAlignment;
	navAlignment = navAlignment == "center" ? "center" : navAlignment;
	navAlignment = navAlignment == "end" ? "end" : navAlignment;

	string navOrientation = !string.IsNullOrEmpty(Model.Item.GetString("navOrientation")) ? Model.Item.GetList("navOrientation").SelectedValue : "flex-row";
	navOrientation = navOrientation == "horizontal" ? "flex-row" : navOrientation;
	navOrientation = navOrientation == "vertical" ? "flex-column" : navOrientation;

	if (navOrientation == "flex-row")
	{
		if (navAlignment == "start")
		{
			navAlignment = "justify-content-start";
		}
		if (navAlignment == "center")
		{
			navAlignment = "justify-content-center";
		}
		if (navAlignment == "end")
		{
			navAlignment = "justify-content-end";
		}
	}
	if (navOrientation == "flex-column")
	{
		if (navAlignment == "start")
		{
			navAlignment = "align-items-start";
		}
		if (navAlignment == "center")
		{
			navAlignment = "align-items-center";
		}
		if (navAlignment == "end")
		{
			navAlignment = "align-items-end";
		}
	}

	string layout = !string.IsNullOrEmpty(Model.Item.GetString("Layout")) ? Model.Item.GetList("Layout").SelectedValue : "linksOnly";

	string linkFontWeight = !string.IsNullOrEmpty(Model.Item.GetString("LinkFontWeight")) ? Model.Item.GetList("LinkFontWeight").SelectedValue : "fw-normal";
	linkFontWeight = linkFontWeight == "light" ? "fw-light" : linkFontWeight;
	linkFontWeight = linkFontWeight == "normal" ? "fw-normal" : linkFontWeight;
	linkFontWeight = linkFontWeight == "bold" ? "fw-bold" : linkFontWeight;

	string navTitleFontWeight = !string.IsNullOrEmpty(Model.Item.GetString("navTitleFontWeight")) ? Model.Item.GetList("navTitleFontWeight").SelectedValue : "fw-bold";
	navTitleFontWeight = navTitleFontWeight == "light" ? "fw-light" : navTitleFontWeight;
	navTitleFontWeight = navTitleFontWeight == "normal" ? "fw-normal" : navTitleFontWeight;
	navTitleFontWeight = navTitleFontWeight == "bold" ? "fw-bold" : navTitleFontWeight;

	string NavTitleCasing = !string.IsNullOrEmpty(Model.Item.GetString("NavTitleCasing")) ? Model.Item.GetList("NavTitleCasing").SelectedValue : "";
	NavTitleCasing = NavTitleCasing == "regular" ? "" : NavTitleCasing;
	NavTitleCasing = NavTitleCasing == "uppercase" ? "text-uppercase" : NavTitleCasing;
	NavTitleCasing = NavTitleCasing == "lowercase" ? "text-lowercase" : NavTitleCasing;

	string linkCasing = !string.IsNullOrEmpty(Model.Item.GetString("LinkCasing")) ? Model.Item.GetList("LinkCasing").SelectedValue : "";
	linkCasing = linkCasing == "regular" ? "" : linkCasing;
	linkCasing = linkCasing == "uppercase" ? "text-uppercase" : linkCasing;
	linkCasing = linkCasing == "lowercase" ? "text-lowercase" : linkCasing;

	string linkFontSize = !string.IsNullOrEmpty(Model.Item.GetString("LinkFontSize")) ? Model.Item.GetList("LinkFontSize").SelectedValue : "fs-6";
	linkFontSize = linkFontSize == "small" ? "fs-7" : linkFontSize;
	linkFontSize = linkFontSize == "regular" ? "fs-6" : linkFontSize;
	linkFontSize = linkFontSize == "large" ? "fs-5" : linkFontSize;

	string navTitleFontSize = !string.IsNullOrEmpty(Model.Item.GetString("NavTitleFontSize")) ? Model.Item.GetList("NavTitleFontSize").SelectedValue : "h6";
	navTitleFontSize = navTitleFontSize == "regular" ? "h6" : navTitleFontSize;
	navTitleFontSize = navTitleFontSize == "large" ? "h4" : navTitleFontSize;

	string contentPadding = !string.IsNullOrEmpty(Model.Item.GetString("ContentPadding")) ? Model.Item.GetList("ContentPadding").SelectedValue : "px-3 py-2";
	contentPadding = contentPadding == "none" ? "px-3 py-2" : contentPadding;
	contentPadding = contentPadding == "small" ? "px-2 py-1" : contentPadding;
	contentPadding = contentPadding == "large" ? "px-4 py-3" : contentPadding;

	string negativMargin = "mx-lg-n3";

	if (contentPadding == "px-3 py-2")
	{
		negativMargin = "mx-lg-n3";
	}
	if (contentPadding == "px-2 py-1")
	{
		negativMargin = "mx-lg-n2";
	}
	if (contentPadding == "px-4 py-3")
	{
		negativMargin = "mx-lg-n4";
	}

	string hoverTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("HoverTheme")) ? " theme " + Model.Item.GetRawValueString("HoverTheme").Replace(" ", "").Trim().ToLower() : "";

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 1;
	navigationSettings.StopLevel = 10;
	navigationSettings.ExpandMode = ExpandMode.All;

	navigationSettings.Parameters.Add("ContentPadding", contentPadding);
	navigationSettings.Parameters.Add("Layout", layout);
	navigationSettings.Parameters.Add("LinkFontSize", linkFontSize);
	navigationSettings.Parameters.Add("HoverTheme", hoverTheme);

	if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot")))
	{
		string root = Model.Item.GetString("NavigationRoot");

		if (root.Contains("="))
		{
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			navigationSettings.RootPageId = rootPageId;
		}
	}
}

@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
{
	<div class="d-flex @(negativMargin) @(navOrientation) @(navAlignment) @(contentPadding)">
		<h3 class="@(navTitleFontSize) @(navTitleFontWeight) @(NavTitleCasing)">@Model.Item.GetString("Title")</h3>
	</div>
}

<nav class="nav flex-nowrap @(negativMargin) @(navOrientation) @(linkFontWeight) @(linkFontSize) @(navAlignment) @(linkCasing)">
	@Navigation.RenderNavigation("Navigation/Navigation.cshtml", navigationSettings)
</nav>
