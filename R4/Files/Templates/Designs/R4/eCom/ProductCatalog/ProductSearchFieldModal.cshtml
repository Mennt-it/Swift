@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using System.Web
@inherits ViewModelTemplate<ProductListViewModel>

@{
    string searchResultsPageId = !string.IsNullOrEmpty(Pageview.AreaSettings.GetString("ProductSearchResults")) ? Pageview.AreaSettings.GetString("ProductSearchResults") : "";

    string searchTerm = string.Empty;
    List<string> searchHistory = new List<string>();
    if (HttpContext.Current.Session["_searchHistory"] != null)
    {
        searchHistory = (List<string>)HttpContext.Current.Session["_searchHistory"];
    }
    if (!string.IsNullOrEmpty(Dynamicweb.Context.Current.Request["q"]))
    {
        searchTerm = Dynamicweb.Context.Current.Request["q"];

        if (searchHistory.Contains(searchTerm))
        {
            searchHistory.Remove(searchTerm);
        }
        searchHistory.Add(searchTerm);
        HttpContext.Current.Session.Add("_searchHistory", searchHistory);
    }
    string groupIdQueryParameter = string.Empty;
    if (!string.IsNullOrEmpty(Dynamicweb.Context.Current.Request["GroupID"]))
    {
        groupIdQueryParameter = "&GroupID=" + Dynamicweb.Context.Current.Request["GroupID"].Trim();
    }

    string currentPageLink = "Default.aspx?ID=" + searchResultsPageId + groupIdQueryParameter;

    GroupInfoViewModel productgroup = null;
    if (!string.IsNullOrEmpty(searchTerm) && Model.Products != null && Model.Products.Any())
    {
        //See if the first group of the first product happens to share name of the search term and redirect to that group
        productgroup = Model.Products.FirstOrDefault().Groups.FirstOrDefault();
        if (productgroup != null && productgroup.Name.Equals(searchTerm, StringComparison.OrdinalIgnoreCase))
        {
            string grouplink = "/Default.aspx?ID=" + searchResultsPageId + "&GroupID=" + productgroup.Id;
            //HttpContext.Current.Response.Redirect(grouplink);
        }
    }
}

<div id="asyncFetchPlaceholder" class="float-end">

	<script>
        var tabIndex = -1;
        var tabIndexOld = 0;
        function suggest(e, searchField) {
            if (e.key === "ArrowUp" || e.key === "ArrowDown") {
                //handle dropdown navigation if present
                if (document.getElementById("typeAheadMenu").classList.contains("show")) {
                    handleArrowNavigation(e.key);
                    return;
                }
            }

            if (e.key === "Escape") {
                //Revert back to the original value last entered in the input field
                document.getElementById("typeAhead").value = document.getElementById("typeAhead").getAttribute("data-original");
                hidedd();
                return;
            }

            if (e.key === "Tab") {
                return;
            }

            tabIndex = -1;
            if (searchField.value.length > 0) {
                var val = searchField.value;
                document.getElementById("typeAhead").setAttribute("data-original", val)
                debounce(() => getSuggestions(val), 100)();
            } else {
                hidedd();
            }
        }

        function handleTab(e) {
            if (e.key === "Tab") {
                //keep selection from dropdown navigation but do not submit search
                e.preventDefault();
                hidedd();
                return;
            }
        }

        function handleArrowNavigation(key) {
            var elements = document.getElementById("typeAheadMenu").getElementsByClassName("dropdown-item");
            if (!elements || elements.length < 1) {
                return;
            }
            if (key === "ArrowUp") {
                tabIndex--;
            } else {
                tabIndex++;
            }

            if (tabIndex < 0 || tabIndex > elements.length - 1) {
                tabIndex = 0;
            }

            document.getElementById("typeAheadMenu").setAttribute("data-tabindex", tabIndex);
            if (tabIndex > -1) {
                elements[tabIndex].classList.add("focus");
                var suggestionElement = elements[tabIndex];

                preSelectSuggestion(suggestionElement);

                if (tabIndexOld != tabIndex && elements[tabIndexOld]) {
                    elements[tabIndexOld].classList.remove("focus");
                }
                tabIndexOld = tabIndex;
            }
        }

        async function getSuggestions(inputValue) {
            var searchUrl = "/Default.aspx?ID=" + @Pageview.AreaSettings.GetString("ProductSearchResults") + "&feed=true&redirect=false&eq=" + encodeURIComponent(inputValue.toLowerCase());
            let response = await fetch(searchUrl);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
                alert(response.status + '\n' + responseText);
            } else {
                let html = await response.text().then(function (text) {
                    return text;
                });

                displaySuggestions(html);
            }
        }

        function displaySuggestions(data) {
            if (data.length > 5) {
                document.getElementById("typeAheadMenu").innerHTML = data;
                showdd();
            }
        }

        function selectSuggestion_(inputValue) {
            document.getElementById("typeAhead").value = inputValue;
            document.getElementById("suggestForm").submit();
        }

        function preSelectSuggestion(elm) {
            var suggestionElement = elm.getElementsByClassName("js-suggestion")[0];
            document.getElementById("typeAhead").value = suggestionElement.innerText;

            var parm = document.getElementById("typeAheadParameter");
            if (elm.getAttribute("data-param") && elm.getAttribute("data-paramvalue")) {
                parm.setAttribute("name", elm.getAttribute("data-param"));
                parm.setAttribute("value", elm.getAttribute("data-paramvalue"));
            } else {
                parm.removeAttribute("name");
                parm.removeAttribute("value");

            }
        }

        function selectSuggestion(elm) {
            preSelectSuggestion(elm);
            document.getElementById("suggestForm").submit();
        }

        function showdd() {
            document.getElementById("typeAheadMenu").classList.add("show");
            document.getElementById("typeAheadDropwdown").classList.add("show");
        }
        function hidedd() {
            document.getElementById("typeAheadMenu").classList.remove("show");
            document.getElementById("typeAheadDropwdown").classList.remove("show");
        }

        var timeout;
        function debounce(func, wait, immediate) {
            return function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

	</script>
	<!-- Button trigger modal -->
	<a data-bs-toggle="modal" data-bs-target="#searchModal">
		<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
			<path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
		</svg>
    </a>

	<!-- Modal -->
	<div class="modal fade" id="searchModal" tabindex="-1" data-bs-backdrop="false" style="z-index:9999;" >
		<div class="modal-dialog modal-fullscreen">
			<div class="modal-content">
				<div class="modal-header justify-content-between">
					<h5 class="modal-title">@Translate("Search")</h5>
					<a data-bs-dismiss="modal" aria-label="Close">
						<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
							<path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
						</svg>
					</a>
				</div>
				<div class="modal-body" id="typeAheadDropwdown">
					<form method="get" action="@Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(searchResultsPageId)" id="suggestForm">
						<input type="hidden" id="typeAheadParameter" />
						<input class="input isFocus form-control" id="typeAhead" type="search" placeholder="@Translate("Search here...")" autocomplete="off" maxlength="255" name="q" tabindex="1" value="@searchTerm" data-original="@searchTerm">
					</form>
					<div class="w-100 rounded-0" id="typeAheadMenu"></div>
				</div>
			</div>
		</div>
	</div>
    
	<script>
		document.body.addEventListener('click', hidedd);
		document.getElementById("typeAhead").addEventListener('focus', showdd);
		document.getElementById("typeAhead").addEventListener('keyup', (e) => suggest(e, document.getElementById("typeAhead")))
		document.getElementById("typeAhead").addEventListener('keydown', (e) => handleTab(e))
	</script>

	<script>
		function goToPage(aTag) {
			var pageTitle = aTag.getAttribute("title");
			navigateToPage(aTag.href);
			history.pushState(null, pageTitle, aTag.href);
			if (pageTitle != null) {
				document.title = pageTitle;
			}
			return false;
		}

		async function navigateToPage(href) {
			var fetchHref = href;
			if (href.indexOf("?") > 0) {
				fetchHref += "&feed=true"
			} else {
				fetchHref += "?feed=true"
			}
			let response = await fetch(fetchHref);

			if (!response.ok) {
				throw new Error('HTTP error! status: ${response.status}');
			} else {
				let html = await response.text().then(function (text) {
					return text;
				});

				document.getElementById("asyncFetchPlaceholder").outerHTML = html;
			}
			window.scrollTo(0, 0);
		}

		window.onpopstate = function (event) {
			alert("location: " + document.location.href + ", title: " + document.title + ", state: " + JSON.stringify(event.state));
			navigateToPage(document.location.href);
			//document.title = event.state.prevTitle;
		}
	</script>
</div>
