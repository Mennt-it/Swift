@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using System.Web
@inherits ViewModelTemplate<ProductListViewModel>

@{
    string searchResultsPageId = !string.IsNullOrEmpty(Pageview.AreaSettings.GetString("ProductSearchResults")) ? Pageview.AreaSettings.GetString("ProductSearchResults") : "";

    string searchTerm = string.Empty;
    List<string> searchHistory = new List<string>();
    if (HttpContext.Current.Session["_searchHistory"] != null)
    {
        searchHistory = (List<string>)HttpContext.Current.Session["_searchHistory"];
    }
    if (!string.IsNullOrEmpty(Dynamicweb.Context.Current.Request["q"]))
    {
        searchTerm = Dynamicweb.Context.Current.Request["q"];

        if (searchHistory.Contains(searchTerm))
        {
            searchHistory.Remove(searchTerm);
        }
        searchHistory.Add(searchTerm);
        HttpContext.Current.Session.Add("_searchHistory", searchHistory);
    }
    string groupIdQueryParameter = string.Empty;
    if (!string.IsNullOrEmpty(Dynamicweb.Context.Current.Request["GroupID"]))
    {
        groupIdQueryParameter = "&GroupID=" + Dynamicweb.Context.Current.Request["GroupID"].Trim();
    }

    string currentPageLink = "Default.aspx?ID=" + searchResultsPageId + groupIdQueryParameter;

    GroupInfoViewModel productgroup = null;
    if (!string.IsNullOrEmpty(searchTerm) && Model.Products != null && Model.Products.Any())
    {
        //See if the first group of the first product happens to share name of the search term and redirect to that group
        productgroup = Model.Products.FirstOrDefault().Groups.FirstOrDefault();
        if (productgroup != null && productgroup.Name.Equals(searchTerm, StringComparison.OrdinalIgnoreCase))
        {
            string grouplink = "/Default.aspx?ID=" + searchResultsPageId + "&GroupID=" + productgroup.Id;
            //HttpContext.Current.Response.Redirect(grouplink);
        }
    }


}

<div id="asyncFetchPlaceholder">

    <style type="text/css">
        html {
            scroll-behavior: smooth;
        }

        .input {
            padding: 10px 0px 10px 50px;
            border-radius: 20px;
            transition: width .2s ease-in;
            background-image: url(data:image/svg+xml;charset=UTF-8;base64,PHN2ZyBmaWxsPScjY2NjJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPScyNCcgaGVpZ2h0PScyNCcgdmlld0JveD0nMCAwIDI0IDI0Jz48cGF0aCBkPSdNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTlsLTQuOTktNXptLTYgMEM3LjAxIDE0IDUgMTEuOTkgNSA5LjVTNy4wMSA1IDkuNSA1IDE0IDcuMDEgMTQgOS41IDExLjk5IDE0IDkuNSAxNHonLz48L3N2Zz4=);
            background-position: 14px 7px;
            background-repeat: no-repeat;
            background-color: #fff;
            background-size: 28px 28px;
            width: 100%;
            box-shadow: none;
            outline: 0;
            height: 40px;
            border: 0;
            display: block;
            font-size: 18px;
        }

        .dropdown .input {
            border: 1px solid #dfe1e5;
            box-shadow: none;
            border-radius: 20px;
        }

        .dropdown.show .input {
            border: 0;
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
            box-shadow: 0 1px 6px 0 rgba(32,33,36,0.28);
        }

        .dropdown-menu {
            border-top-left-radius: 0;
            border-top-right-radius: 0;
            border-bottom-left-radius: 20px;
            border-bottom-right-radius: 20px;
            box-shadow: 0 4px 6px 0 rgba(32,33,36,0.28);
            margin-top: 0px;
            border: 0;
            width: 100%;
        }

        .dropdown-header {
            font-size: small;
            text-transform: uppercase;
            color: grey;
        }


        .dropdown-item {
            cursor: pointer;
        }

            .dropdown-item:visited {
                color: red;
            }

            .dropdown-item:hover, .dropdown-item.focus {
                background-color: #ebebeb;
            }

            .dropdown-item .icon {
                background-image: url(data:image/svg+xml;charset=UTF-8;base64,PHN2ZyBmaWxsPScjY2NjJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPScyNCcgaGVpZ2h0PScyNCcgdmlld0JveD0nMCAwIDI0IDI0Jz48cGF0aCBkPSdNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTlsLTQuOTktNXptLTYgMEM3LjAxIDE0IDUgMTEuOTkgNSA5LjVTNy4wMSA1IDkuNSA1IDE0IDcuMDEgMTQgOS41IDExLjk5IDE0IDkuNSAxNHonLz48L3N2Zz4=);
                background-repeat: no-repeat;
                background-size: 1em 1em;
                width: 1em;
                height: 1em;
                display: inline-block;
                vertical-align: middle;
            }

            .dropdown-item img {
                width: 1em;
                height: 1em;
            }

        .btn svg, .btn span {
            vertical-align: middle;
            display: inline-block;
        }
    </style>

    <script>
        var tabIndex = -1;
        var tabIndexOld = 0;
        function suggest(e, searchField) {
            if (e.key === "ArrowUp" || e.key === "ArrowDown") {
                //handle dropdown navigation if present
                if (document.getElementById("typeAheadMenu").classList.contains("show")) {
                    handleArrowNavigation(e.key);
                    return;
                }
            }

            if (e.key === "Escape") {
                //Revert back to the original value last entered in the input field
                document.getElementById("typeAhead").value = document.getElementById("typeAhead").getAttribute("data-original");
                hidedd();
                return;
            }

            if (e.key === "Tab") {
                return;
            }

            tabIndex = -1;
            if (searchField.value.length > 0) {
                var val = searchField.value;
                document.getElementById("typeAhead").setAttribute("data-original", val)
                debounce(() => getSuggestions(val), 100)();
            } else {
                hidedd();
            }
        }

        function handleTab(e) {
            if (e.key === "Tab") {
                //keep selection from dropdown navigation but do not submit search
                e.preventDefault();
                hidedd();
                return;
            }
        }

        function handleArrowNavigation(key) {
            var elements = document.getElementById("typeAheadMenu").getElementsByClassName("dropdown-item");
            if (!elements || elements.length < 1) {
                return;
            }
            if (key === "ArrowUp") {
                tabIndex--;
            } else {
                tabIndex++;
            }

            if (tabIndex < 0 || tabIndex > elements.length - 1) {
                tabIndex = 0;
            }

            document.getElementById("typeAheadMenu").setAttribute("data-tabindex", tabIndex);
            if (tabIndex > -1) {
                elements[tabIndex].classList.add("focus");
                var suggestionElement = elements[tabIndex];

                preSelectSuggestion(suggestionElement);

                if (tabIndexOld != tabIndex && elements[tabIndexOld]) {
                    elements[tabIndexOld].classList.remove("focus");
                }
                tabIndexOld = tabIndex;
            }
        }

        async function getSuggestions(inputValue) {
            var searchUrl = "/Default.aspx?ID=" + @Pageview.AreaSettings.GetString("ProductSearchResults") + "&feed=true&redirect=false&eq=" + encodeURIComponent(inputValue.toLowerCase());
            let response = await fetch(searchUrl);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
                alert(response.status + '\n' + responseText);
            } else {
                let html = await response.text().then(function (text) {
                    return text;
                });

                displaySuggestions(html);
            }
        }

        function displaySuggestions(data) {
            if (data.length > 5) {
                document.getElementById("typeAheadMenu").innerHTML = data;
                showdd();
            }
        }

        function selectSuggestion_(inputValue) {
            document.getElementById("typeAhead").value = inputValue;
            document.getElementById("suggestForm").submit();
        }

        function preSelectSuggestion(elm) {
            var suggestionElement = elm.getElementsByClassName("suggestion")[0];
            document.getElementById("typeAhead").value = suggestionElement.innerText;

            var parm = document.getElementById("typeAheadParameter");
            if (elm.getAttribute("data-param") && elm.getAttribute("data-paramvalue")) {
                parm.setAttribute("name", elm.getAttribute("data-param"));
                parm.setAttribute("value", elm.getAttribute("data-paramvalue"));
            } else {
                parm.removeAttribute("name");
                parm.removeAttribute("value");

            }
        }

        function selectSuggestion(elm) {
            preSelectSuggestion(elm);
            document.getElementById("suggestForm").submit();
        }

        function showdd() {
            document.getElementById("typeAheadMenu").classList.add("show");
            document.getElementById("typeAheadDropwdown").classList.add("show");
        }
        function hidedd() {
            document.getElementById("typeAheadMenu").classList.remove("show");
            document.getElementById("typeAheadDropwdown").classList.remove("show");
        }



        var timeout;
        function debounce(func, wait, immediate) {
            return function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

    </script>

    <div class="row swatch-200 py-2">
        <div class="col-lg-2"></div>
        <div class="col">
            <div class="dropdown" id="typeAheadDropwdown">
                <div class="search-input-container">
                    <form method="get" action="@Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(searchResultsPageId)" id="suggestForm">
                        <input type="hidden" id="typeAheadParameter" />
                        <input class="input isFocus" id="typeAhead" type="text" placeholder="" autocomplete="off" maxlength="255" name="q" tabindex="1" value="@searchTerm" data-original="@searchTerm">
                    </form>
                </div>
                <div class="dropdown-menu" id="typeAheadMenu">
                    <h6 class="dropdown-header">Trending</h6>
                    <div class="px-3">
                        <span class="border border-1 font-weight-bolder rounded-pill btn btn-sm" onclick="selectSuggestion(this);"><small class="suggestion">Light</small></span>
                        <span class="border border-1 font-weight-bolder rounded-pill btn btn-sm" onclick="selectSuggestion(this);"><small class="suggestion">Bike</small></span>
                        <span class="border border-1 font-weight-bolder rounded-pill btn btn-sm" onclick="selectSuggestion(this);"><small class="suggestion">Helmet</small></span>
                    </div>
                    @{
                        if (searchHistory.Any())
                        {
                            searchHistory.Reverse();
                            <div class="dropdown-divider">
                            </div>
                            <h6 class="dropdown-header">Search history</h6>
                            foreach (var historicSearchTerm in searchHistory.Take(5))
                            {
                                <div class="dropdown-item" onclick="selectSuggestion(this);"><span class="icon"></span> <span class="suggestion">@historicSearchTerm</span></div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-2"></div>
    </div>

    <script>
        document.body.addEventListener('click', hidedd);
        document.getElementById("typeAhead").addEventListener('focus', showdd);
        document.getElementById("typeAhead").addEventListener('keyup', (e) => suggest(e, document.getElementById("typeAhead")))
        document.getElementById("typeAhead").addEventListener('keydown', (e) => handleTab(e))
    </script>

    <script>
        function goToPage(aTag) {
            var pageTitle = aTag.getAttribute("title");
            navigateToPage(aTag.href);
            history.pushState(null, pageTitle, aTag.href);
            if (pageTitle != null) {
                document.title = pageTitle;
            }
            return false;
        }

        async function navigateToPage(href) {
            var fetchHref = href;
            if (href.indexOf("?") > 0) {
                fetchHref += "&feed=true"
            } else {
                fetchHref += "?feed=true"
            }
            let response = await fetch(fetchHref);

            if (!response.ok) {
                throw new Error('HTTP error! status: ${response.status}');
            } else {
                let html = await response.text().then(function (text) {
                    return text;
                });

                document.getElementById("asyncFetchPlaceholder").outerHTML = html;
            }
            window.scrollTo(0, 0);
        }

        window.onpopstate = function (event) {
            alert("location: " + document.location.href + ", title: " + document.title + ", state: " + JSON.stringify(event.state));
            navigateToPage(document.location.href);
            //document.title = event.state.prevTitle;
        }
    </script>
</div>
