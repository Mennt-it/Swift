@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@using Page = Dynamicweb.Content.Page
@functions
{
	private string GetImageHandlerImage(FileViewModel imageFile)
	{
		int imageWidth = GetImageWidth();
		string imagePath = imageFile?.Path ?? "";
		string focalPoints = imageFile?.GetFocalPointParameters() ?? "";
		string imageRatio = GetImageRatio();
		string image = $"/Admin/Public/GetImage.ashx?width={imageWidth}";
		string crop = "7";

		if (imageRatio != "original")
		{
			if (!string.IsNullOrEmpty(imageRatio))
			{
				image += $"&height={GetImageHeight(imageRatio, imageWidth)}&fillcanvas=true&{focalPoints}";
			}
		}

		image += $"&crop={crop}&image={imagePath}";

		return image;
	}

	private int GetImageWidth()
	{
		int newsletterWidth = Pageview != null ? Dynamicweb.Core.Converter.ToInt32(Pageview.Page.Item["Width"]) : 660;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);

		if (grid == null) return newsletterWidth;

		var definitionId = grid.DefinitionId;

		if (definitionId == "1Column") return newsletterWidth;

		var item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		var spaceBetweenColumns = item["SpaceBetweenColumns"].ToString();
		var spacing = 20;

		return spaceBetweenColumns != "spacing" ? newsletterWidth / 2 : (newsletterWidth - spacing) / 2;
	}

	private static string GetImageHeight(string imageRatio, int imageWidth)
	{
		string[] ratioValues = imageRatio.Split('-');
		double ratio = ratioValues.Length == 2 ? Dynamicweb.Core.Converter.ToDouble(ratioValues[1]) / Dynamicweb.Core.Converter.ToDouble(ratioValues[0]) : 1;
		return Dynamicweb.Core.Converter.ToInt32(Dynamicweb.Core.Converter.ToInt32(imageWidth) * ratio).ToString();
	}

	private string GetImageRatio()
	{
		return Model.Item.GetRawValueString("ImageAspectRatio", "original");
	}
	
	private string GetThemeValue(string systemName)
	{
		int themesPageId = Pageview.AreaSettings.GetLink("ThemesPage") != null ? Pageview.AreaSettings.GetLink("ThemesPage").PageId : 0;
		if (themesPageId == 0) return "";
        
		List<Paragraph> themesPageParagraphs = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(themesPageId)?.ToList();
		string theme = GetSelectedTheme();
		Paragraph themeParagraph = themesPageParagraphs?.FirstOrDefault(p => p.Item["Name"].ToString().ToLower().Equals(theme));
		if (themeParagraph == null) return "";
		string themeValue = themeParagraph.Item[systemName] != null ? themeParagraph.Item[systemName].ToString() : "";
		themeValue = themeValue == "" ? "transparent" : themeValue;
		return themeValue;
	}

	private string GetSelectedTheme()
	{
		string theme = !string.IsNullOrEmpty(Pageview.CurrentParagraph.Item["Theme"]?.ToString()) ? Pageview.CurrentParagraph.Item["Theme"].ToString().ToLower() : "";
		if (!string.IsNullOrEmpty(theme)) return theme;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);
		Item item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		theme = item["Theme"]?.ToString().ToLower();
		
		if (!string.IsNullOrEmpty(theme)) return theme;
		
		theme = Dynamicweb.Core.Converter.ToString(Pageview.Page.Item["Theme"])?.ToLower();
		return !string.IsNullOrEmpty(theme) ? theme : "theme default";
	}
	
	private string GetFontStyle(string type)
	{
		int brandingPageId = Pageview.AreaSettings.GetLink("BrandingPage") != null ? Pageview.AreaSettings.GetLink("BrandingPage").PageId : 0;
		if (brandingPageId == 0) return "";
		
		Page brandingPage = Dynamicweb.Services.Pages?.GetPage(brandingPageId);
		if (brandingPage == null) return "";
		
		string fontStyle = "";
		dynamic font = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item[type+"Font"].ToString());
		if (font != null) {
			fontStyle += $"font-family:{font.Family}, sans-serif;";
			fontStyle += $"font-weight:{font.SelectedVariant};";
		}
		fontStyle += $"text-transform:{brandingPage.Item[type+"Casing"]};";
		fontStyle += $"line-height:{brandingPage.Item[type+"LineHeight"]};";
		fontStyle += $"letter-spacing:{brandingPage.Item[type+"LetterSpacing"]};";
		return fontStyle;
	}
}
@{
	string layout = Model.Item.GetRawValueString("Layout", "image-top");
	string backgroundColor = GetThemeValue("BackgroundColor");
	string bodyFontStyle = GetFontStyle("Body");
}
<td style="background-color:@backgroundColor;vertical-align:center;font-size: 16px;@bodyFontStyle">
	@switch (layout)
	{
		case "image-top":
			@RenderImage()
			@RenderTitle()
			@RenderLead()
			@RenderText()
			@RenderButton()
			break;

		case "title-top":
			@RenderTitle()
			@RenderImage()
			@RenderLead()
			@RenderText()
			@RenderButton()
			break;

		case "title-lead-top":
			@RenderTitle()
			@RenderLead()
			@RenderImage()
			@RenderText()
			@RenderButton()
			break;

		case "text-center":
			@RenderImage("center")
			@RenderTitle("center")
			@RenderLead("center")
			@RenderText("center")
			@RenderButton("center")
			break;
	}
</td>

@helper RenderImage(string horizontalAlignment = "left")
{
	FileViewModel imageFile = Model.Item.GetFile("Image");

	if (imageFile != null)
	{
		string altText = Model.Item.GetString("Title"); //TODO: add alt text to image?
		string width = GetImageRatio() == "original" ? "" : "width:100%";
		<div align="@horizontalAlignment">
			<img style="border: 0;display: block;height: auto;max-width: 100%;@width" alt="@altText" src="@GetImageHandlerImage(imageFile)">
		</div>
	}
}

@helper RenderTitle(string horizontalAlignment = "left")
{
	string title = Model.Item.GetString("Title");
	string foregroundColor = GetThemeValue("ForegroundColor");
	string headerFontStyle = GetFontStyle("Header");

	if (!string.IsNullOrEmpty(title) && !Model.Item.GetBoolean("HideTitle"))
	{
		<div style="mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;">
			<h1 class="size-34" style="text-align:@horizontalAlignment;margin-top:20px;margin-bottom:10px;font-size: 30px;@headerFontStyle;" lang="x-size-34">
				<span>
					<span style="color:@foregroundColor">
						<strong>@title</strong>
					</span>
				</span>
			</h1>
		</div>
	}
}

@helper RenderLead(string horizontalAlignment = "left")
{
	string lead = Model.Item.GetString("Lead");
	string foregroundColor = GetThemeValue("ForegroundColor");
	string displayFontStyle = GetFontStyle("Display");

	if (!string.IsNullOrEmpty(lead))
	{
		<div style="text-align:@horizontalAlignment;mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;">
		    <p class="size-22" style="margin-top:0;margin-bottom:0;font-size: 16px;color:@foregroundColor;@displayFontStyle" lang="x-size-16">
				@lead
			</p>
		</div>
	}
}

@helper RenderText(string horizontalAlignment = "left")
{
	string text = Model.Item?.GetString("Text") ?? "";
	string foregroundColor = GetThemeValue("ForegroundColor");

	if (!string.IsNullOrEmpty(text))
	{
		<div style="text-align:@horizontalAlignment;mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;color:@foregroundColor;">
			@text
		</div>
	}
}

@helper RenderButton(string horizontalAlignment = "left")
{
	string link = Model.Item?.GetString("ButtonLink") ?? "";
	string label = Model.Item?.GetString("ButtonLabel") ?? "";
	string backgroundColor = GetThemeValue("ButtonPrimaryBackgroundColor");
	string foregroundColor = GetThemeValue("ButtonPrimaryForegroundColor");

	if (!string.IsNullOrEmpty(link) && !string.IsNullOrEmpty(label))
	{
		<div class="btn" style="text-align:@horizontalAlignment;">
		    <![if !mso]>
		        <a href="@link" style="border-radius: 0;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: @foregroundColor !important;background-color:@backgroundColor;">
		            @label
		        </a>
		    <![endif]>
		    <!--[if mso]>
		        <v:rect xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w="urn:schemas-microsoft-com:office:word" href="@link" style="height:60px;width:300px;margin-top:20px;v-text-anchor:middle;" fillcolor="@backgroundColor" stroke="f">
					<v:textbox style="mso-fit-shape-to-text:t" inset="10px,12px,10px,12px">
						<center style="font-size:14px;line-height:24px;color:@foregroundColor;font-weight:bold;mso-line-height-rule:exactly;mso-text-raise:4px">
		                    @label
		                </center>
		            </v:textbox>
		        </v:rect>
		    <![endif]-->
		</div>
	}
}
