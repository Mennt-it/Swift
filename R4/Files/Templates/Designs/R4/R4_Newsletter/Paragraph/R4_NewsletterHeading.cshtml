@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Page = Dynamicweb.Content.Page
@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@functions
{
	private string GetAlignment(string direction)
	{
		var layout = Model.Item.GetRawValueString("Layout", "middle-center");
		var alignments = layout.Split('-');
		var indexPosition = direction == "vertical" ? 0 : 1;

		if (alignments.Length == 2)
		{
			return alignments.Length == 2 ? alignments[indexPosition] : "middle";
		}
    	
		return direction == "vertical" ? "middle" : "center";
	}
	
	private string GetThemeValue(string systemName)
	{
		string theme = GetSelectedTheme();
		int themesPageId = Pageview.AreaSettings.GetLink("ThemesPage") != null ? Pageview.AreaSettings.GetLink("ThemesPage").PageId : 0;
        if (themesPageId == 0) return "";
        
		List<Paragraph> themesPageParagraphs = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(themesPageId)?.ToList();
		Paragraph themeParagraph = themesPageParagraphs?.FirstOrDefault(p => p.Item["Name"].ToString().ToLower().Equals(theme));
		if (themeParagraph == null) return "";
		string themeValue = themeParagraph.Item[systemName] != null ? themeParagraph.Item[systemName].ToString() : "";
		themeValue = themeValue == "" ? "transparent" : themeValue;
		return themeValue;
	}

	private string GetSelectedTheme()
	{
		string theme = !string.IsNullOrEmpty(Pageview.CurrentParagraph.Item["Theme"]?.ToString()) ? Pageview.CurrentParagraph.Item["Theme"].ToString().ToLower() : "";
		if (!string.IsNullOrEmpty(theme)) return theme;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);
		Item item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		theme = item["Theme"]?.ToString().ToLower();
		
		if (!string.IsNullOrEmpty(theme)) return theme;
		
		theme = Dynamicweb.Core.Converter.ToString(Pageview.Page.Item["Theme"])?.ToLower();
		return !string.IsNullOrEmpty(theme) ? theme : "theme default";
	}
	
	private string GetFontStyle(string type)
	{
		int brandingPageId = Pageview.AreaSettings.GetLink("BrandingPage") != null ? Pageview.AreaSettings.GetLink("BrandingPage").PageId : 0;
		if (brandingPageId == 0) return "";
		
		Page brandingPage = Dynamicweb.Services.Pages?.GetPage(brandingPageId);
		if (brandingPage == null) return "";
		
		string fontStyle = "";
		dynamic font = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item[type+"Font"].ToString());
		if (font != null) {
			fontStyle += $"font-family:{font.Family}, sans-serif;";
			fontStyle += $"font-weight:{font.SelectedVariant};";
		}
		fontStyle += $"text-transform:{brandingPage.Item[type+"Casing"]};";
		fontStyle += $"line-height:{brandingPage.Item[type+"LineHeight"]};";
		fontStyle += $"letter-spacing:{brandingPage.Item[type+"LetterSpacing"]};";
		return fontStyle;
	}
}
@{
	string verticalAlignment = GetAlignment("vertical");
	string backgroundColor = GetThemeValue("BackgroundColor");
}
<td style="vertical-align:@verticalAlignment;background-color:@backgroundColor;line-height: 21px;">
	@RenderTitle()
</td>

@helper RenderTitle()
{
	string title = Model.Item?.GetString("Title") ?? "";
	string horizontalAlignment = GetAlignment("horizontal");
	string headingColor = GetThemeValue("ForegroundColor");
	string headingFontStyle = GetFontStyle("Header");
	
	<div style="mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;">
		<h1 class="size-34" style="text-align:@horizontalAlignment;margin-top:20px;margin-bottom:20px;font-size: 30px;@headingFontStyle" lang="x-size-34">
			<span>
				<span style="color:@headingColor">
					<strong>@title</strong>
				</span>
			</span>
		</h1>
	</div>
}
