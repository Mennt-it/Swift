@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string layout = Model.Item.GetRawValueString("Layout", "align-middle-center-text-center");

	bool movePageBehind = false;
	bool isFirstPoster = false;
	string movePageBehindClass = "";
	if (Pageview.Page.PropertyItem != null)
	{
		string headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
		movePageBehind = headerCssClass == "fixed-top" && !Pageview.IsVisualEditorMode ? true : false;
		if (movePageBehind)
		{
			movePageBehindClass = " poster-behind";
			if (!Dynamicweb.Context.Current.Items.Contains("firstPosterIsRendered"))
			{
				isFirstPoster = true;
				Dynamicweb.Context.Current.Items.Add("firstPosterIsRendered", true);
			}
		}
	}

	string posterHeight = Model.Item.GetRawValueString("PosterHeight", "");
	string posterSizeBase = posterHeight.Contains("%") || posterHeight.Contains("0") ? "aspect-ratio" : "height";
	
	posterHeight = posterHeight == "small" ? "min-vh-25 min-vh-md-50" : posterHeight;
	posterHeight = posterHeight == "medium" ? "min-vh-50 min-vh-md-75" : posterHeight;
	posterHeight = posterHeight == "large" ? "min-vh-75 min-vh-md-100" : posterHeight;

	string ratio = posterHeight.Contains("%") || posterHeight.Contains("0") ? Model.Item.GetRawValueString("PosterHeight") : "";
	ratio = ratio != "0" ? ratio : "";
	string ratioCssClass = ratio != "" && ratio != "fill" ? " ratio" : "";
	string ratioVariable = ratio != "" ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : "";

	string posterPadding = Model.Item.GetRawValueString("ContentPadding", "");
	posterPadding = posterPadding == "none" ? "p-3 px-xl-3 py-xl-4" : posterPadding;
	posterPadding = posterPadding == "small" ? "p-3 p-xl-4" : posterPadding;
	posterPadding = posterPadding == "large" ? "p-4 p-xl-5" : posterPadding;

	string posterWidth = "container-xl";

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string alignment = "";

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? "mw-75ch d-inline-block" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	switch (layout)
	{
		case "align-top-left-text-left":
			alignment = "text-start justify-content-start align-items-start";
			break;
		case "align-top-center-text-center":
			alignment = "text-center justify-content-start align-items-start";
			break;
		case "align-top-right-text-right":
			alignment = "text-end justify-content-start align-items-start";
			break;
		case "align-middle-left-text-left":
			alignment = "text-start justify-content-center align-items-center";
			break;
		case "align-middle-center-text-center":
			alignment = "text-center justify-content-center align-items-center";
			break;
		case "align-middle-right-text-right":
			alignment = "text-end justify-content-center align-items-center";
			break;
		case "align-bottom-left-text-left":
			alignment = "text-start justify-content-end align-items-end";
			break;
		case "align-bottom-center-text-center":
			alignment = "text-center justify-content-end align-items-end";
			break;
		case "align-bottom-right-text-right":
			alignment = "text-end justify-content-end align-items-end";
			break;
	}

	var parms = new Dictionary<string, object>();
	parms.Add("cssClass", "h-100 w-100");
	parms.Add("columns", Model.GridRowColumnCount);

	string imageFilter = Model.Item.GetRawValueString("ImageFilter", "");
	imageFilter = imageFilter == "no-filter" ? "" : imageFilter;
	imageFilter = imageFilter == "filter" ? " image-filter" : imageFilter;
}

<div class="position-relative @(theme)@(movePageBehindClass)">
	@if (posterSizeBase == "height") {
		if (!string.IsNullOrEmpty(Model.Item.GetString("Image"))) {
			<div class="position-absolute top-0 bottom-0 end-0 start-0@(imageFilter)">
				@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
			</div>
		}

		<div class="@(posterWidth) h-100">
			<div class="h-100 position-relative grid grid-1 @posterPadding @(alignment) @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
				<div class="grid grid-1 gap-3 gap-md-4">
					@RenderTitle(maxWidth)
					@RenderText(maxWidth)
					@RenderButtons()
				</div>
			</div>
		</div>
    }
	@if (posterSizeBase == "aspect-ratio") {
		<div class="@(posterWidth) @posterPadding position-absolute h-100 w-100" style="z-index: 1">
			<div class="h-100 grid grid-1 @(alignment)" @ratioVariable id="Poster_@Pageview.CurrentParagraph.ID">
				<div class="grid grid-1 gap-3 gap-md-4">
					@RenderTitle(maxWidth)
					@RenderText(maxWidth)
					@RenderButtons()
				</div>
			</div>
		</div>

		<div class="position-relative @(imageFilter)">
			<figure class="m-0@(ratioCssClass)" @ratioVariable>
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Image"))) {
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				}
			</figure>
		</div>
    }
</div>

@helper RenderTitle(string maxWidth)
{

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-1");

		<h2 class="@titleFontSize mb-0">
			<span class="@maxWidth">@Model.Item.GetString("Title")</span>
		</h2>
	}
}

@helper RenderText(string maxWidth)
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<p class="@subtitleFontSize lead mb-0">
			<span class="@maxWidth">@Model.Item.GetString("Text")</span>
		</p>
	}
}

@helper RenderButtons()
{
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel link2 = new Dynamicweb.Frontend.LinkViewModel();

	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	string linkType2 = Model.Item.GetRawValueString("LinkType2", "page2");

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType2 == "page2" && Model.Item.GetLink("ButtonLink2") != null)
	{
		link2 = Model.Item.GetLink("ButtonLink2");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType2 == "product-group2")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink2");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product2")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink2");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	string buttonSize = Model.Item.GetRawValueString("buttonSize", "regular");
	string buttonSizeClass = string.Empty;

	switch (buttonSize)
	{
		case "small":
			buttonSizeClass = " btn-sm";
			break;
		case "large":
			buttonSizeClass = " btn-lg";
			break;
	}
	
	<div class="d-flex gap-3">
		@RenderButton1(link, link2, buttonSizeClass)
		@RenderButton2(link, link2 ,buttonSizeClass)
	</div>
}

@helper RenderButton1 (Dynamicweb.Frontend.LinkViewModel link, Dynamicweb.Frontend.LinkViewModel link2, string buttonSizeClass)
{	
	string buttonLabel = Model.Item.GetString("ButtonLabel", string.Empty);
	string stretchedLink = Model.Item.GetRawValueString("StretchedLink", "column-not-clickable");
	string buttonStyle = Model.Item.GetRawValueString("ButtonStyle") == "primary" ? " btn-primary" : " btn-secondary";
	string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;
	string stretchedLinkClass = stretchedLink == "column-clickable" && string.IsNullOrEmpty(link2.Url) ? " stretched-link" : string.Empty;

	if (link != null && !string.IsNullOrEmpty(link.Url) && !string.IsNullOrEmpty(buttonLabel))
	{
		<a href="@link.Url" @target class="btn@(buttonStyle)@(buttonSizeClass)@(stretchedLinkClass)">@buttonLabel</a>
	}
	
	else if (link != null && !string.IsNullOrEmpty(link.Url) && string.IsNullOrEmpty(buttonLabel))
	{	
		<a href="@link.Url" @target class="@(stretchedLinkClass)">
			<span class="visually-hidden">@Model.Item.GetString("Title")</span>
		</a>
	}
}

@helper RenderButton2 (Dynamicweb.Frontend.LinkViewModel link, Dynamicweb.Frontend.LinkViewModel link2, string buttonSizeClass)
{	
	string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
	string stretchedLink2 = Model.Item.GetRawValueString("StretchedLink2", "column-not-clickable");
	string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2") == "secondary" ? " btn-secondary" : " btn-primary";
	string target2 = link2.IsExternal ? "target=\"_blank\"" : string.Empty;
	string stretchedLinkClass = stretchedLink2 == "column-clickable" && string.IsNullOrEmpty(link.Url) ? " stretched-link" : string.Empty;

	if (link2 != null && !string.IsNullOrEmpty(link2.Url) && !string.IsNullOrEmpty(buttonLabel2))
	{
		<a href="@link2.Url" @target2 class="btn@(buttonStyle2)@(buttonSizeClass)@(stretchedLinkClass)">@buttonLabel2</a>
	}
	
	else if (link2 != null && !string.IsNullOrEmpty(link2.Url) && string.IsNullOrEmpty(buttonLabel2))
	{	
		<a href="@link2.Url" @target2 class="@(stretchedLinkClass)">
			<span class="visually-hidden">@Model.Item.GetString("Title")</span>
		</a>
	}
}

@if (movePageBehind && isFirstPoster)
{
	<script>
		['resize', 'load'].forEach(function (e) {
			window.addEventListener(e, () => swift.Scroll.setContentPosition());
		});
	</script>
}
