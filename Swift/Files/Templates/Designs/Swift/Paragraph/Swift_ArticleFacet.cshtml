@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Content.Items.Queries

@functions {

	private int GetAreaId()
	{
		var areaId = Pageview.AreaID;

		return areaId;
	}

	private IEnumerable<Dynamicweb.Content.Items.Item> GetLists()
	{
		IEnumerable<Item> categories = null;

		using (Repository repo = ItemManager.Storage.Open("Swift_ArticleListPage"))
		{
			categories = repo.SelectByAreaId(GetAreaId(), new Query() { Amount = 100 }, true, true, false);
		}
		return categories;
	}

	private IEnumerable<Dynamicweb.Content.Items.Item> GetTagGroups()
	{
		IEnumerable<Item> tagGroups = null;

		using (Repository repo = ItemManager.Storage.Open("Swift_ArticleTagsCollection"))
		{
			tagGroups = repo.SelectByAreaId(GetAreaId(), new Query() { Amount = 100 }, true, true, false);
		}
		return tagGroups;
	}

	private IEnumerable<Dynamicweb.Content.Items.Item> GetTags()
	{
		IEnumerable<Item> tags = null;

		using (Repository repo = ItemManager.Storage.Open("Swift_ArticleTag"))
		{
			tags = repo.SelectByAreaId(GetAreaId(), new Query() { Amount = 100 }, true, true, false);
		}
		return tags;
	}

}

@{
	var query = Dynamicweb.Context.Current.Request.QueryString.Get("list");
	var facet = Model.Item?.GetRawValueString("Facet", "facet");
	var type = Model.Item?.GetRawValueString("Type", "list");
	var style = Model.Item?.GetRawValueString("Style", "dropdown");
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? $"theme {Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower()} " : string.Empty;
	var alignment = Model.Item?.GetRawValueString("Alignment", "left");
	switch (alignment)
	{
		case "left":
			alignment = "align-items-start";
			break;
		case "center":
			alignment = "align-items-center";
			break;
		case "right":
			alignment = "align-items-end";
			break;
	}
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	switch (contentPadding)
	{
		case "none":
			contentPadding = "p-0";
			break;
		case "small":
			contentPadding = "p-3 p-md-3";
			break;
		case "large":
			contentPadding = "p-5 p-md-5";
			break;
	}
}

<div>
	@*<input class="form-control" type="search"
		name="Tags" placeholder="Begin typing to search users..."
		hx-get="/Default.aspx?ID=@Pageview.ID"
		hx-trigger="keyup changed delay:500ms"
		hx-target="#result-@(Model.ID)"
		hx-swap="innerHTML">*@
	@*<input type="hidden" name="LayoutTemplate" value="Swift_PageClean.cshtml" />*@
</div>

<div id="result-@(Model.ID)"></div>

<div class="d-flex flex-column @(theme)@(contentPadding) @(alignment)">

@{
	switch (facet)
	{
		case "facet":

			switch (type)
			{
				case "list":

					switch (style)
					{
						case "checkboxes":

							<div>

								@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
								{
									string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
									string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
									string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} mb-3\">";
									string headingLevelStop = $"</{headingLevel}>";

									@headingLevelStart
										@Model.Item.GetString("Title")
									@headingLevelStop
								}

								@foreach (var list in GetLists())
								{
									if (Dynamicweb.Core.Converter.ToInt32(list["PageId"]) != Pageview.Page.ID)
									{
									<div class="form-check form-check-inline">
										<label class="form-check-label" for="list_@list["PageId"]">@list["Title"]</label>
										<input class="form-check-input" type="checkbox" id="list_@list["PageId"]" name="list" value="@list["PageId"]" @(!string.IsNullOrEmpty(query) && query.Contains($"{list["PageId"]}") ? "checked" : string.Empty) />
									</div>
									}
								}
								@*<input class="btn btn-primary" type="button" onclick="swift.PageUpdater.Update(event)" value="Apply filter" />*@
								<input class="btn btn-primary" type="submit" value="Apply filter" />
								
							</div>

							break;

						case "dropdown":

							
								@*<select name="list" class="form-select" 
										hx-post="/Default.aspx?ID=@Pageview.ID"
										hx-trigger="change"
										hx-target="#content"
										hx-swap="innerHTML">*@
								<select name="list" class="form-select" onchange="this.closest('form').submit()">
									<option value label="All" selected></option>
									@{
										foreach (var list in GetLists())
										{
											if (Dynamicweb.Core.Converter.ToInt32(list["PageId"]) != Pageview.Page.ID)
											{
												<option value="@list["PageId"]" label="@list["Title"]" @(!string.IsNullOrEmpty(query) && query.Equals($"{list["PageId"]}") ? "selected" : string.Empty)></option>
											}
										}
									}
								</select>

							break;

						case "radiobuttons":

								<div>
								@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
								{
									string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
									string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
									string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} mb-3\">";
									string headingLevelStop = $"</{headingLevel}>";

									@headingLevelStart
										@Model.Item.GetString("Title")
									@headingLevelStop
								}

								<div class="form-check form-check-inline">
									<label class="form-check-label" for="category_all">All</label>
									<input class="form-check-input" type="radio" id="category_all" name="list" value="" checked onchange="this.closest('form').submit()"/>
								</div>

								@foreach (var list in GetLists())
								{
									if (Dynamicweb.Core.Converter.ToInt32(list["PageId"]) != Pageview.Page.ID)
									{
									<div class="form-check form-check-inline">
										<label class="form-check-label" for="list_@list["PageId"]">@list["Title"]</label>
										<input class="form-check-input" type="radio" id="list_@list["PageId"]" name="list" value="@list["PageId"]" @(!string.IsNullOrEmpty(query) && query.Equals($"{list["PageId"]}") ? "checked" : string.Empty) onchange="this.closest('form').submit()" />
									</div>
									}
								}
								</div>

							break;
					}

					break;

				case "tag-group":

					int groupId = !string.IsNullOrEmpty(Model.Item.GetRawValueString("TagGroup")) ? Model.Item.GetInt32("TagGroup") : 0;
					var group = groupId > 0 ? Dynamicweb.Services.Pages?.GetPage(groupId) : null;
					var groupName = group != null ? Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(group)?.Item?.GetString("Title") : string.Empty;
					var tags = Dynamicweb.Services.Paragraphs?.GetParagraphsByPageId(groupId);
					var tagGroupQuery = Dynamicweb.Context.Current.Request.QueryString.Get("Tags");
					
					switch (style)
					{
						case "dropdown":
								
								if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
								{
									string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
									string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
									string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} mb-3\">";
									string headingLevelStop = $"</{headingLevel}>";

									@headingLevelStart
										@Model.Item.GetString("Title")
									@headingLevelStop
								}
								
								<select class="form-select" name="Tags" onchange="this.closest('form').submit()">
								
									<option disabled selected>@(groupName)</option>
									<option value label="All"></option>
									
									@{
										foreach (var tag in tags)
										{
											var tagItem = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(tag)?.Item;

											<option value="@tag.ItemId" label="@tagItem.GetString("Title")" @(!string.IsNullOrEmpty(tagGroupQuery) && tagGroupQuery.Contains($"{tag.ItemId}") ? "selected" : string.Empty)></option>
										}
									}
								</select>
							
							break;
					}

					break;
			}

			break;
		case "tag-cloud":
			
			var tagQuery = Dynamicweb.Context.Current.Request.Form.Get("Tags");
				
				if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
				{
					string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
					string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
					string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} mb-3\">";
					string headingLevelStop = $"</{headingLevel}>";

					@headingLevelStart
						@Model.Item.GetString("Title")
					@headingLevelStop
				}

				<div class="d-flex flex-wrap gap-2">
					<input class="btn-check" type="radio" id="tag_all" checked name="Tags" value onchange="this.closest('form').submit()"/>
					<label class="btn btn-primary btn-sm" for="tag_all">All</label>
					@foreach (var tag in GetTags())
					{
							<input class="btn-check" type="radio" id="tag_@tag["Id"]" name="Tags" value="@tag["Id"]" @(!string.IsNullOrEmpty(tagQuery) && tagQuery.Equals($"{tag["Id"]}") ? "checked" : string.Empty) onchange="this.closest('form').submit()"/>
							<label class="btn btn-primary btn-sm" for="tag_@tag["Id"]">@tag["Title"]</label>
					}
				</div>

			<style>
				.btn-check:checked + .btn-primary {
					background-color: var(--swift-button-primary-hover-background-color);
					border: 0.0833rem solid var(--swift-button-primary-hover-border-color);
					color: var(--swift-button-primary-hover-foreground-color);
				}
			</style>

			break;
	}
}
</div>
