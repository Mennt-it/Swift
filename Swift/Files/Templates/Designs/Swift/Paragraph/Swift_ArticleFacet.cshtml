@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Content.Items
@using Dynamicweb.Content.Items.Queries

@functions {

	private int GetAreaId()
	{
		var areaId = Pageview.AreaID;

		return areaId;
	}

	private List<Dynamicweb.Frontend.ItemViewModel> GetSelectedLists()
	{
		var selectedLists = Model.Item?.GetRawValueString("Lists");
		var listsArray = selectedLists.Split(',');
		var lists = new List<Dynamicweb.Frontend.ItemViewModel>();

		foreach (var item in listsArray)
		{
			var page = Dynamicweb.Services.Pages?.GetPage(Dynamicweb.Core.Converter.ToInt32(item));
			var view = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page)?.Item;
			lists.Add(view);
		}

		return lists;
	}

	private IEnumerable<Dynamicweb.Content.Items.Item> GetTagGroups()
	{
		IEnumerable<Item> tagGroups = null;

		using (Repository repo = ItemManager.Storage.Open("Swift_ArticleTagsCollection"))
		{
			tagGroups = repo.SelectByAreaId(GetAreaId(), new Query() { Amount = 100 }, true, true, false);
		}
		return tagGroups;
	}

	private IEnumerable<Dynamicweb.Content.Items.Item> GetTags()
	{
		IEnumerable<Item> tags = null;

		using (Repository repo = ItemManager.Storage.Open("Swift_ArticleTag"))
		{
			tags = repo.SelectByAreaId(GetAreaId(), new Query() { Amount = 100 }, true, true, false);
		}
		return tags;
	}

	private string GetCheckboxIcon()
	{
		string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
		var icon = $"<span class=\"icon-2\">{@ReadFile(iconPath + "check.svg")}</span>";

		return icon;
	}

	private string RenderHeader()
	{
		var header = string.Empty;

		if(!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
			string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
			string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} mb-3\">";
			string headingLevelStop = $"</{headingLevel}>";

			header += @headingLevelStart;
			header += Model.Item.GetString("Title");
			header += @headingLevelStop;
		}

		return header;
	}

}

@{
	var query = Dynamicweb.Context.Current.Request.QueryString?.Get("list");
	var facet = Model.Item?.GetRawValueString("Facet", "facet");
	var type = Model.Item?.GetRawValueString("Type", "list");
	var style = Model.Item?.GetRawValueString("Style", "dropdown");
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? $"theme {Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower()} " : string.Empty;
	var alignment = Model.Item?.GetRawValueString("Alignment", "left");
	var buttonType = Model.Item?.GetRawValueString("ButtonType", "btn-primary");
	var buttonSize = Model.Item?.GetRawValueString("ButtonSize", "btn-md");

	switch (alignment)
	{
		case "left":
			alignment = "align-items-start";
			break;
		case "center":
			alignment = "align-items-center";
			break;
		case "right":
			alignment = "align-items-end";
			break;
	}
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "none");
	switch (contentPadding)
	{
		case "none":
			contentPadding = "p-0";
			break;
		case "small":
			contentPadding = "p-3 p-md-3";
			break;
		case "large":
			contentPadding = "p-5 p-md-5";
			break;
	}
}

<div class="d-flex flex-column @(theme)@(contentPadding) @(alignment)">

	@{
		switch (facet)
		{
			case "facet":

				switch (type)
				{
					case "list": // All following cases are "article list pages"

						switch (style)
						{
							case "checkboxes":

								<div>

									@RenderHeader()

									@foreach (var list in GetSelectedLists())
									{
										<div class="form-check form-check-inline">
											<label class="form-check-label" for="list_@list.PageID">@list.GetString("Title")</label>
											<input class="form-check-input" type="checkbox" id="list_@list.PageID" name="list" value="@list.PageID" @(!string.IsNullOrEmpty(query) && query.Contains($"{list.PageID}") ? "checked" : string.Empty) />
										</div>
									}

								</div>

								break;

							case "checkboxbuttons":

								<div class="d-flex flex-wrap gap-2">

									@RenderHeader()
									
									@{ 
										foreach (var list in GetSelectedLists())
										{
											var active = string.Empty;
											var selected = string.Empty;
											var checkbox = string.Empty;
											if (!string.IsNullOrEmpty(query) && query.Contains($"{list.PageID}"))
											{
												active = " active";
												selected = "checked";
												checkbox = GetCheckboxIcon();
											}
											<label class="btn @(buttonType) @(buttonSize)@(active)" for="list_@list.PageID"><span class="d-flex align-items-center gap-2">@list.GetString("Title") @(checkbox)</span></label>
											<input class="visually-hidden" type="checkbox" id="list_@list.PageID" name="list" value="@list.PageID" @(selected) />
										}
									}

								</div>

								break;

							case "dropdown":

								<select name="list" class="form-select">
									<option value="" label="@Translate("All")"></option>
									@{
										foreach (var list in GetSelectedLists())
										{
											<option value="@list.PageID" label="@list.GetString("Title")" @(!string.IsNullOrEmpty(query) && query.Equals($"{list.PageID}") ? "selected" : string.Empty)></option>
										}
									}
								</select>

								break;

							case "radiobuttons":

								<div>
									@RenderHeader()

									<div class="form-check form-check-inline">
										<label class="form-check-label" for="category_all">@Translate("All")</label>
										<input class="form-check-input" type="radio" id="category_all" name="list" value="" checked>
									</div>

									@foreach (var list in GetSelectedLists())
									{
										<div class="form-check form-check-inline">
											<label class="form-check-label" for="list_@list.PageID">@list.GetString("Title")</label>
											<input class="form-check-input" type="radio" id="list_@list.PageID" name="list" value="@list.PageID" @(!string.IsNullOrEmpty(query) && query.Equals($"{list.PageID}") ? "checked" : string.Empty)>
										</div>
									}
								</div>

								break;

							case "dropdownbutton":

								@RenderHeader()

								var lists = GetSelectedLists();
								var facetTitle = !string.IsNullOrEmpty(query) ? lists.FirstOrDefault(x => x.PageID.ToString() == query).GetString("Title") : Translate("All");

								<div class="dropdown w-100">
									<button class="btn @(buttonType) @(buttonSize) dropdown-toggle w-100" type="button" id="facet-dropdown-@(Model.ID)" data-bs-toggle="dropdown" aria-expanded="false">
										@facetTitle
									</button>
									<div class="dropdown-menu w-100" aria-labelledby="facet-dropdown-@(Model.ID)">
										<label class="dropdown-item" for="list_all">@Translate("All")</label>
										<input class="visually-hidden" id="list_all" value name="list" type="radio">
										@{
											foreach (var list in lists)
											{
												var active = string.Empty;
												var selected = string.Empty;
												if (!string.IsNullOrEmpty(query) && query.Contains($"{list.PageID}"))
												{
													active = " active";
													selected = "checked";
												}

												<label class="dropdown-item@(active)" for="list_@list.PageID">@list.GetString("Title")</label>
												<input class="visually-hidden" type="radio" id="list_@list.PageID" name="list" value="@list.PageID" @(selected)>
											}
										}

									</div>
								</div>

								break;
						}

						break;

					case "tag-group": // // All following cases are "article tag collection"

						int groupId = !string.IsNullOrEmpty(Model.Item.GetRawValueString("TagGroup")) ? Model.Item.GetInt32("TagGroup") : 0;
						var group = groupId > 0 ? Dynamicweb.Services.Pages?.GetPage(groupId) : null;
						var groupName = group != null ? Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(group)?.Item?.GetString("Title") : string.Empty;
						var tags = Dynamicweb.Services.Paragraphs?.GetParagraphsByPageId(groupId);
						var tagGroupQuery = new string[] { };
						tagGroupQuery = Dynamicweb.Context.Current.Request.QueryString.Get("Tags") != null ? Dynamicweb.Context.Current.Request.QueryString.Get("Tags")?.Split(',') : tagGroupQuery;

						switch (style)
						{
							case "dropdown":

								@RenderHeader()

								<label>@(groupName)</label>
								<select class="form-select" name="Tags">

									<option value="" label="@Translate("All")"></option>

									@{
										foreach (var tag in tags)
										{
											var tagItem = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(tag)?.Item;
											var selected = string.Empty;
											if (tagGroupQuery.Any() && tagGroupQuery.Contains($"{tag.ItemId}"))
											{
												selected = "selected";
											}
											<option value="@tag.ItemId" label="@tagItem.GetString("Title")" @(selected)></option>
										}
									}
								</select>

								break;

							case "dropdownbutton":

								@RenderHeader()

								var facetTitle = tagGroupQuery.Any() ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(tags.FirstOrDefault(x => x.ItemId == tagGroupQuery.FirstOrDefault(t => t.Equals(x.ItemId))))?.Item.GetString("Title") : groupName;

								<div class="dropdown w-100">
									<button class="btn @(buttonType) @(buttonSize) dropdown-toggle w-100" type="button" id="facet-dropdown-@(Model.ID)" data-bs-toggle="dropdown" aria-expanded="false">
										@(facetTitle = !string.IsNullOrEmpty(facetTitle) ? facetTitle : groupName)
									</button>
									<div class="dropdown-menu w-100" aria-labelledby="facet-dropdown-@(Model.ID)">
										<label class="dropdown-item" for="tag_@Model.ItemId">@Translate("All")</label>
										<input class="visually-hidden" id="tag_@Model.ItemId" value name="Tags" type="radio">
										@{
											foreach (var tag in tags)
											{
												var tagItem = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(tag)?.Item;
												var active = string.Empty;
												var selected = string.Empty;
												if (tagGroupQuery.Any() && tagGroupQuery.Contains($"{tag.ItemId}"))
												{
													active = " active";
													selected = "checked";
												}

												<label class="dropdown-item@(active)" for="tag_@tag.ItemId">@tagItem.GetString("Title")</label>
												<input class="visually-hidden" id="tag_@tag.ItemId" name="Tags" type="radio" value="@tag.ItemId" @(selected)>
											}
										}

									</div>
								</div>

								break;
						}

						break;
				}

				break;
			case "tag-cloud":
				var tagQuery = new string[] { };
				tagQuery = Dynamicweb.Context.Current.Request.QueryString.Get("Tags") != null ? Dynamicweb.Context.Current.Request.QueryString.Get("Tags")?.Split(',') : tagQuery;
				
				@RenderHeader()

				<div class="d-flex flex-wrap gap-2">
					<input class="btn-check" type="radio" id="tag_all" checked name="Tags" value />
					<label class="btn @(buttonType) @(buttonSize)" for="tag_all">@Translate("All")</label>
					@foreach (var tag in GetTags())
					{
						var active = string.Empty;
						var selected = string.Empty;
						if (tagQuery.Any() && tagQuery.Contains($"{tag["Id"]}"))
						{
							active = " active";
							selected = "checked";
						}
						<input class="btn-check" type="radio" id="tag_@tag["Id"]" name="Tags" value="@tag["Id"]" @(selected)>
						<label class="btn @(buttonType) @(buttonSize)" for="tag_@tag["Id"]">@tag["Title"]</label>
					}
				</div>

				<style>
					.btn-check:checked + .btn-primary {
						background-color: var(--swift-button-primary-hover-background-color);
						border: 0.0833rem solid var(--swift-button-primary-hover-border-color);
						color: var(--swift-button-primary-hover-foreground-color);
					}
				</style>

				break;
		}
	}
</div>

<script type="module" src="/Files/Templates/Designs/Swift/Assets/js/htmx.js"></script>
