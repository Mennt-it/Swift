@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Core
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string layout = Model.Item.GetRawValueString("Layout") == "slider" ? "ProductSliderComponent" : "ProductGridComponent";

	//Link generation
	string pageId = Model.Item.GetLink("ProductSliderServicePage") != null ? Model.Item.GetLink("ProductSliderServicePage").PageId.ToString() : "";
	string servicePageByNavigationTag = GetPageIdByNavigationTag("ProductSliderService") != 0 ? GetPageIdByNavigationTag("ProductSliderService").ToString() : "";
	pageId = pageId == "" ? servicePageByNavigationTag : pageId;

	string url = "/Default.aspx?ID=" + pageId;

	if (Pageview.IsVisualEditorMode)
	{
		url += "&VisualEdit=True";
	}

	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsLazyLoadingForProductInfoEnabled;
	if (isLazyLoadingForProductInfoEnabled)
	{
		url += "&getproductinfo=true";
	}

	url += $"&ProductListPartial={layout}"; //Use this to render either a slider or a grid


	bool productViewModelFound = false;
	ProductViewModel product = new ProductViewModel();

	ProductViewModelSettings productSetting = new ProductViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		productViewModelFound = true;
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	if (Pageview.IsVisualEditorMode && !productViewModelFound)
	{
		if (Pageview.Item["DummyProduct"] != null)
		{
			productViewModelFound = true;
			string dummyProductId = "";
			var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
			ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();
			if (productList.Products != null)
			{
				foreach (var p in productList.Products) { dummyProductId = p.Id; }
				ProductViewModel dummyProduct = dummyProductId != "" ? ViewModelFactory.CreateView(productSetting, dummyProductId) : new ProductViewModel();
				product = dummyProduct;
			}
			else
			{
				product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetLastActiveProducts(1, Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
			}
		}
		else if (Pageview.Item["DummyProduct"] == null)
		{
			productViewModelFound = true;
			product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetLastActiveProducts(1, Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
		}
	}

	//Source type
	string sourceType = Model.Item.GetRawValueString("RelationType", "trending");
	IList<string> relateFromProductIds = new List<string> { };
	IList<string> relateFromGroupIds = new List<string> { };

	//--- PRODUCTS ---
	List<string> productsToRelateTo = Model.Item.GetString("RelateTo").Split(',').ToList();
	if (productsToRelateTo != null)
	{
		if (sourceType == "variants" || sourceType == "frequently" || sourceType == "selected")
		{
			foreach (var productSelection in productsToRelateTo)
			{
				var productId = productSelection.Length > 2 ? productSelection.Remove(0, 2) : productSelection;
				relateFromProductIds.Add(productId);
			}
		}
	}

	//--- GROUPS ---
	var groupsToRelateTo = Model.Item.GetString("RelateTo").Split(',').ToList();
	if (groupsToRelateTo != null)
	{
		if (sourceType == "most-sold" || sourceType == "trending" || sourceType == "latest")
		{
			foreach (var fromGroup in groupsToRelateTo)
			{
				var groupId = fromGroup.Length > 2 ? fromGroup.Remove(0, 2) : fromGroup;
				relateFromGroupIds.Add(groupId);
			}
		}
	}

	//Create group id collection and products id collection strings
	string productIds = relateFromProductIds.Count > 0 ? string.Join(",", relateFromProductIds) : "";
	string groupIds = relateFromGroupIds.Count > 0 ? string.Join(",", relateFromGroupIds) : "";

	if (productViewModelFound && Model.Item.GetBoolean("RelateToTheContextProduct"))
	{
		if (sourceType == "variants" || sourceType == "frequently" || sourceType == "selected")
		{
			productIds = product.Id;
		}
		else
		{
			groupIds = product.PrimaryOrDefaultGroup.Id;
		}
	}

	//Set the parameters to the url
	string linkParameters = "";
	linkParameters += !string.IsNullOrEmpty(groupIds) ? "&GroupId=" + groupIds : "";
	linkParameters += !string.IsNullOrEmpty(productIds) ? "&MainProductId=" + productIds : "";

	url += linkParameters;
}

@*Container element for the request*@
@if (productIds.Any() || groupIds.Any())
{
	<form method="post" action="@url" id="ComponentSliderProductsForm_@Model.ID" data-response-target-element="ComponentSliderProducts_@Model.ID" data-preloader="inline" data-update-url="false" class="item_@Model.Item.SystemName.ToLower()">
		<input type="hidden" name="ParagraphId" value="@Model.ID" />
	</form>

	<script type="module" src="~/Files/Templates/Designs/Swift/Assets/js/swiffy-slider.js"></script>
	<script type="module">
		swift.AssetLoader.Load('Files/Templates/Designs/Swift/Assets/css/swiffy-slider.min.css', 'css');
	</script>

	<div class="w-100 h-100">
		<div id="ComponentSliderProducts_@Model.ID" class="h-100" style="min-height: 345px"></div>
	</div>

	<script type="module">
		swift.PageUpdater.Update(document.querySelector("#ComponentSliderProductsForm_@Model.ID"));
	</script>
}
else if (Pageview.IsVisualEditorMode == true)
{
	<div class="alert alert-dark" role="alert">
		<span>@Translate("Product component slider: The slider will be rendered here, if there is anything to show")</span>
	</div>
}
