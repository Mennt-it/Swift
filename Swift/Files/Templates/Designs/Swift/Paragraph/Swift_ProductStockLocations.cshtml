@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	ProductViewModel product = new ProductViewModel();

	ProductViewModelSettings productSetting = new ProductViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	else if (Pageview.Item["DummyProduct"] != null)
	{

		string dummyProductId = "";
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();
		if (productList.Products != null)
		{
			foreach (var p in productList.Products) { dummyProductId = p.Id; }
			ProductViewModel dummyProduct = dummyProductId != "" ? ViewModelFactory.CreateView(productSetting, dummyProductId) : new ProductViewModel();
			product = dummyProduct;
		}
		else
		{
			product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetLastActiveProducts(1, Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
		}
	}
	else if (Pageview.Item["DummyProduct"] == null)
	{
		product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetLastActiveProducts(1, Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
	}

	string horizontalAlign = Model.Item.GetRawValueString("HorizontalAlignment", "");
	horizontalAlign = horizontalAlign == "center" ? "text-center" : horizontalAlign;
	horizontalAlign = horizontalAlign == "end" ? "text-end" : horizontalAlign;
}


@if (product.Id != null)
{
	int shopsCount = product.StockUnits.Count();
	string modalId = $"stockLocationModel_{Model.ID}_{product.Id}";
	modalId += !string.IsNullOrEmpty(product.VariantId) ? $"_{product.VariantId}" : "";

	<div class="@horizontalAlign d-flex gap-1 item_@Model.Item.SystemName.ToLower()">
		@if (shopsCount > 0)
		{
			string inStockText = $"{Translate("In stock in")}";
			string inStockShopsText = $"{shopsCount} {Translate("shops")}";

			<span>
				@inStockText
			</span>

			<button type="button" class="btn btn-link p-0" data-bs-toggle="modal" data-bs-target="#@modalId">
				@inStockShopsText
			</button>
		}
		else
		{
			<span>@Translate("Not currently in stock in any shops")</span>
		}
	</div>

	<div class="modal fade" id="@modalId" tabindex="-1" aria-labelledby="@(modalId)Label" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header">
					<h1 class="modal-title fs-5" id="@(modalId)Label">@Translate("Stock information")</h1>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body p-0">
					<ul class="list-group">
						@foreach (var unit in product.StockUnits)
						{
							string stockLocationName = unit.StockLocationName;
							stockLocationName += unit.StockLocationAddress != null ? $" - {unit.StockLocationAddress.Address}, {unit.StockLocationAddress.Zip} {unit.StockLocationAddress.City}" : "";

							<li class="list-group-item" style="background-color: transparent">
								<div>@stockLocationName</div>
								@if (unit.StockLevel > 0)
								{
									<div class="small text-success">@Translate("In stock"): @unit.StockLevel</div>
								}
								else
								{
									<div class="small text-danger">@Translate("Out of stock")</div>
								}
							</li>
						}
					</ul>
				</div>
				<div class="modal-footer">

				</div>
			</div>
		</div>
	</div>
}
else if (Pageview.IsVisualEditorMode)
{
	<div class="alert alert-info">@Translate("No products available")</div>
}
