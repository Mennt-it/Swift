@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend

@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	@* Collect the images *@
	var selectedImageCategories = Model.Item.GetList("ImageAssets").SelectedValues;
	bool showOnlyPrimaryImage = Model.Item.GetBoolean("ShowOnlyPrimaryImage");
	bool includeImagePatternImages = Model.Item.GetBoolean("ImagePatternImages"); 
	
	@* Needed image data collection to support both DefaultImage, ImagePatterns and Image Assets *@
	IEnumerable<MediaViewModel> assetsImages = product.AssetCategories.Where(x => selectedImageCategories.Contains(x.SystemName)).SelectMany(x => x.Assets);
	IEnumerable<MediaViewModel> images = new MediaViewModel[]{};
	images = includeImagePatternImages && assetsImages.Count() == 0 ? images.Append(product.DefaultImage) : images;
	images = images.Union(assetsImages);
	images = includeImagePatternImages ? images.Union(product.ImagePatternImages) : images;

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
	ratio = ratio != "0" ? ratio : "";
	string mainRatioCssClass = ratio != "" ? "ratio" : "";
	string mainRatioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";
	string mainImagePath = "";

	int totalImages = 0;
	if (showOnlyPrimaryImage == false) {
		foreach (MediaViewModel asset in images) {
			var assetName = asset.Value.ToLower();
			if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
				if (totalImages == 0) {
					mainImagePath = asset.Value;
				}
				totalImages++;
			}
		}
	}

	if((totalImages == 0 && product.DefaultImage != null && selectedImageCategories.Count() == 0) || (showOnlyPrimaryImage == true && product.DefaultImage != null))
	{
		images = new List<MediaViewModel>(){ product.DefaultImage };
		totalImages = 1;
		mainImagePath = product.DefaultImage.Value;
	}

	string mainImageColClass = totalImages > 1 ? "col-10" : "col-12";

	string padding = "";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	if (theme != "")
	{
		padding = "p-4";
	}
}

@* Get images from selected categories or get all images *@
@if (totalImages != 0)
{
	@* Show image + thumbs on large screens *@
	<div class="d-none d-lg-block @(padding)@(theme) h-100">
		<div class="grid gap-3">
			@* Main image *@
			<div class="g-col-12">
				<div class="">
					<a href="@mainImagePath" id="FullImageToggle_@Model.ID" class="btn @mainRatioCssClass" style="@(mainRatioVariable);" data-bs-toggle="modal" data-bs-target="#ImageModal_@Model.ID">
						<div class="d-flex align-items-center justify-content-center">
							@{
								var parms = new Dictionary<string, object>();
								parms.Add("id", "MainImage_" +  Model.ID);
								parms.Add("cssClass", "mh-100 mw-100");
								parms.Add("itemprop", "image");
								parms.Add("columns", Model.GridRowColumnCount);
							}
							@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = mainImagePath }, parms)
						</div>
					</a>
				</div>
			</div>

			@* Thumbnails *@
			@if (totalImages > 1)
			{
				<div class="g-col-12">
					<div id="LargeScreenImages_@Model.ID">
						@{ 
							int thumbNumber = 0;

							foreach (MediaViewModel asset in images) {
								var assetName = asset.Value.ToLower();
								if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
									@RenderThumbnail(asset, product, thumbNumber)

									thumbNumber++;
								}
							}
						}
					</div>
				</div>
			}
		</div>

		@* Tiny slider *@
		<script type="module">
			if (document.querySelector('#LargeScreenImages_@Model.ID')) {
				var slider = tns({
					container: '#LargeScreenImages_@Model.ID',
					items: 5.5,
					gutter: 8,
					axis: 'horizontal',
					arrowKeys: true,
					nav: false,
					loop: false,
					controls: false,
					mouseDrag: true,
					lazyload: true,
					preventScrollOnTouch: 'force'
				});
			}
		</script>
	</div>

	@* Modal *@
	<div class="modal fade" id="ImageModal_@Model.ID" tabindex="-1" aria-labelledby="productDetailsImageModalTitle" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered modal-xl">
			<div class="modal-content">
				<div class="modal-header visually-hidden">
					<h5 class="modal-title" id="productDetailsImageModalTitle">@Translate("Full image")</h5>
				</div>
				<div class="modal-body">
					<div id="FullImages_@Model.ID" class="d-flex align-items-center justify-content-center">
						@foreach (MediaViewModel asset in images) {
							var assetName = asset.Value.ToLower(); 
							if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
								string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;
								@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = imagePath }, parms)
							}
						}
					</div>
					<script type="module">
						var sliderFull_@(Model.ID) = tns({
							container: '#FullImages_@Model.ID',
							items: 1,
							gutter: 16,
							mode: 'carousel',
							navPosition: 'bottom',
							mouseDrag: true,
							touch: true,
							arrowKeys: true,
							nav: false,
							loop: false,
							speed: 10,
							controls: false,
							preventScrollOnTouch: 'force'
						});

						if (document.getElementById('ImageModal_@Model.ID')) {
							document.getElementById('ImageModal_@Model.ID').addEventListener('show.bs.modal', function (event) {
								var slideNumber = event.relatedTarget.getAttribute("data-image-number");
								sliderFull_@(Model.ID).goTo(slideNumber);
							});
						}
					</script>
				</div>
			</div>
		</div>
	</div>

	@* Show the slider on small screens *@
	<div class="d-block d-lg-none mb-3 mx-n3 mx-lg-0">
		<div id="SmallScreenImages_@Model.ID">
			@{ 
				int number = 0;

				foreach (MediaViewModel asset in images) {
					var assetName = asset.Value.ToLower();
					if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
						@RenderImage(asset, product, number, "small")

						number++;
					}
				}
			}
		</div>

		@* Tiny slider *@
		<script type="module">
			var slider = tns({
				container: '#SmallScreenImages_@Model.ID',
				items: 1.2,
				gutter: 8,
				mode: 'carousel',
				navPosition: 'bottom',
				mouseDrag: true,
				touch: true,
				arrowKeys: true,
				nav: true,
				loop: false,
				rewind: false,
				controls: false,
				preventScrollOnTouch: 'force'
			});
		</script>
	</div>
}

@helper RenderThumbnail(MediaViewModel asset, ProductViewModel product, int imageNumber) {
	string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;

	<a href="@imagePath" class="p-0 border ratio ratio-16x9 me-2" onclick="event.preventDefault(); document.querySelector('#MainImage_@Model.ID').srcset = this.querySelector('img').srcset; document.querySelector('#FullImageToggle_@Model.ID').setAttribute('data-image-number', '@imageNumber')">
		<span class="btn p-0 d-flex align-items-center justify-content-center">
			@{
				var parms = new Dictionary<string, object>();
				parms.Add("cssClass", "mh-100 mw-100");
				parms.Add("style", "cursor: pointer");
				parms.Add("columns", Model.GridRowColumnCount);
			}
			@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = imagePath }, parms)
		</span>
	</a>
}

@helper RenderImage(MediaViewModel asset, ProductViewModel product, int number, string screenSize = "large") {
	string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
	ratio = ratio != "0" ? ratio : "";
	string ratioCssClass = ratio != "" && ratio != "fill" ? " ratio" : "";
	string ratioVariable = ratio != "" && ratio != "fill" ? "--bs-aspect-ratio: " + ratio : "";
	ratioCssClass = ratio != "" && ratio == "fill" && screenSize == "small" ? " ratio" : ratioCssClass;
	ratioVariable = ratio != "" && ratio == "fill" && screenSize == "small" ? "--bs-aspect-ratio: 66%" : ratioVariable;

	<a href="@imagePath" class="d-block @ratioCssClass" style="@(ratioVariable); cursor: pointer;" data-bs-toggle="modal" data-bs-target="#ImageModal_@Model.ID" data-image-number="@number">
		<div class="d-flex align-items-center justify-content-center">
			@{
				var parms = new Dictionary<string, object>();
				parms.Add("cssClass", "mh-100 mw-100");
				parms.Add("dataImageNumber", number);
				parms.Add("columns", Model.GridRowColumnCount);
			}
			@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = imagePath }, parms)
		</div>
	</a>
}
