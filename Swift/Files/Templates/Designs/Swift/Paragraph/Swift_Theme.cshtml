@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string themeName = !string.IsNullOrWhiteSpace(Model.Item.GetString("Name")) ? Model.Item.GetString("Name") : "Default";
	string themeClassName = !string.IsNullOrWhiteSpace(Model.Item.GetString("CSSClassName")) ? Model.Item.GetString("CSSClassName").Replace(" ", "").Trim().ToLower() : "";

	string imagePath = "files/templates/designs/r4/assets/images/gray.jpg";

	string foregroundColor = Model.Item.GetString("ForegroundColor") != null ? Model.Item.GetString("ForegroundColor") : "";
	foregroundColor = foregroundColor == "" ? "none" : foregroundColor;
	string backgroundColor = Model.Item.GetString("BackgroundColor") != null ? Model.Item.GetString("BackgroundColor") : "";
	backgroundColor = backgroundColor == "" ? "none" : backgroundColor;
	string borderColor = Model.Item.GetString("BorderColor") != null ? Model.Item.GetString("BorderColor") : "";
	borderColor = borderColor == "" ? "none" : borderColor;

	string buttonPrimaryBackgroundColor = Model.Item.GetString("ButtonPrimaryBackgroundColor") != null ? Model.Item.GetString("ButtonPrimaryBackgroundColor") : "";
	string buttonPrimaryForegroundColor = Model.Item.GetString("ButtonPrimaryForegroundColor") != null ? Model.Item.GetString("ButtonPrimaryForegroundColor") : "";
	string buttonPrimaryBorderColor = Model.Item.GetString("ButtonPrimaryBorderColor") != null ? Model.Item.GetString("ButtonPrimaryBorderColor") : "";
	string buttonPrimaryHoverBackgroundColor = Model.Item.GetString("ButtonPrimaryHoverBackgroundColor") != null ? Model.Item.GetString("ButtonPrimaryHoverBackgroundColor") : "";
	string buttonPrimaryHoverForegroundColor = Model.Item.GetString("ButtonPrimaryHoverForegroundColor") != null ? Model.Item.GetString("ButtonPrimaryHoverForegroundColor") : "";
	string buttonPrimaryHoverBorderColor = Model.Item.GetString("ButtonPrimaryHoverBorderColor") != null ? Model.Item.GetString("ButtonPrimaryHoverBorderColor") : "";

	string buttonSecondaryBackgroundColor = Model.Item.GetString("ButtonSecondaryBackgroundColor") != null ? Model.Item.GetString("ButtonSecondaryBackgroundColor") : "";
	string buttonSecondaryForegroundColor = Model.Item.GetString("ButtonSecondaryForegroundColor") != null ? Model.Item.GetString("ButtonSecondaryForegroundColor") : "";
	string buttonSecondaryBorderColor = Model.Item.GetString("ButtonSecondaryBorderColor") != null ? Model.Item.GetString("ButtonSecondaryBorderColor") : "";
	string buttonSecondaryHoverBackgroundColor = Model.Item.GetString("ButtonSecondaryHoverBackgroundColor") != null ? Model.Item.GetString("ButtonSecondaryHoverBackgroundColor") : "";
	string buttonSecondaryHoverForegroundColor = Model.Item.GetString("ButtonSecondaryHoverForegroundColor") != null ? Model.Item.GetString("ButtonSecondaryHoverForegroundColor") : "";
	string buttonSecondaryHoverBorderColor = Model.Item.GetString("ButtonSecondaryHoverBorderColor") != null ? Model.Item.GetString("ButtonSecondaryHoverBorderColor") : "";

	string accessibilityOutlineColor = Model.Item.GetString("OutlineColor") != null ? Model.Item.GetString("OutlineColor") : "";

	if (!string.IsNullOrEmpty(themeClassName)) {
		var sb = new System.Text.StringBuilder();

		sb.AppendLine("." + themeClassName + "{");
		if (!string.IsNullOrEmpty(foregroundColor))
		{
			sb.AppendLine($"--swift-foreground-color: {foregroundColor};");
		}
		if (!string.IsNullOrEmpty(backgroundColor))
		{
			sb.AppendLine($"--swift-background-color: {backgroundColor};");
		}
		if (!string.IsNullOrEmpty(borderColor))
		{
			sb.AppendLine($"--swift-border-color: {borderColor};");
		}

		if (!string.IsNullOrEmpty(buttonPrimaryBackgroundColor))
		{
			sb.AppendLine($"--swift-button-primary-background-color: {buttonPrimaryBackgroundColor};");
		}
		if (!string.IsNullOrEmpty(buttonPrimaryForegroundColor))
		{
			sb.AppendLine($"--swift-button-primary-foreground-color: {buttonPrimaryForegroundColor};");
		}
		if (!string.IsNullOrEmpty(buttonPrimaryBorderColor))
		{
			sb.AppendLine($"--swift-button-primary-border-color: {buttonPrimaryBorderColor};");
		}
		if (!string.IsNullOrEmpty(buttonPrimaryHoverBackgroundColor))
		{
			sb.AppendLine($"--swift-button-primary-hover-background-color: {buttonPrimaryHoverBackgroundColor};");
		}
		if (!string.IsNullOrEmpty(buttonPrimaryHoverForegroundColor))
		{
			sb.AppendLine($"--swift-button-primary-hover-foreground-color: {buttonPrimaryHoverForegroundColor};");
		}
		if (!string.IsNullOrEmpty(buttonPrimaryHoverBorderColor))
		{
			sb.AppendLine($"--swift-button-primary-hover-border-color: {buttonPrimaryHoverBorderColor};");
		}

		if (!string.IsNullOrEmpty(buttonSecondaryBackgroundColor))
		{
			sb.AppendLine($"--swift-button-secondary-background-color: {buttonSecondaryBackgroundColor};");
		}
		if (!string.IsNullOrEmpty(buttonSecondaryForegroundColor))
		{
			sb.AppendLine($"--swift-button-secondary-foreground-color: {buttonSecondaryForegroundColor};");
		}
		if (!string.IsNullOrEmpty(buttonSecondaryBorderColor))
		{
			sb.AppendLine($"--swift-button-secondary-border-color: {buttonSecondaryBorderColor};");
		}
		if (!string.IsNullOrEmpty(buttonSecondaryHoverBackgroundColor))
		{
			sb.AppendLine($"--swift-button-secondary-hover-background-color: {buttonSecondaryHoverBackgroundColor};");
		}
		if (!string.IsNullOrEmpty(buttonSecondaryHoverForegroundColor))
		{
			sb.AppendLine($"--swift-button-secondary-hover-foreground-color: {buttonSecondaryHoverForegroundColor};");
		}
		if (!string.IsNullOrEmpty(buttonSecondaryHoverBorderColor))
		{
			sb.AppendLine($"--swift-button-secondary-hover-border-color: {buttonSecondaryHoverBorderColor};");
		}
		if (!string.IsNullOrEmpty(accessibilityOutlineColor))
		{
			sb.AppendLine($"--swift-a11y-outline-color: {accessibilityOutlineColor};");
		}
		sb.AppendLine("}");

		Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(sb.ToString() + Environment.NewLine, Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_theme_styles_{Dynamicweb.Services.Pages.GetPage(Model.PageID).AreaId}.tmp"), true);
	}
}

@if (themeClassName != "") {
	string backgroundImage = "";
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	if (backgroundColor == "none" || backgroundColor == "") { 
		backgroundImage = "style=\"background-image: url('/Admin/Public/GetImage.ashx?image=" + imagePath + "&width=420&Format=WebP&Quality=70')\"";
	}

	<div class="col-12 col-lg-4">
		<div class="theme-option theme @themeClassName" @backgroundImage>
			<div class="mb-2 pb-1 border-bottom d-flex align-items-center">
				<span class="icon-2 me-2">
					@ReadFile(iconPath+"sun.svg")
				</span>
				<span class="text-uppercase">@themeName</span>
			</div>
			<div>
				<button class="btn btn-sm btn-primary me-1">Primary</button>
				<button class="btn btn-sm btn-secondary">Secondary</button>
			</div>
		</div>
	</div>
	<div class="col-12 col-lg-8 mb-4 mb-lg-0">
		<div class="row fs-7">
			<div class="col-12 col-lg-3">
				<table class="table table-borderless table-sm w-100">
					<thead>
						<tr>
							<th colspan="2" class="fw-bold">@Translate("Base")</th>
						</tr>
					</thead>
					<tr>
						<td>@Translate("Foreground")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@foregroundColor');">@foregroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Background")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@backgroundColor');">@backgroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Border")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@borderColor');">@borderColor</a></td>
					</tr>
				</table>
			</div>
			<div class="col-12 col-lg-3">
				<table class="table table-borderless table-sm w-100">
					<thead>
						<tr>
							<th colspan="2" class="fw-bold">@Translate("Primary button")</th>
						</tr>
					</thead>
					<tr>
						<td>@Translate("Foreground")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryForegroundColor');">@buttonPrimaryForegroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Background")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryBackgroundColor');">@buttonPrimaryBackgroundColor</a></td>
					</tr>
					@if (!string.IsNullOrEmpty(buttonPrimaryBorderColor))
					{
						<tr>
							<td>@Translate("Border")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryBorderColor');">@buttonPrimaryBorderColor</a></td>
						</tr>
					}
					@if (!string.IsNullOrEmpty(buttonPrimaryHoverForegroundColor))
					{
						<tr>
							<td>@Translate("Hover foreg.")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryHoverForegroundColor');">@buttonPrimaryHoverForegroundColor</a></td>
						</tr>
					}
					@if (!string.IsNullOrEmpty(buttonPrimaryHoverBackgroundColor))
					{
						<tr>
							<td>@Translate("Hover backg.")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryHoverBackgroundColor');">@buttonPrimaryHoverBackgroundColor</a></td>
						</tr>
					}
					@if (!string.IsNullOrEmpty(buttonPrimaryHoverBorderColor))
					{
						<tr>
							<td>@Translate("Hover border")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonPrimaryHoverBorderColor');">@buttonPrimaryHoverBorderColor</a></td>
						</tr>
					}
				</table>
			</div>
			<div class="col-12 col-lg-3">
				<table class="table table-borderless table-sm w-100">
					<thead>
						<tr>
							<th colspan="2" class="fw-bold">@Translate("Secondary button")</th>
						</tr>
					</thead>
					<tr>
						<td>@Translate("Foreground")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryForegroundColor');">@buttonSecondaryForegroundColor</a></td>
					</tr>
					<tr>
						<td>@Translate("Background")</td>
						<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryBackgroundColor');">@buttonSecondaryBackgroundColor</a></td>
					</tr>
					@if (!string.IsNullOrEmpty(buttonSecondaryBorderColor))
					{
						<tr>
							<td>@Translate("Border")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryBorderColor');">@buttonSecondaryBorderColor</a></td>
						</tr>
					}
					@if (!string.IsNullOrEmpty(buttonSecondaryHoverForegroundColor))
					{
						<tr>
							<td>@Translate("Hover foreg.")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryHoverForegroundColor');">@buttonSecondaryHoverForegroundColor</a></td>
						</tr>
					}
					@if (!string.IsNullOrEmpty(buttonSecondaryHoverBackgroundColor))
					{
						<tr>
							<td>@Translate("Hover backg.")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryHoverBackgroundColor');">@buttonSecondaryHoverBackgroundColor</a></td>
						</tr>
					}
					@if (!string.IsNullOrEmpty(buttonSecondaryHoverBorderColor))
					{
						<tr>
							<td>@Translate("Hover border")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@buttonSecondaryHoverBorderColor');">@buttonSecondaryHoverBorderColor</a></td>
						</tr>
					}
					@if (!string.IsNullOrEmpty(accessibilityOutlineColor))
					{
						<tr>
							<td>@Translate("Focus outline color")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@accessibilityOutlineColor');">@accessibilityOutlineColor</a></td>
						</tr>
					}
				</table>
			</div>
			<div class="col-12 col-lg-3">
				<table class="table table-borderless table-sm w-100">
					<tr>
						<td class="fw-bold">@Translate("Implementation")</td>
					</tr>
					<tr>
						<td>
							@{ 
								string implementation = "<div class=\"theme " + themeClassName + "\"></div>";
							}
							<div class="text-muted">
								<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@themeClassName');">
									@Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(implementation)
								</a>
							</div>
						</td>
					</tr>
				</table>
			</div>
		</div>
	</div>
}

<script>
	function fallbackCopyTextToClipboard(text) {
	  var textArea = document.createElement("textarea");
	  textArea.value = text;
  
	  // Avoid scrolling to bottom
	  textArea.style.top = "0";
	  textArea.style.left = "0";
	  textArea.style.position = "fixed";

	  document.body.appendChild(textArea);
	  textArea.focus();
	  textArea.select();

	  try {
		var successful = document.execCommand('copy');
		var msg = successful ? 'successful' : 'unsuccessful';
		console.log('Fallback: Copying text command was ' + msg);
	  } catch (err) {
		console.error('Fallback: Oops, unable to copy', err);
	  }

	  document.body.removeChild(textArea);
	}
	function copyTextToClipboard(text) {
	  if (!navigator.clipboard) {
		fallbackCopyTextToClipboard(text);
		return;
	  }
	  navigator.clipboard.writeText(text).then(function() {
		console.log('Async: Copying to clipboard was successful!');
	  }, function(err) {
		console.error('Async: Could not copy text: ', err);
	  });
	}
</script>
