@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string eyebrow = Model.Item.GetString("Eyebrow", string.Empty);
	string eyebrowHeadingLevel = Model.Item.GetString("EyebrowHeadingLevel", "h5");
	string eyebrowFontSize = Model.Item.GetRawValueString("EyebrowFontSize", "h5");
	string eyebrowColor = Model.Item.GetString("EyebrowColor", "text-inherit");
	string eyebrowCssClass = Model.Item.GetString("EyebrowCssClass", string.Empty);

	string title = Model.Item.GetString("Title", string.Empty);
	string titleHeadingLevel = Model.Item.GetString("TitleHeadingLevel", "h2");
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h2");
	string titleColor = Model.Item.GetString("TitleColor", "text-inherit");
	string titleCssClass = Model.Item.GetString("TitleCssClass", string.Empty);

	string subtitle = Model.Item.GetString("Subtitle", string.Empty);
	string subtitleHeadingLevel = Model.Item.GetString("SubtitleHeadingLevel", "p");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
	string subtitleColor = Model.Item.GetString("SubtitleColor", "text-inherit");
	string subtitleCssClass = Model.Item.GetString("SubtitleCssClass", string.Empty);

	string text = Model.Item.GetString("Text", string.Empty);
	string textFontSize = Model.Item.GetRawValueString("TextFontSize", "fs-6");
	string textColor = Model.Item.GetString("TextColor", "text-inherit");
	string textCssClass = Model.Item.GetString("TextCssClass", string.Empty);

	string alignment = Model.Item.GetRawValueString("Alignment", "align-items-center justify-content-center");
	string textAlignment = Model.Item.GetRawValueString("TextAlignment", "text-start");
	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	//Button 1
	var button1Link = Model.Item.GetLink("Button1Link");
	var button1Label = Model.Item.GetString("Button1Label", string.Empty);
	var button1Icon = Model.Item.GetFile("Button1Icon");
	var button1IconPosition = Model.Item.GetRawValueString("Button1IconPosition", "right");
	var button1Style = Model.Item.GetRawValueString("Button1Style", "btn-primary");

	//Button 2
	var button2Link = Model.Item.GetLink("Button2Link");
	var button2Label = Model.Item.GetString("Button2Label", string.Empty);
	var button2Icon = Model.Item.GetFile("Button2Icon");
	var button2IconPosition = Model.Item.GetRawValueString("Button2IconPosition", "right");
	var button2Style = Model.Item.GetRawValueString("Button2Style", "btn-primary");
}

<div class="h-100 d-flex position-relative @(alignment) @(theme) item_@Model.Item.SystemName.ToLower()">
	<div class="d-inline-flex flex-column @(textAlignment)@maxWidth">

		@if (!string.IsNullOrEmpty(eyebrow))
		{
			@RenderContent(eyebrow, eyebrowHeadingLevel, eyebrowFontSize, eyebrowColor, eyebrowCssClass)
		}

		@if (!string.IsNullOrEmpty(title))
		{
			@RenderContent(title, titleHeadingLevel, titleFontSize, titleColor, titleCssClass)
		}

		@if (!string.IsNullOrEmpty(subtitle))
		{
			@RenderContent(subtitle, "p", subtitleFontSize, subtitleColor, subtitleCssClass)
		}

		@if (!string.IsNullOrEmpty(text))
		{
			@RenderContent(text, "div", textFontSize, textColor, $"mb-0-last-child {textCssClass}")
		}

		@if (button1Link is object || button2Link is object)
		{
			<div class="d-flex flex-wrap @(alignment) gap-3">
				@if (button1Link is object && !string.IsNullOrEmpty(button1Label))
				{
					@RenderButton(button1Link, button1Label, button1Style, button1Icon, button1IconPosition)
				}

				@if (button2Link is object && !string.IsNullOrEmpty(button1Label))
				{
					@RenderButton(button2Link, button2Label, button2Style, button2Icon, button2IconPosition)
				}
			</div>
		}

	</div>
</div>

@helper RenderContent(string content, string heading, string fontSize, string color, string cssClass)
{
	var tagStart = $"<{heading} class=\"{fontSize} {color} {cssClass}\">";
	var tagEnd = $"</{heading}>";

	@tagStart
	@content
	@tagEnd
}

@helper RenderButton(Dynamicweb.Frontend.LinkViewModel link, string label, string style, Dynamicweb.Frontend.FileViewModel icon, string iconPosition)
{
	string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : string.Empty;
	string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : string.Empty;

	<a href="@link.Url" @target @rel class="btn @(style)">
		@if (icon is object)
		{
			<span class="d-flex align-items-center gap-2 @(iconPosition)">
				<span>@label</span>
				@RenderIcon(icon)
			</span>
		}
		else
		{
			<span>@label</span>
		}
	</a>
}

@helper RenderIcon(Dynamicweb.Frontend.FileViewModel icon)
{
	if (System.IO.Path.GetExtension(icon.Path).ToLower() == ".svg")
	{
		if (!icon.Path.ToLower().Contains("none") && icon.Path != string.Empty)
        {
			<div class="icon-auto">
				@ReadFile(icon.Path)
			</div>
        }
	}
}
