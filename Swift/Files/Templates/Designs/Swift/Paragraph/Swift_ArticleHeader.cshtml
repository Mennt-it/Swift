@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string infoCardBackground = string.IsNullOrEmpty(theme) ? "background-color:var(--swift-background-color); " : string.Empty;
	string layout = Model.Item.GetRawValueString("Layout", "CardCenterBottom");
	bool hideCoverImage = Model.Item?.GetBoolean("HideCoverImage") ?? false;
	bool hideTitle = Model.Item?.GetBoolean("HideTitle") ?? false;
	bool hideSummary = Model.Item?.GetBoolean("HideSummary") ?? false;
	bool hideAuthor = Model.Item?.GetBoolean("HideAuthor") ?? false;
	bool hidePublishedDate = Model.Item?.GetBoolean("HidePublishedDate") ?? false;
	string ratio = "aspect-ratio:32/9;";
}

@switch (layout)
{
	case "InfoAboveImageAlignedCenter":
		if (Pageview.Item["CoverImage"] != null && !hideCoverImage || Pageview.Item["Title"] != null && !hideTitle || Pageview.Item["Summary"] != null && !hideSummary)
		{
			<div class="position-relative@(theme)" style="@ratio">
				@if (Pageview.Item["CoverImage"] != null && !hideCoverImage)
				{
					@RenderImage()
				}
				@if (Pageview.Item["Title"] != null && !hideTitle || Pageview.Item["Summary"] != null && !hideSummary)
				{
					<div class="container-xl d-flex flex-column gap-3 align-items-center justify-content-center text-center position-absolute top-0 bottom-0 end-0 start-0">
						@RenderTitle()
						@RenderSummary()
					</div>
				}
			</div>
		}
		if (Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
		{
			<div class="d-flex align-items-center justify-content-center gap-3 py-3">
				@RenderAuthor()
				@RenderPublishedDate()
			</div>
		}
		break;

	case "InfoCardAboveImageAlignedBottom":

		if (Pageview.Item["CoverImage"] != null && !hideCoverImage)
		{
			<div class="mb-n5" style="@ratio">
				@RenderImage()
			</div>
		}
		if (Pageview.Item["Title"] != null && !hideTitle || Pageview.Item["Summary"] != null && !hideSummary || Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
		{
			<div class="position-relative d-flex flex-column align-items-center mx-3">
				<div class="d-flex flex-column gap-3 shadow text-center w-100 p-3 p-md-4@(theme)" style="@(infoCardBackground)max-width:40rem;">
					@RenderTitle()
					@RenderSummary()
					@if (Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
					{
						<div class="d-flex align-items-center justify-content-center gap-3">
							@RenderAuthor()
							@RenderPublishedDate()
						</div>
					}
				</div>
			</div>
		}
		break;

	case "InfoTopAlignedLeftImageBottom":
		if (Pageview.Item["CoverImage"] != null && !hideCoverImage || Pageview.Item["Title"] != null && !hideTitle || Pageview.Item["Summary"] != null && !hideSummary || Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
		{
			<div class="grid grid-1@(theme)">
				@RenderTitle()
				@RenderSummary()
				@if (Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
				{
					<div class="d-flex align-items-center gap-3">
						@RenderAuthor()
						@RenderPublishedDate()
					</div>
				}
				@if (Pageview.Item["CoverImage"] != null && !hideCoverImage)
				{
					<div style="@ratio">
						@RenderImage()
					</div>
				}
			</div>
		}
		break;

	case "InfoBottomAlignedLeftImageTop":
		if (Pageview.Item["CoverImage"] != null && !hideCoverImage || Pageview.Item["Title"] != null && !hideTitle || Pageview.Item["Summary"] != null && !hideSummary || Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
		{
			<div class="grid grid-1@(theme)">
				@if (Pageview.Item["CoverImage"] != null && !hideCoverImage)
				{
					<div style="@ratio">
						@RenderImage()
					</div>
				}
				@RenderTitle()
				@RenderSummary()
				@if (Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
				{
					<div class="d-flex align-items-center gap-3">
						@RenderAuthor()
						@RenderPublishedDate()
					</div>
				}
			</div>
		}
		break;

	case "InfoTopAlignedCenterImageBottom":
		if (Pageview.Item["CoverImage"] != null && !hideCoverImage || Pageview.Item["Title"] != null && !hideTitle || Pageview.Item["Summary"] != null && !hideSummary || Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
		{
			<div class="grid grid-1 text-center@(theme)">
				@RenderTitle()
				@RenderSummary()
				@if (Pageview.Item["Author"] != null && !hideAuthor || Pageview.Item["PublishedDate"] != null && !hidePublishedDate)
				{
					<div class="d-flex align-items-center justify-content-center gap-3">
						@RenderAuthor()
						@RenderPublishedDate()
					</div>
				}
				@if (Pageview.Item["CoverImage"] != null && !hideCoverImage)
				{
					<div style="@ratio">
						@RenderImage()
					</div>
				}
			</div>
		}
		break;
}

@helper RenderImage()
{
	var page = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
	Dynamicweb.Frontend.FileViewModel image = page.Item.GetFile("CoverImage");

	if (!string.IsNullOrEmpty(image.Path) && Model.Item.GetBoolean("HideCoverImage") == false)
	{
		int xPos = 100 - ((100 - image?.FocalX) / 2) ?? 0;
		int yPos = ((100 - image?.FocalY) / 2) ?? 0;
		string cssPosition = $"{xPos}% {yPos}%";

		var parms = new Dictionary<string, object>();
		parms.Add("cssClass", "h-100 w-100");
		parms.Add("columns", Model.GridRowColumnCount);
		parms.Add("alt", Pageview.Item["Title"]);

		@RenderPartial("Components/Image.cshtml", page.Item.GetFile("CoverImage") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
	}
}

@helper RenderTitle()
{
	string title = Pageview.Item["Title"] != null && Model.Item.GetBoolean("HideTitle") == false ? Pageview.Item["Title"].ToString() : string.Empty;

	if (!string.IsNullOrEmpty(title))
	{
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");

		<h1 class="@titleFontSize m-0">@title</h1>
	}
}

@helper RenderSummary()
{
	string summary = Pageview.Item["Summary"] != null && Model.Item.GetBoolean("HideSummary") == false ? Pageview.Item["Summary"].ToString() : string.Empty;

	if (!string.IsNullOrEmpty(summary))
	{
		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<h5 class="@subtitleFontSize m-0">@summary</h5>
	}
}

@helper RenderAuthor()
{
	var page = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);

	if (page.Item.GetInt32("Author") != 0 && Model.Item.GetBoolean("HideAuthor") == false)
	{
		var authorID = page.Item.GetInt32("Author");
		var author = Dynamicweb.Security.UserManagement.User.GetUserByID(authorID);
		string authorName = !string.IsNullOrEmpty(author.Name) ? authorName = author.Name : string.Empty;
		string authorImage = !string.IsNullOrEmpty(author.Image) ? author.Image : string.Empty;
		string authorImagePath = !string.IsNullOrEmpty(author.Image) ? $"/Admin/Public/GetImage.ashx?image={author.Image}&width=48&height=48&Crop=0&Quality=100&format=webp" : string.Empty;
		string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
		string horizontalAlignmentClass = Model.Item.GetRawValueString("Layout") == "InfoTopAlignedCenterImageBottom" ? " justify-content-center" : string.Empty;

		<div class="d-flex align-items-center@(horizontalAlignmentClass) gap-2">
			@if (!string.IsNullOrEmpty(authorImage))
			{
				<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" alt="@authorName" width="32" height="32" />
			}
			else
			{
				<div class="rounded-circle icon-1 p-2" style="background-color: var(--swift-foreground-color);color:var(--swift-background-color)">
					@ReadFile(iconPath + "user.svg")
				</div>
			}
			@if (!string.IsNullOrEmpty(authorName))
			{
				<div class="fs-7 opacity-85">@authorName</div>
			}
		</div>
	}
}

@helper RenderPublishedDate()
{
	var page = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
	string publishedDate = !string.IsNullOrEmpty(page.Item.GetString("PublishedDate")) && Model.Item.GetBoolean("HidePublishedDate") == false ? page.Item.GetDateTime("PublishedDate").ToShortDateString() : string.Empty;

	if (!string.IsNullOrEmpty(publishedDate))
	{
		<div class="fs-7 opacity-85">@publishedDate</div>
	}
}
