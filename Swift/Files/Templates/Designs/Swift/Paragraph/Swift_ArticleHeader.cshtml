@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string layout = Model.Item.GetRawValueString("Layout", "CardCenterBottom");
	string paddingClass = " pb-3 pb-md-4 pb-lg-5";

}

@switch (layout)
{
	case "InfoAboveImageAlignedCenter":
		<div class="position-relative@(theme)">
			@RenderImage()
			<div class="container-compressed d-flex flex-column gap-3 align-items-center justify-content-center text-center position-absolute top-0 bottom-0 end-0 start-0">
				@RenderTitle()
				@RenderSummary()
			</div>
		</div>
		<div class="d-flex align-items-center justify-content-center gap-3 py-3">
			@RenderAuthor()
			@RenderPublishedDate()
		</div>
		break;
	
	case "InfoCardAboveImageAlignedBottom":
		<div class="mb-n5"> 
			@RenderImage()
		</div>

		if (string.IsNullOrEmpty(theme))
		{
			theme = " bg-white text-dark";
		}

		<div class="position-relative grid grid-1 shadow p-3 p-md-4 mx-3 mx-md-4 mx-lg-5 mx-xl-6@(theme)">
			@RenderTitle()
			@RenderSummary()
			<div class="d-flex align-items-center justify-content-center gap-3 py-3">
				@RenderAuthor()
				@RenderPublishedDate()
			</div>
		</div>
		break;
	
	case "InfoCardAboveImageAlignedTop":

		if (string.IsNullOrEmpty(theme))
		{
			theme = " bg-white text-dark";
		}

		<div class="position-relative grid grid-1 shadow p-3 p-md-4 mx-3 mx-md-4 mx-lg-5 mx-xl-6@(theme)" style="z-index:1;">
			@RenderTitle()
			@RenderSummary()
			<div class="d-flex align-items-center justify-content-center gap-3 py-3">
				@RenderAuthor()
				@RenderPublishedDate()
			</div>
		</div>
		<div class="mt-n5"> 
			@RenderImage()
		</div>
		break;
	
	case "InfoTopAlignedLeftImageBottom":

		if(!string.IsNullOrEmpty(theme))
		{
			paddingClass = " p-3 p-md-4 p-lg-5";
		}

		<div class="grid grid-1@(paddingClass)@(theme)">
			@RenderTitle()
			@RenderSummary()
			<div class="d-flex align-items-center gap-3">
				@RenderAuthor()
				@RenderPublishedDate()
			</div>
		</div>
		@RenderImage()
		break;
	
	case "InfoTopAlignedCenterImageBottom":

		if (!string.IsNullOrEmpty(theme))
		{
			paddingClass = " p-3 p-md-4 p-lg-5";
		}

		<div class="grid grid-1 text-center@(paddingClass)@(theme)">
			@RenderTitle()
			@RenderSummary()
			<div class="d-flex align-items-center justify-content-center gap-3">
				@RenderAuthor()
				@RenderPublishedDate()
			</div>
		</div>
		@RenderImage()
		break;
}

@helper RenderImage()
{
	var page = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
	Dynamicweb.Frontend.FileViewModel image = page.Item.GetFile("CoverImage");

	if (!string.IsNullOrEmpty(image.Path))
	{
		image.Path = Dynamicweb.Context.Current.Server.UrlEncode(image.Path);
		image.Path = !string.IsNullOrEmpty(image.Path) ? $"/Admin/Public/GetImage.ashx?image={image.Path}&Width=960&Quality=75&format=webp" : string.Empty;
		int xPos = image?.FocalX ?? 50;
		int yPos = image?.FocalY ?? 50;
		string cssPosition = $"{xPos}% {yPos}%";

		<div class="ratio ratio-16x9">
			<img class="w-100 h-100" src="@image.Path" alt="@Pageview.Item["Title"]" loading="lazy" decoding="async" style="object-fit: cover;object-position:@cssPosition" />
		</div>
	}
}

@helper RenderTitle()
{
	string title = Pageview.Item["Title"] != null ? Pageview.Item["Title"].ToString() : string.Empty;

	if(!string.IsNullOrEmpty(title))
    {
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");

		<h1 class="@titleFontSize m-0">@title</h1>
    }
}

@helper RenderSummary()
{
	string summary = Pageview.Item["Summary"] != null ? Pageview.Item["Summary"].ToString() : string.Empty;

	if (!string.IsNullOrEmpty(summary))
    {
		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<h5 class="@subtitleFontSize m-0">@summary</h5>
	}
}


@helper RenderAuthor()
{
	var page = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);

	var authorID = page.Item.GetInt32("Author");
	var author = Dynamicweb.Security.UserManagement.User.GetUserByID(authorID);
	string authorName = !string.IsNullOrEmpty(author.Name) ? authorName = author.Name : string.Empty;
	string authorImage = !string.IsNullOrEmpty(author.Image) ? author.Image : string.Empty;
	
	if(!string.IsNullOrEmpty(authorName) || !string.IsNullOrEmpty(authorImage))
    {
		string authorImagePath = !string.IsNullOrEmpty(author.Image) ? $"/Admin/Public/GetImage.ashx?image={author.Image}&width=48&height=48&Crop=0&Quality=100&format=webp" : string.Empty;
		string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
		string horizontalAlignmentClass = Model.Item.GetRawValueString("Layout") == "InfoTopAlignedCenterImageBottom" ? " justify-content-center" : string.Empty;

		<div class="d-flex align-items-center@(horizontalAlignmentClass) gap-2">
			@if (!string.IsNullOrEmpty(authorImage))
			{
				<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" alt="@authorName" width="32" height="32" />
			}
			else
			{	
				<div class="rounded-circle icon-1 p-2" style="background-color: var(--swift-foreground-color);color:var(--swift-background-color)">
					@ReadFile(iconPath + "user.svg")
				</div>
			}
			@if (!string.IsNullOrEmpty(authorName))
			{
				<div class="fs-7 opacity-85">@authorName</div>
			}
		</div>
    }
	

}

@helper RenderPublishedDate()
{
	var page = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
	string publishedDate = page.Item.GetDateTime("PublishedDate") != null ? page.Item.GetDateTime("PublishedDate").ToShortDateString() : string.Empty;

	if (!string.IsNullOrEmpty(publishedDate))
    {
		<div class="fs-7 opacity-85">@publishedDate</div>
	}
}
