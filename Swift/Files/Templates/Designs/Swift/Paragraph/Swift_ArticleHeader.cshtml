@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string title = Pageview.Item["Title"] != null ? Pageview.Item["Title"].ToString() : string.Empty;
	string coverImage = Pageview.Item["CoverImage"] != null ? Pageview.Item["CoverImage"].ToString() : string.Empty;
	string summary = Pageview.Item["Summary"] != null ? Pageview.Item["Summary"].ToString() : string.Empty;
	string author = Pageview.Item["Author"] != null ? Pageview.Item["Author"].ToString() : string.Empty;
	string publishedDate = Pageview.Item["PublishedDate"] != null ? Pageview.Item["PublishedDate"].ToString() : string.Empty;
	
	string layout = Model.Item.GetRawValueString("Layout", "CardCenterBottom");
}

<div class="position-relative@(theme)">
	@switch(layout)
		{
			case "Poster":
			@RenderImage(coverImage, title)
			<div class="container-xl d-flex flex-column gap-3 align-items-center justify-content-center text-center position-absolute top-0 bottom-0 end-0 start-0">
				@RenderTitle(title)
				@RenderSummary(summary)
				@RenderAuthor(author)
				@RenderPublishedDate(publishedDate)
			</div>
			break;
			
		case "CardCenterBottom":
			@RenderImage(coverImage, title)
			<div class="p-5 mw-75ch bg-white text-dark container-xl d-flex flex-column gap-3 align-items-center justify-content-end text-center position-absolute end-0 start-0 translate-middle-y" style="z-index:1;">
				@RenderTitle(title)
				@RenderSummary(summary)
				@RenderAuthor(author)
				@RenderPublishedDate(publishedDate)
			</div>
			break;
		case "InfoTopImageBottom":
			@RenderImage(coverImage, title)
			<div class="container-xl d-flex flex-column gap-3 align-items-center justify-content-center text-center position-absolute top-0 bottom-0 end-0 start-0">
				@RenderTitle(title)
				@RenderSummary(summary)
				@RenderAuthor(author)
				@RenderPublishedDate(publishedDate)
			</div>
			break;
		}

</div>


@helper RenderImage(string coverImage, string title)
	{
		if (!string.IsNullOrEmpty(coverImage))
		{
			string ratio = Model.Item.GetRawValueString("ImageAspectRatio", string.Empty);
			ratio = ratio != "0" ? ratio : string.Empty;
			string ratioCssClass = ratio != string.Empty ? "ratio" : string.Empty;
			string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;
			string imageObjectFit = ratio != string.Empty ? "object-fit: cover;" : "object-fit: contain;";

		<div class="@ratioCssClass" @ratioVariable>
			<img class="img-fluid" src="@coverImage" alt="@title" style="@imageObjectFit" />
		</div>
    }
}

@helper RenderTitle(string title)
{
	if(!string.IsNullOrEmpty(title))
    {
		<h1 class="m-0">@title</h1>
    }
}

@helper RenderSummary(string summary)
{
	if(!string.IsNullOrEmpty(summary))
    {
		<h5 class="m-0">@summary</h5>
	}
}


@helper RenderAuthor(string author)
{
	if(!string.IsNullOrEmpty(author))
    {
		<div>@author</div>
	}
}

@helper RenderPublishedDate(string publishedDate)
{
	if(!string.IsNullOrEmpty(publishedDate))
    {
		<div>@publishedDate</div>
	}
}
