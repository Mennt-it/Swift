@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@functions {

	ProductViewModel GetProduct()
	{
		ProductViewModel product = null;

		if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
		{
			product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
		}

		return product;
	}

	List<FieldGroupViewModel> GetGroupsData(ProductViewModel product)
	{
		var groups = new List<FieldGroupViewModel>();
		bool showProductCategoryFields = (product.ProductCategories != null && Model.Item.GetBoolean("CategoryFields"));
		bool showProductFields = Model.Item.GetBoolean("ProductFields") && product.ProductFields != null;

		groups.AddRange(BuildDisplayGroups(product));

		if (showProductFields)
		{
			groups.AddRange(BuildProductGroups(product));
		}

		if (showProductCategoryFields)
		{
			groups.AddRange(BuildProductCategoryGroups(product));
		}

		return groups;
	}

	List<FieldGroupViewModel> BuildDisplayGroups(ProductViewModel product)
	{

		var groups = new List<FieldGroupViewModel>();

		bool hideFieldsWithZeroValue = Model.Item.GetBoolean("HideFieldsWithZeroValue");
		IEnumerable<string> selectedDisplayGroupSystemName = Model.Item.GetRawValueString("DisplayGroups").Split(',').ToList();
		var displayGroups = product.GetProductDisplayGroupFieldsByGroupSystemNames(selectedDisplayGroupSystemName, hideFieldsWithZeroValue);
		return displayGroups.ToList();
	}

	List<FieldGroupViewModel> BuildProductGroups(ProductViewModel product)
	{
		var groups = new List<FieldGroupViewModel>();

		foreach (var productGroup in product.ProductFields)
		{
			string groupName = productGroup.Key;
			var productFields = new List<FieldValueViewModel>(product.ProductFields.Values);
			var group = new FieldGroupViewModel { Name = groupName, Fields = productFields };
			groups.Add(group);
		}

		return groups;
	}

	List<FieldGroupViewModel> BuildProductCategoryGroups(ProductViewModel product)
	{

		var groups = new List<FieldGroupViewModel>();

		foreach (var categories in product.ProductCategories)
		{
			var categoryFields = new List<FieldValueViewModel>();

			foreach (var categoryField in categories.Value.Fields)
			{
				categoryFields.Add(categoryField.Value);
			}

			string groupName = categories.Value.Name;
			var group = new FieldGroupViewModel { Name = groupName, Fields = categoryFields };
			groups.Add(group);
		}

		return groups;
	}


	public static string FirstCharToUpper(string input)
	{
		return input[0].ToString().ToUpper() + input.Substring(1);
	}

		}

@{
	ProductViewModel product = GetProduct();

	if (product is object)
	{
		string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
		string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
		contentPadding = contentPadding == "none" ? string.Empty : contentPadding;
		contentPadding = contentPadding == "small" ? " p-2 p-md-3" : contentPadding;
		contentPadding = contentPadding == "large" ? " p-4 p-md-5" : contentPadding;
		
		string size = Model.Item.GetRawValueString("Size", "full");
		string gapCss = size == "full" ? " gap-4" : " gap-2";

		var groups = GetGroupsData(product);
		var templateParams = new Dictionary<string, object>
			{
				{ "Groups", groups },
				{ "Size", size }
			};

		string templateLayout = Model.Item.GetRawValueString("Layout", "list");
		string templateLayoutPath = $"Components/Specifications/{FirstCharToUpper(templateLayout)}.cshtml";

		<div class="h-100@(theme)@(contentPadding) item_@Model.Item.SystemName.ToLower()">
			<div class="grid@(gapCss)">
				@RenderPartial(templateLayoutPath, Model, templateParams)
			</div>
		</div>

	} else {
		<div class="alert alert-warning m-0">@Translate("Product Specification will be shown here if any")</div>
	}
}
