@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@functions {

	ProductViewModel GetProduct()
	{
		ProductViewModel product = null;

		if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
		{
			product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
		}

		if (product == null && Pageview.IsVisualEditorMode)
		{
			product = new ProductViewModel();
		}

		return product;
	}

	List<Dictionary<string, List<FieldValueViewModel>>> BuildGroupFieldData(ProductViewModel product)
	{

		bool showProductFields = Model.Item.GetBoolean("ProductFields");
		bool showProductCategoryFields = (product.ProductCategories != null && Model.Item.GetBoolean("CategoryFields"));
		var productGroup = new FieldGroupViewModel() { Name = string.Empty, SystemName = string.Empty };

		var fields = new List<Dictionary<string, List<FieldValueViewModel>>>();

		var hideZeroValues = Model.Item.GetBoolean("HideZeroValues");
		IEnumerable<string> selectedDisplayGroupSystemName = Model.Item.GetRawValueString("DisplayGroups").Split(',').ToList();
		var displayGroups = product.GetProductDisplayGroupFieldsByGroupSystemNames(selectedDisplayGroupSystemName, hideZeroValues);
		
		foreach (var displayGroup in displayGroups)
		{	
			var field = new Dictionary<string, List<FieldValueViewModel>>();
			field.Add(displayGroup.Name, displayGroup.Fields);
			fields.Add(field);
		}

		if (showProductFields && product.ProductFields != null)
		{
			foreach (var group in product.ProductFields)
			{
				var field = new Dictionary<string, List<FieldValueViewModel>>();
				field.Add(group.Key, new List<FieldValueViewModel>(product.ProductFields.Values));
				fields.Add(field);
			}
		}

		if (showProductCategoryFields && product.ProductCategories != null)
		{
			foreach (var categories in product.ProductCategories)
			{
				var categoryFields = new List<FieldValueViewModel>();
				foreach (var categoryField in categories.Value.Fields)
				{
					categoryFields.Add(categoryField.Value);
				}

				var field = new Dictionary<string, List<FieldValueViewModel>>();
				field.Add(categories.Value.Name, categoryFields);
				fields.Add(field);
			}
		}

		return fields;
	}

	public static string FirstCharToUpper(string input)
	{
		return input[0].ToString().ToUpper() + input.Substring(1);
	}

	Dictionary<string, object> GetTemplateParams(ProductViewModel product)
	{

		var templateParams = new Dictionary<string, object>();
		List<Dictionary<string, List<FieldValueViewModel>>> groups = BuildGroupFieldData(product);
		templateParams.Add("Groups", groups);

		string size = Model.Item.GetRawValueString("Size", "full");
		string tableSizeCss = size == "full" ? "" : " table-sm";
		string gapCss = size == "full" ? " gap-4" : " gap-2";
		templateParams.Add("Title", Model.Item.GetString("Title"));
		templateParams.Add("HideGroupHeaders", Model.Item.GetBoolean("HideGroupHeaders"));
		templateParams.Add("HideFieldLabels", Model.Item.GetBoolean("HideFieldLabels"));
		templateParams.Add("HideTitle", Model.Item.GetBoolean("HideTitle"));
		templateParams.Add("TitleFontSize", Model.Item.GetRawValueString("TitleFontSize", "display-4"));
		templateParams.Add("Size", size);
		templateParams.Add("TableSizeCss", tableSizeCss);
		templateParams.Add("GapCss", gapCss);

		return templateParams;
	}

}

@{

	ProductViewModel product = GetProduct();

	if (product is object)
	{

		var templateParams = GetTemplateParams(product);
		string templateLayout = Model.Item.GetRawValueString("Layout", "list");
		templateLayout = $"/Paragraph/Swift_ProductSpecification/Layouts/{FirstCharToUpper(templateLayout)}.cshtml";

		string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
		string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
		contentPadding = contentPadding == "none" ? string.Empty : contentPadding;
		contentPadding = contentPadding == "small" ? " p-2 p-md-3" : contentPadding;
		contentPadding = contentPadding == "large" ? " p-4 p-md-5" : contentPadding;

		string size = Model.Item.GetRawValueString("Size", "full");
		string gapCss = size == "full" ? " gap-4" : " gap-2";

		<div class="h-100@(theme)@(contentPadding) item_@Model.Item.SystemName.ToLower()">
			<div class="grid@(gapCss)">
				@RenderPartial(templateLayout, Model, templateParams)
			</div>
		</div>
	}

}
