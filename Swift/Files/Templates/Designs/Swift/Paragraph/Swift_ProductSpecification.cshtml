@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	} else if (Pageview.Item["DummyProduct"] != null) {
		ProductViewModelSettings productSetting = new ProductViewModelSettings
		{
			LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
			CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
			CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
			ShopId = Pageview.Area.EcomShopId
		};

		ProductViewModel dummyProduct = ViewModelFactory.CreateView(productSetting, Pageview.Item["DummyProduct"].ToString().Replace("p_", "").Replace(":", ""));

		product = dummyProduct;
	}

	IEnumerable<string> selectedDisplayGroupIds = Model.Item.GetList("DisplayGroups").SelectedValues;
	List<CategoryFieldViewModel> displayGroups = new List<CategoryFieldViewModel>();

	foreach (var selection in selectedDisplayGroupIds)
	{
		foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
		{		
			if (selection == group.Id) {
				displayGroups.Add(group);
			}
		}
	}

	bool hideTitle = Model.Item.GetBoolean("HideTitle");

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string layout = Model.Item.GetRawValueString("Layout", "list");
	string size = Model.Item.GetRawValueString("Size", "full");

	string alignment = Model.Item.GetRawValueString("Alignment", "");
	alignment = alignment == "alignLeft" ? "" : alignment;
	alignment = alignment == "alignLeftMiddle" ? "d-flex align-items-center text-start" : alignment;
}

<div class="@(alignment) @(theme) h-100">
	<div class="@contentPadding">
		@if ((product.ProductFields != null && Model.Item.GetBoolean("ProductFields")) || (product.ProductCategories != null && Model.Item.GetBoolean("CategoryFields")) || (displayGroups.Count != 0)) {
			if (!hideTitle)
			{
				<div class="text-start pb-2 pb-lg-4">
					<h2 class="@titleFontSize">@Model.Item.GetString("Title")</h2>
				</div>
			}
		}

		@if (displayGroups.Count != 0) {
			foreach (var group in displayGroups) {
				bool hideHeader = Model.Item.GetBoolean("HideGroupHeaders");

				if (!hideHeader) { 
					<h4 class="h4 mb-4">@group.Name</h4>
				}

				@RenderFieldsFromList(group.Fields, layout);
			}
		}

		@if (product.ProductFields != null && Model.Item.GetBoolean("ProductFields")) {
			if (product.ProductFields.Count > 0) {
				@RenderFieldsFromList(product.ProductFields, layout);
			}
		}

		@if (product.ProductCategories != null && Model.Item.GetBoolean("CategoryFields")) {
			if (product.ProductCategories.Count > 0) {
				foreach (var group in product.ProductCategories) {
					CategoryFieldViewModel category = group.Value;
					bool hideHeader = Model.Item.GetBoolean("HideGroupHeaders");

					if (!hideHeader) { 
						<h4 class="h4 mb-4">@group.Key</h4>
					}

					@RenderFieldsFromList(category.Fields, layout);
				}
			}
		}
	</div>

	@if (isVisualEditor && (displayGroups.Count == 0 && !Model.Item.GetBoolean("ProductFields") && !Model.Item.GetBoolean("CategoryFields"))) {
		<div class="alert alert-info m-0">
			@Translate("Specifications will be shown here")
		</div>
	}
</div>

@helper RenderFieldsFromList(Dictionary<string, FieldValueViewModel> fields, string layout) { 
	string size = Model.Item.GetRawValueString("Size", "full");
	string extraMargin = size == "full" ? "mb-5" : "";

	<div class="@extraMargin">
		@if (layout == "columns") {
			string gaps = size == "full" ? "gap-0" : "gap-2";

			<div class="grid @gaps">
				@foreach (var field in fields) {
					@RenderField(field.Value, layout)
				}
			</div>
		}
		@if (layout == "list") {
			<dl class="grid gap-0">
				@foreach (var field in fields) {
					@RenderField(field.Value, layout)
				}
			</dl>
		}
		@if (layout == "table") {
			string tableSize = size == "full" ? "" : "table-sm";

			<table class="table table-striped @tableSize">
				@foreach (var field in fields) {
					@RenderField(field.Value, layout)
				}
			</table>
		}
		@if (layout == "bullets") {
			string listSize = size == "full" ? "" : "m-0 p-0 lh-1 fs-7 opacity-75";
			string listStyle = size == "full" ? "" : "style=\"list-style-position: inside\"";

			<ul class="@listSize" @listStyle>
				@foreach (var field in fields) {
					@RenderField(field.Value, layout)
				}
			</ul>
		}
		@if (layout == "commas") { 
			List<string> featuresList = new List<string>();
			foreach (var field in fields)
			{
				if (field.Value.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>)) {
					List<string> options = new List<string>();
					foreach (FieldOptionValueViewModel option in field.Value.Value as System.Collections.Generic.List<FieldOptionValueViewModel>) {
						if (!string.IsNullOrWhiteSpace(option.Value)) {
							if (option.Value.ToString().Contains("#") && (Translate(field.Value.Name) == Translate("Color") || Translate(field.Value.Name) == Translate("Colour"))) {
								string colorSpan = "<span class=\"colorbox-sm\" style=\"background-color: " + option.Value + "\"></span>";
								options.Add(colorSpan);
							} else {
								options.Add(option.Value);
							}
                        }
					}
					string optionsString = (string.Join(", ", options.Select(x => x.ToString()).ToArray()));
					if ((Translate(field.Value.Name) == Translate("Color") || Translate(field.Value.Name) == Translate("Colour"))) {
						optionsString = (string.Join(" ", options.Select(x => x.ToString()).ToArray()));
					}
					featuresList.Add(field.Value.Name + ": " + optionsString);
				} else {
					if (!string.IsNullOrWhiteSpace(field.Value.Value.ToString())) {
						if (field.Value.Value.ToString().Contains("#") && (Translate(field.Value.Name) == Translate("Color") || Translate(field.Value.Name) == Translate("Colour"))) {
							string colorSpan = "<span class=\"colorbox-sm\" style=\"background-color: " + field.Value.Value + "\"></span>";
							featuresList.Add(field.Value.Name + ": " + colorSpan);
						} else {
							featuresList.Add(field.Value.Name + ": " + field.Value.Value.ToString());
                        }
					}
                }
			}

			string featuresString = (string.Join(", ", featuresList.Select(x => x.ToString()).ToArray()));

			<div class="opacity-75 fs-7">@featuresString</div>
		 }
	</div>
}

@helper RenderField(FieldValueViewModel field, string layout) { 
	string size = Model.Item.GetRawValueString("Size", "full");
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";
	bool noValues = false;

	if (!string.IsNullOrEmpty(fieldValue)) {
		if (field.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>)) {
			System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
			noValues = values.Count > 0 ? false : true;
		}
	}

	if (!string.IsNullOrEmpty(fieldValue) && noValues == false) {
		if (layout == "columns") {
			<div class="grid g-col-6 g-col-lg-4">
				<dt class="g-col-4 py-2 fw-bold">@field.Name</dt>
				<dd class="g-col-8 py-2 mb-0">@RenderFieldValue(field)</dd>
			</div>
		}
		if (layout == "list") {
			string extraPadding = size == "full" ? "py-2" : "";

			<dt class="g-col-4 @extraPadding fw-bold">@field.Name</dt>
			<dd class="g-col-8 @extraPadding mb-0">
				@RenderFieldValue(field)
			</dd>
		}
		if (layout == "table") {
			<tr>
				<th class="fw-bold" scope="row">@field.Name</th>
				<td>@RenderFieldValue(field)</td>
			</tr>
		}
		if (layout == "bullets") {
			<li>
				<strong>@field.Name</strong>
				<span>@RenderFieldValue(field)</span>
			</li>
		}
	}
}

@helper RenderFieldValue(FieldValueViewModel field) { 
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";

	fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
	fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

	bool isColor = false;

	if (field.Value.GetType() == typeof(System.Collections.Generic.List<Dynamicweb.Ecommerce.ProductCatalog.FieldOptionValueViewModel>))
	{
		int valueCount = 0;
		System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
		int totalValues = values.Count;

		foreach (FieldOptionValueViewModel option in values)
		{
			if (option.Value.Substring(0,1) == "#") {
				isColor = true;   
			}

			if (!isColor) {
				@option.Name
			} else {
				<span class="colorbox-sm" style="background-color: @option.Value" title="@option.Value"></span>
			}
			
			if (valueCount != totalValues && valueCount < (totalValues - 1)) {
				if (isColor) {
<text> </text>
				} else {
<text>, </text>
				}
			}
			valueCount++;
		}
	}
	else
	{
		if (fieldValue.Substring(0,1) == "#") {
			isColor = true;   
		}

		if (!isColor) {
			@fieldValue
		} else {
			<span class="colorbox-sm" style="background-color: @fieldValue" title="@fieldValue"></span>
		}
	}
}
