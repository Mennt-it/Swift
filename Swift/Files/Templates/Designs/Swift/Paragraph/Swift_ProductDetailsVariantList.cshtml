@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend

@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	string servicePageId = Model.Item.GetLink("VariantListServicePage") != null ? Model.Item.GetLink("VariantListServicePage").PageId.ToString() : "";
	servicePageId = servicePageId == "" && GetPageIdByNavigationTag("VariantListService") != 0 ? GetPageIdByNavigationTag("VariantListService").ToString() : servicePageId;
}

<form action="/Default.aspx?ID=@servicePageId" id="VariantProductsListForm_@Pageview.CurrentParagraph.ID" data-response-target-element="VariantProductsListContainer_@Pageview.CurrentParagraph.ID">
	<input type="hidden" name="MainProductID" value="@product.Id" />
</form>

<div id="VariantProductsListContainer_@Pageview.CurrentParagraph.ID"></div>

<script type="module">
	swift.PageUpdater.Update(document.querySelector("#VariantProductsListForm_@Pageview.CurrentParagraph.ID"));
</script>
