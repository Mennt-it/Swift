@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend

@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	string servicePageId = Model.Item.GetLink("VariantListServicePage") != null ? Model.Item.GetLink("VariantListServicePage").PageId.ToString() : "";
	servicePageId = servicePageId == "" && GetPageIdByNavigationTag("VariantListService") != 0 ? GetPageIdByNavigationTag("VariantListService").ToString() : servicePageId;

	IEnumerable<string> selectedDisplayGroups = Model.Item.GetList("Fields").SelectedValues;
	string selectedDisplayGroupsString = selectedDisplayGroups.Count() > 0 ? (string.Join(",", selectedDisplayGroups.Select(x => x.ToString()).ToArray())) : "";

	string title = !string.IsNullOrEmpty(Model.Item.GetString("Title")) ? Model.Item.GetString("Title") : ""; 
	string hideTitle = Model.Item.GetBoolean("HideTitle").ToString();
	string hideImage = Model.Item.GetBoolean("HideImage").ToString();
	string hideProductNumber = Model.Item.GetBoolean("HideProductNumber").ToString();
	string hideProductName = Model.Item.GetBoolean("HideProductName").ToString();
	string hideStock = Model.Item.GetBoolean("HideStock").ToString();
	string quantitySelector = Model.Item.GetBoolean("QuantitySelector").ToString();

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-6");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;
}

@if (!isVisualEditor)
{
	<div id="VariantProductsListContainer_@Pageview.CurrentParagraph.ID">
		@* Initial form for first load (We pass all the settings to the actual template) *@
		<form action="/Default.aspx?ID=@servicePageId" id="VariantProductsListForm_@Pageview.CurrentParagraph.ID" data-response-target-element="VariantProductsListContainer_@Pageview.CurrentParagraph.ID">
			<input type="hidden" name="ID" value="@servicePageId" />
			<input type="hidden" name="ParagraphID" value="@Pageview.CurrentParagraph.ID" />
			<input type="hidden" name="PageSize" value="10" id="VariantProductsListPageSize_@Pageview.CurrentParagraph.ID" />
			<input type="hidden" name="MainProductID" value="@product.Id" />
			<input type="hidden" name="Title" value="@title" />
			<input type="hidden" name="HideTitle" value="@hideTitle" />
			<input type="hidden" name="SelectedDisplayGroups" value="@selectedDisplayGroupsString" />
			<input type="hidden" name="HideImage" value="@hideImage" />
			<input type="hidden" name="HideProductNumber" value="@hideProductNumber" />
			<input type="hidden" name="HideProductName" value="@hideProductName" />
			<input type="hidden" name="HideStock" value="@hideStock" />
			<input type="hidden" name="QuantitySelector" value="@quantitySelector" />
			<input type="hidden" name="Theme" value="@theme" />
			<input type="hidden" name="TitleFontSize" value="@titleFontSize" />
			<input type="hidden" name="ContentPadding" value="@contentPadding" />
		</form>
	</div>

	<script type="module">
		swift.PageUpdater.Update(document.querySelector("#VariantProductsListForm_@Pageview.CurrentParagraph.ID"));
	</script>
} else {
	<div class="alert alert-info" role="alert">
        <span>@Translate("Variants list")</span>
    </div>
}
