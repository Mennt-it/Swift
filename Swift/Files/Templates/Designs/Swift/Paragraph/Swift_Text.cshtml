@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string layout = Model.Item.GetRawValueString("Layout", "text-start");
	layout = layout == "alignLeft" ? "align-items-start text-start" : layout;
	layout = layout == "alignCenter" ? "align-items-center text-center" : layout;
	layout = layout == "alignRight" ? "align-items-end text-end" : layout;
	layout = layout == "alignLeftMiddle" ? "align-items-start text-start justify-content-center" : layout;

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-3 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-5 p-md-5" : contentPadding;

	//Backward compatibility (Vertical align)
	string verticalAlign = "";
	if (!string.IsNullOrEmpty(Model.Item.GetString("verticalAlign"))) {
		verticalAlign = verticalAlign == "vertical-align-top" ? "justify-content-start" : verticalAlign;
		verticalAlign = verticalAlign == "vertical-align-center" ? "justify-content-center" : verticalAlign;
		verticalAlign = verticalAlign == "vertical-align-bottom" ? "justify-content-end" : verticalAlign;
    }

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

<div class="h-100 position-relative d-flex flex-column mb-0-last-child @contentPadding @verticalAlign @(layout)@(theme) item_@Model.Item.SystemName.ToLower()">
	@RenderBody(maxWidth)
</div>

@helper RenderBody(string maxWidth)
{
	Dynamicweb.Frontend.LinkViewModel link1 = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel link2 = new Dynamicweb.Frontend.LinkViewModel();

	string linkType1 = Model.Item.GetRawValueString("LinkType", "page");
	string linkType2 = Model.Item.GetRawValueString("LinkType2", "page2");

	if (linkType1 == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link1 = Model.Item.GetLink("ButtonLink");
	}
	
	if (linkType2 == "page2" && Model.Item.GetLink("ButtonLink2") != null)
	{
		link2 = Model.Item.GetLink("ButtonLink2");
	}

	if (linkType1 == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link1 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds)
		};
	}
	
	if (linkType2 == "product-group2")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink2");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType1 == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link1 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds)
		};
	}
	
	if (linkType2 == "product2")
	{
	ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink2");
	IList<string> productIds = new List<string> { };

	if (products != null)
		{
		foreach (var product in products.Products)
			{
			productIds.Add(product.Id);
			}
		}

	string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
	string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
	link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
		Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
		IsExternal = false
		};
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		string titleColor = Model.Item.GetString("TitleColor", "text-inherit");
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
		string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
		string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} {titleColor}{maxWidth} mb-3\">";
		string headingLevelStop = $"</{headingLevel}>";

		@headingLevelStart
			@Model.Item.GetString("Title")
		@headingLevelStop
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
	{
		string subtitleColor = Model.Item.GetString("SubtitleColor", "text-inherit");
		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<p class="@subtitleFontSize @subtitleColor lead mb-3@(maxWidth)">
			@Model.Item.GetString("Lead")
		</p>
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<div class="mb-0-last-child@(maxWidth)">
			@Model.Item.GetString("Text")
		</div>
	}

	if (link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
	{
		string target1 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link1.IsExternal ? "target=\"_blank\"" : "";
		string target2 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link2.IsExternal ? "target=\"_blank\"" : "";
		string rel1 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link1.IsExternal ? "rel=\"noopener\"" : "";
		string rel2 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link2.IsExternal ? "rel=\"noopener\"" : "";
		string buttonLabel1 = Model.Item.GetString("ButtonLabel", string.Empty);
		string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
		string buttonStyle1 = Model.Item.GetRawValueString("ButtonStyle", "");
		buttonStyle1 = buttonStyle1 == "primary" ? "btn-primary " : buttonStyle1;
		buttonStyle1 = buttonStyle1 == "secondary" ? "btn-secondary " : buttonStyle1;
		buttonStyle1 = buttonStyle1 == "link" ? "btn-link" : buttonStyle1;
		string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2", "");
		buttonStyle2 = buttonStyle2 == "primary" ? "btn-primary " : buttonStyle2;
		buttonStyle2 = buttonStyle2 == "secondary" ? "btn-secondary " : buttonStyle2;
		buttonStyle2 = buttonStyle2 == "link" ? "btn-link" : buttonStyle2;
		string stretchedLink1 = Model.Item.GetRawValueString("StretchedLink", "column-not-clickable");
		string stretchedLink2 = Model.Item.GetRawValueString("StretchedLink2", "column-not-clickable");
		string stretchedLinkClass = stretchedLink1 == "column-clickable" && string.IsNullOrEmpty(link2.Url) && string.IsNullOrEmpty(buttonLabel2) ? "stretched-link" : string.Empty;
		string stretchedLinkClass2 = stretchedLink2 == "column-clickable" && string.IsNullOrEmpty(link1.Url) && string.IsNullOrEmpty(buttonLabel1) ? "stretched-link" : string.Empty;
		string alignmentClass = string.Empty;

		if (Model.Item.GetString("Layout") == "alignCenter")
		{
			alignmentClass = " justify-content-center";
		}
		<div class="d-flex flex-wrap gap-3 mt-3@(alignmentClass)">
		
			@if (link1 != null && !string.IsNullOrEmpty(link1.Url)) 
				{
					if (!string.IsNullOrEmpty(buttonLabel1))
					{
						<a href="@link1.Url" @target1 @rel1 class="text-nowrap btn @(buttonStyle1)@(stretchedLinkClass)">@buttonLabel1</a>
					}
					else
					{
						<a href="@link1.Url" @target1 @rel1 class="@(stretchedLinkClass)">
							<span class="visually-hidden">@Model.Item.GetString("Title")</span>
						</a>
					}
				}

				@if (link2 != null && !string.IsNullOrEmpty(link2.Url))
					{
					if (!string.IsNullOrEmpty(buttonLabel2))
						{
						<a href="@link2.Url" @target2 @rel2 class="text-nowrap btn @(buttonStyle2)@(stretchedLinkClass2)">@buttonLabel2</a>
					}
					else
					{
						<a href="@link2.Url" @target2 @rel2 class="@(stretchedLinkClass2)">
							<span class="visually-hidden">@Model.Item.GetString("Title")</span>
						</a>
					}
				}
		</div>
	}
}
