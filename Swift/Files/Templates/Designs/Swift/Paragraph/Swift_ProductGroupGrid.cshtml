@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend

@functions
{
	private IList<ProductGroupViewModel> GetGroups(string type)
	{
		IList<ProductGroupViewModel> groupList = new List<ProductGroupViewModel> { };

		if (type == "subgroups")
		{
			IList<ProductGroupViewModel> groups = Model.Item.GetValue<IList<ProductGroupViewModel>>("Subgroups");
			if (groups != null)
			{
				foreach (var group in groups)
				{
					var subGroups = Services.ProductGroups.GetSubgroups(Services.ProductGroups.GetGroup(group.Id));

					foreach (var subGroup in subGroups)
					{
						var subGroupViewModel = ViewModelFactory.CreateView(new ProductGroupViewModelSettings(), subGroup);
						groupList.Add(subGroupViewModel);
					}
				}
			}
		}

		if (type == "selected-groups")
		{
			IList<ProductGroupViewModel> groups = Model.Item.GetValue<IList<ProductGroupViewModel>>("SelectedGroups");
			if (groups != null)
			{
				foreach (var group in groups)
				{
					groupList.Add(group);
				}
			}
		}

		if (type == "subgroups-current")
		{
			var currentGroupId = Dynamicweb.Context.Current.Request.QueryString.Get("GroupID");
			var currentGroup = currentGroupId != null ? Services.ProductGroups.GetGroup(currentGroupId) : null;
			var groups = currentGroup != null ? Services.ProductGroups.GetSubgroups(currentGroup) : null;
			if (groups != null)
			{
				foreach (var group in groups)
				{
					var groupViewModel = ViewModelFactory.CreateView(new ProductGroupViewModelSettings(), group);
					groupList.Add(groupViewModel);
				}
			}
		}

		return groupList;
	}

	private LinkViewModel GetLink(ProductGroupViewModel group)
	{
		var link = new LinkViewModel()
		{
			Url = $"/Default.aspx?ID={GetPageIdByNavigationTag("Shop")}&GroupID={group.Id.Trim()}",
			IsExternal = false
		};

		return link;
	}

	private string GetGroupImage(ProductGroupViewModel group)
	{
		var groupImageMarkup = string.Empty;
		var groupImage = Services.ProductGroups.GetGroup(group.Id)?.LargeImage;
		groupImage = Dynamicweb.Context.Current.Server.UrlEncode(groupImage);
		groupImage = !string.IsNullOrEmpty(groupImage) ? $"/Admin/Public/GetImage.ashx?width=640&crop=0&image=/Files{groupImage}&format=webp" : string.Empty;
		
		groupImageMarkup = !string.IsNullOrEmpty(groupImage) ? $"<img class=\"{GetImageShape()}\" src=\"{groupImage}\" alt=\"{group.Name}\" style=\"object-fit:cover\"/>" : groupImageMarkup;

		return groupImageMarkup;
	}

	private string GetImageShape()
	{
		string imageShape = Model.Item.GetRawValueString("ImageShape", "boxed");
		switch (imageShape)
		{
			case "boxed":
				imageShape = "rounded-0";
				break;
			case "rounded":
				imageShape = "rounded-3";
				break;
			case "circle":
				imageShape = "rounded-pill";
				break;
		}
		return imageShape;
	}
}

@{
	string groupType = Model.Item.GetRawValueString("GroupType", "subgroups");
	var groups = GetGroups(groupType);

	bool hideHeaders = (Model.Item?.GetBoolean("HideHeaders") ?? false);
	string title = Model.Item?.GetString("Title", string.Empty);
	string subtitle = Model.Item?.GetString("Subtitle", string.Empty);
	bool groupsExist = groups is object && groups.Count != 0;

	// Grid layout
	string gridSize = Model.Item.GetRawValueString("GridSize", "3");
	gridSize = $"grid-2 grid-sm-3 grid-lg-{gridSize}";
	string itemsGap = $"gap-{Model.Item.GetRawValueString("GridItemsGap", "3")}";
	string layout = Model.Item.GetRawValueString("Layout", "overlay");

	// Styling
	string generalTheme = Model.Item.GetRawValueString("GeneralTheme");
	generalTheme = !string.IsNullOrWhiteSpace(generalTheme) ? $"p-3 theme {generalTheme.Replace(" ", "").Trim().ToLower()}" : string.Empty;
	string theme = Model.Item.GetRawValueString("Theme");
	theme = !string.IsNullOrWhiteSpace(theme) ? $"theme {theme.Replace(" ", "").Trim().ToLower()}" : "theme";

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", string.Empty);
	ratio = ratio != "0" ? ratio : string.Empty;
	string ratioCssClass = ratio != string.Empty ? "ratio" : string.Empty;
	string ratioVariable = ratio != string.Empty ? "--bs-aspect-ratio: " + ratio : string.Empty;

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
	string maxWidth = Model.Item.GetRawValueString("TextReadability", string.Empty);
	maxWidth = maxWidth == "max-width-on" ? "mw-75ch" : string.Empty;

	string alignment = Model.Item.GetRawValueString("ButtonAlignment", "align-center-center");
	switch (alignment)
	{
		case "align-center-center":
			alignment = "text-center justify-content-center align-items-center";
			break;
		case "align-bottom-start":
			alignment = "text-start justify-content-start align-items-end";
			break;
		case "align-bottom-center":
			alignment = "text-center justify-content-center align-items-end";
			break;
		case "align-bottom-end":
			alignment = "text-end justify-content-end align-items-end";
			break;
	}

	string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "primary");
	buttonStyle = buttonStyle == "primary" ? "btn-primary" : buttonStyle;
	buttonStyle = buttonStyle == "secondary" ? "btn-secondary" : buttonStyle;
	buttonStyle = buttonStyle == "link" ? "btn-link" : buttonStyle;

	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	buttonSize = buttonSize == "small" ? "btn btn-sm" : buttonSize;
	buttonSize = buttonSize == "regular" ? "btn" : buttonSize;
	buttonSize = buttonSize == "large" ? "btn btn-lg" : buttonSize;

	string stretchedLink = "stretched-link";
}

@if (groupsExist)
{
	<div class="grid h-100 gap-0 @(generalTheme) item_@(Model.Item.SystemName.ToLower())">
		<div id="@Model.ID" class="user-select-none" style="scroll-margin-top:var(--header-height,150px)"></div>
		
		@if (!hideHeaders)
		{
			<div class="g-col-12 pb-2 pb-lg-4">
				<div class="mb-0-last-child">
					@if (!string.IsNullOrEmpty(title))
					{
						<h2 class="mt-0 @titleFontSize @maxWidth">@title</h2>
					}

					@if (!string.IsNullOrEmpty(subtitle))
					{
						<p class="@subtitleFontSize @maxWidth">@subtitle</p>
					}
				</div>
			</div>
		}

			<div class="g-col-12 grid @gridSize @itemsGap">

				@foreach (var group in groups)
				{
					<div class="d-flex flex-column h-100">

						@{
							switch (layout)
							{
								case "overlay":
									<div class="card rounded-0 border-0 @(theme) @(ratioCssClass)" style="@ratioVariable">

										@if (!string.IsNullOrEmpty(GetGroupImage(group)))
										{
											@GetGroupImage(group)
										} else
										{
											<div class="bg-opacity-10 @GetImageShape()" style="background-color:rgba(var(--swift-foreground-color-rgb),var(--bs-bg-opacity));"></div>
										}

										<div class="d-grid p-3 @alignment">
											@if (GetLink(group) is object)
											{
												bool openLinksInNewTab = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && GetLink(group).IsExternal;
												string target = openLinksInNewTab ? "target=\"_blank\"" : string.Empty;
												string rel = openLinksInNewTab ? "rel=\"noopener\"" : string.Empty;

												<a href="@GetLink(group)" class="@(buttonSize) @buttonStyle @(stretchedLink)" @target @rel>@group.Name</a>
											}
										</div>
									</div>
									break;
								case "below":
									<div class="card rounded-0 border-0 @(theme)">

										<div class="@(ratioCssClass)" style="@ratioVariable">
											
											@if(!string.IsNullOrEmpty(GetGroupImage(group)))
											{
												@GetGroupImage(group)
											}else
											{
												<div class="bg-opacity-10 @GetImageShape()" style="background-color:rgba(var(--swift-foreground-color-rgb),var(--bs-bg-opacity));"></div>
											}

										</div>

										<div class="@(!string.IsNullOrEmpty(GetGroupImage(group)) ? "h-100" : string.Empty) @(!string.IsNullOrEmpty(theme) ? "p-2" : "pt-2") d-grid @alignment">

											@if (GetLink(group) is object)
											{
												bool openLinksInNewTab = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && GetLink(group).IsExternal;
												string target = openLinksInNewTab ? "target=\"_blank\"" : string.Empty;
												string rel = openLinksInNewTab ? "rel=\"noopener\"" : string.Empty;

												<a href="@GetLink(group)" class="@(buttonSize) @buttonStyle @(stretchedLink)" @target @rel>@group.Name</a>
											}
										</div>
									</div>
									break;
							}
						}
					</div>
				}
			</div>
		</div>
	}
	else if (Pageview.IsVisualEditorMode)
	{
		<div class="alert alert-dark" role="alert">
			<span>@Translate("Group grid"): @Translate("Edit this column to configure")</span>
		</div>
	}
