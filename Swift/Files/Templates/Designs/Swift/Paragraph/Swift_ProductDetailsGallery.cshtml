@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend

@{ 
	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	@* Collect the images *@
	var selectedImageCategories = Model.Item.GetList("ImageAssets").SelectedValues;
	bool includeImagePatternImages = Model.Item.GetBoolean("ImagePatternImages"); 
	
	@* Needed image data collection to support both DefaultImage, ImagePatterns and Image Assets *@
	IEnumerable<MediaViewModel> assetsImages = product.AssetCategories.Where(x => selectedImageCategories.Contains(x.SystemName)).SelectMany(x => x.Assets);
	IEnumerable<MediaViewModel> images = new MediaViewModel[]{};
	images = includeImagePatternImages && assetsImages.Count() == 0 ? images.Append(product.DefaultImage) : images;
	images = images.Union(assetsImages);
	images = includeImagePatternImages ? images.Union(product.ImagePatternImages) : images;

	bool defaultImageFallback = Model.Item.GetBoolean("DefaultImageFallback"); 

	int totalImages = 0;
	foreach (MediaViewModel asset in images) {
		var assetName = asset.Value.ToLower(); 
		if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
			totalImages++;
		} 
	}

	if (totalImages == 0)
	{
		if (defaultImageFallback) {
			images = new List<MediaViewModel>(){ product.DefaultImage };
			totalImages = 1;
		} else {
			images = new List<MediaViewModel>(){ };
			totalImages = 0;
		}
	}

	@* Layout settings *@
	string spacing = Model.Item.GetRawValueString("Spacing", "4");
	spacing = spacing == "none" ? "gap-0" : spacing;
	spacing = spacing == "small" ? "gap-3" : spacing;
	spacing = spacing == "large" ? "gap-4" : spacing;

	string layout = Model.Item.GetRawValueString("Layout", "grid");
}

@* Get images from selected categories or get all images *@
@if (totalImages != 0 && images.Count() != 0)
{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	@* Show the gallery on large screens *@
	<div class="d-none d-lg-block h-100 @theme">
		<div class="grid @spacing">
			@{ 
				int imageNumber = 0;

				foreach (MediaViewModel asset in images) {
					var assetName = asset.Value.ToLower(); 

					if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
						string colClass = totalImages > 1 ? "g-col-lg-6" : "g-col-12";
						colClass = layout == "full-first" && imageNumber == 0 ? "g-col-12" : colClass;
						colClass = layout == "full-last" && imageNumber == (totalImages - 1) ? "g-col-12" : colClass;
						colClass = layout == "advanced-grid" && imageNumber > 1 ? "g-col-4" : colClass;

						colClass = layout == "advanced-grid" && totalImages == 1 ? "g-col-12" : colClass;
						colClass = layout == "advanced-grid" && totalImages == 3 && imageNumber == 2 ? "g-col-12" : colClass;
						colClass = layout == "advanced-grid" && totalImages == 4 && imageNumber == 2 ? "g-col-6" : colClass;
						colClass = layout == "advanced-grid" && totalImages == 4 && imageNumber == 3 ? "g-col-6" : colClass;
						colClass = layout == "advanced-grid" && totalImages == 6 && imageNumber == 5 ? "g-col-12" : colClass;
						colClass = layout == "advanced-grid" && totalImages == 7 && imageNumber == 5 ? "g-col-6" : colClass;
						colClass = layout == "advanced-grid" && totalImages == 7 && imageNumber == 6 ? "g-col-6" : colClass;
						colClass = layout == "advanced-grid" && totalImages == 9 && imageNumber == 8 ? "g-col-12" : colClass;

						<div class="@colClass">
							@RenderImage(asset, product, imageNumber)
						</div>

						imageNumber++;
					}
				}
			}
		</div>
	</div>

	@* Modal *@
	<div class="modal fade" id="modal_@Model.ID" tabindex="-1" aria-labelledby="productDetailsGalleryModalTitle" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered modal-xl">
			<div class="modal-content">
				<div class="modal-header visually-hidden">
					<h5 class="modal-title" id="productDetailsGalleryModalTitle">@Translate("Full image")</h5>
				</div>
				<div class="modal-body">
					<div id="FullImages_@Model.ID" class="d-flex align-items-center justify-content-center">
						@foreach (MediaViewModel asset in images) {
							var assetName = asset.Value.ToLower();
							if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
								string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;
								var parms = new Dictionary<string, object>();
								parms.Add("columns", Model.GridRowColumnCount);
								@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = imagePath }, parms)
							}
						}
					</div>
					<script type="module">
						var sliderFull_@(Model.ID) = tns({
							container: '#FullImages_@Model.ID',
							items: 1,
							gutter: 16,
							mouseDrag: true,
							touch: true,
							arrowKeys: true,
							nav: false,
							loop: false,
							speed: 10,
							controls: false,
							swipeAngle: 30,
							preventScrollOnTouch: 'auto'
						});

						if (document.getElementById('modal_@Model.ID')) {
							document.getElementById('modal_@Model.ID').addEventListener('show.bs.modal', function (event) {
								var slideNumber = event.relatedTarget.getAttribute("data-image-number");
								sliderFull_@(Model.ID).goTo(slideNumber);
							});
						}
					</script>
				</div>
			</div>
		</div>
	</div>

	@* Show the thumbs on small screens *@
	<div class="d-block d-lg-none mini-product-image-slider mx-lg-0 @theme">
		<div id="SmallScreenImages_@Model.ID">
			@{
				var smallImageNumber = 0;

				foreach (MediaViewModel asset in images)
				{
					var assetName = asset.Value.ToLower();

					if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif"))
					{
						@RenderImage(asset, product, smallImageNumber, "small")
						smallImageNumber++;
					}
				}
			}
		</div>

		<div id="SmallScreenImagesThumbnails_@Model.ID" class="tns-nav-thumbnails grid gap-2 overflow-x-scroll my-3">
			@{
				foreach (MediaViewModel asset in images) {
					var assetName = asset.Value.ToLower();
					if (assetName.Contains(".jpg") || assetName.Contains(".webp") || assetName.Contains(".png") || assetName.Contains(".gif")) {
						
						string imagePath = Dynamicweb.Context.Current.Server.UrlEncode(assetName);
						string imagePathThumb = $"/Admin/Public/GetImage.ashx?image={imagePath}&width=160&format=webp";

						<div class="tns-nav-thumbnail-item ratio ratio-4x3 border outline-none" style="width:80px;" role="button">
							<img src="@imagePathThumb" class="p-2" style="object-fit: cover;" alt="@product.Name">
						</div>
					}
				}
			}
		</div>

		@* Tiny slider *@
		<script type="module">
			var slider_@Model.ID = tns({
				container: '#SmallScreenImages_@Model.ID',
				items: 1,
				gutter: 16,
				mouseDrag: true,
				touch: true,
				arrowKeys: true,
				nav: true,
				navContainer: "#SmallScreenImagesThumbnails_@Model.ID",
				navAsThumbnails: true,
				loop: false,
				controls: false,
				swipeAngle: 30,
				preventScrollOnTouch: 'auto'
			});
		</script>
	</div>
}

@helper RenderImage(MediaViewModel asset, ProductViewModel product, int number, string screenSize = "large") { 
	string layout = Model.Item.GetRawValueString("Layout", "grid");
	string padding = "";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", "").Trim().ToLower() : "";

	if (theme != "")
	{
		padding = "p-3";
	} 

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
	ratio = ratio != "0" ? ratio : "";
	string ratioCssClass = ratio != "" && ratio != "fill" ? " ratio" : "";
	string ratioVariable = ratio != "" && ratio != "fill" ? "--bs-aspect-ratio: " + ratio : "";
	ratioCssClass = ratio != "" && ratio == "fill" && screenSize == "small" ? " ratio" : ratioCssClass;
	ratioVariable = ratio != "" && ratio == "fill" && screenSize == "small" ? "--bs-aspect-ratio: 66%" : ratioVariable;
	string fillClass = ratio == "fill" ? " h-100" : "";

	string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;
	string imageLinkPath = Dynamicweb.Context.Current.Server.UrlEncode(imagePath);
	string productName = product.Name;

	var parms = new Dictionary<string, object>();
	parms.Add("alt", product.Name);
	parms.Add("itemprop", "image");
	parms.Add("columns", Model.GridRowColumnCount);

	if (ratio == "fill" && layout != "grid") {
		parms.Add("cssClass", "w-100 h-100 image-zoom-lg");
	}
	else
	{
		parms.Add("cssClass", "mw-100 mh-100");
	}

	<div class="h-100 @(padding)@(theme)">
		<a href="@imageLinkPath" class="d-block @(ratioCssClass)@(fillClass)" style="@(ratioVariable)" data-bs-toggle="modal" data-bs-target="#modal_@Model.ID" data-image-number="@number" tabindex="-1">
			<span class="d-flex align-items-center justify-content-center overflow-hidden h-100">
				@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = imagePath }, parms)
			</span>
		</a>
	</div>
}
