@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{ 
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string layout = Model.Item.GetRawValueString("Layout", "QuoteOnly");
	string fontSize = Model.Item.GetRawValueString("FontSize", "Regular");
	string fontSizeClass = "fs-6";
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "Small");
	string contentPaddingClass = string.Empty;
	string quoteIconSize = "icon-3";
	string gapClass = " gap-3";
	string outlineLayout = "style=\"box-shadow:-0.375rem 0 0 0 var(--swift-border-color);\"";
	string quoteIcon = "<svg viewBox=\"0 0 32 28\"><path d= \"M40.333,28,38,0H52L49.667,28Zm-18,0L20,0H34L31.667,28Z\" transform=\"translate(-20)\" fill=\"currentColor\"/></svg>";

	switch (contentPadding)
	{
		case "Small":
			contentPaddingClass = " p-3";
			break;
		case "Large":
			contentPaddingClass = " p-5";
			break;
	}

	switch (fontSize)
	{
		case "Small":
			fontSizeClass = "fs-7";
			quoteIconSize = "icon-2";
			gapClass = " gap-2";
			break;
		case "Large":
			fontSizeClass = "fs-3";
			quoteIconSize = "icon-4";
			break;
	}
}

@if (layout == "QuoteOnly")
{
	<div class="h-100@(contentPaddingClass)@(theme)">
		@RenderQuote(fontSizeClass)
	</div>
}

@if (layout == "QuoteLeftOutline")
{
	<div class="h-100@(contentPaddingClass)@(theme)" @outlineLayout>
		@RenderQuote(fontSizeClass)
	</div>
}

@if (layout == "QuoteLeftOutlineIconTop")
{
	<div class="h-100 grid grid-1@(gapClass)@(contentPaddingClass)@(theme)" @outlineLayout>
		<div class="@quoteIconSize">
			@quoteIcon
		</div>
		@RenderQuote(fontSizeClass)
	</div>
}

@if (layout == "QuoteLeftOutlineIconLeft")
{
	<div class="h-100 d-flex flex-row@(gapClass)@(contentPaddingClass)@(theme)" @outlineLayout>
		<div class="@quoteIconSize">
			@quoteIcon
		</div>
		@RenderQuote(fontSizeClass)
	</div>
}

@helper RenderQuote(string fontSizeClass)
{
	string quote = Model.Item.GetRawValueString("Quote", string.Empty);
	string quoteAuthor = Model.Item.GetRawValueString("QuoteAuthor", string.Empty);
	string quoteSource = Model.Item.GetRawValueString("QuoteSource", string.Empty);
	
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();
	
	if (Model.Item.GetLink("QuoteSourceLink") != null)
	{
		link = Model.Item.GetLink("QuoteSourceLink");
	}

	<figure class="m-0">
		<blockquote class="m-0 blockquote">
			<p class="@fontSizeClass">@quote</p>
		</blockquote>	

		@if (!string.IsNullOrEmpty(quoteAuthor))
		{
			<figcaption class="m-0 opacity-85 fs-7" style="color: var(--swift-foreground-color);">
				@quoteAuthor

				@if (!string.IsNullOrEmpty(quoteSource) && !string.IsNullOrEmpty(link.Url))
				{
					string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;

					<a class="text-decoration-none text-decoration-underline-hover" href="@link.Url" @target>
						<cite title="@quoteSource">@quoteSource</cite>
					</a>
				}
				else
				{
					<cite title="@quoteSource">@quoteSource</cite>
				}

			</figcaption>
		}
	</figure>
}
