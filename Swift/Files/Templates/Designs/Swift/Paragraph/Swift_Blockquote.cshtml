@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string quoteAuthor = Model.Item.GetRawValueString("QuoteAuthor", string.Empty);
	string layout = Model.Item.GetRawValueString("Layout", "QuoteOnly");
	string fontSize = Model.Item.GetRawValueString("FontSize", "Regular");
	string fontSizeClass = "fs-6";
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "Small");
	string contentPaddingClass = string.Empty;
	string quoteIconSize = "icon-3";
	string gapClass = " gap-3";
	string borderLeftLayout = "style=\"border-left:0.375rem solid var(--swift-border-color);box-shadow: none;\"";
	string quoteIcon = "<svg viewBox=\"0 0 32 28\"><path d= \"M40.333,28,38,0H52L49.667,28Zm-18,0L20,0H34L31.667,28Z\" transform=\"translate(-20)\" fill=\"currentColor\"/></svg>";

	switch (contentPadding)
	{
		case "Small":
			contentPaddingClass = " p-3";
			break;
		case "Large":
			contentPaddingClass = " p-5";
			break;
	}

	switch (fontSize)
	{
		case "Small":
			fontSizeClass = "fs-7";
			quoteIconSize = "icon-2";
			gapClass = " gap-2";
			break;
		case "Large":
			fontSizeClass = "fs-3";
			quoteIconSize = "icon-4 mt-1";
			break;
	}
}

@if (layout == "QuoteOnly")
{
	<figure class="d-flex flex-column gap-3 m-0 h-100@(contentPaddingClass)@(theme)">
		<blockquote class="m-0 blockquote">
			@RenderQuote(layout, fontSizeClass)
		</blockquote>
		@if (!string.IsNullOrEmpty(quoteAuthor))
		{
			<figcaption class="d-flex gap-3 align-items-center m-0 position-relative">
				@RenderQuoteAuthorImage(layout, theme)
				<div class="opacity-85 fs-7">
					@quoteAuthor
					@RenderQuoteSource()
				</div>
			</figcaption>
		}
	</figure>
}

@if (layout == "QuoteLeftBorder")
{
	<figure class="d-flex flex-column gap-3 m-0 h-100@(contentPaddingClass)@(theme)" @borderLeftLayout>
		<blockquote class="m-0 blockquote">
			@RenderQuote(layout, fontSizeClass)
		</blockquote>
		@if (!string.IsNullOrEmpty(quoteAuthor))
		{
			<figcaption class="d-flex gap-3 align-items-center m-0 position-relative">
				@RenderQuoteAuthorImage(layout, theme)
				<div class="opacity-85 fs-7">
					@quoteAuthor
					@RenderQuoteSource()
				</div>
			</figcaption>
		}
	</figure>
}

@if (layout == "QuoteLeftBorderIconTop")
{
	<div class="h-100 grid grid-1@(gapClass)@(contentPaddingClass)@(theme)" @borderLeftLayout>
		<div class="@quoteIconSize">
			@quoteIcon
		</div>
		<figure class="d-flex flex-column gap-3 m-0">
			<blockquote class="m-0 blockquote">
				@RenderQuote(layout, fontSizeClass)
			</blockquote>
			@if (!string.IsNullOrEmpty(quoteAuthor))
			{
				<figcaption class="d-flex gap-3 align-items-center m-0 position-relative">
					@RenderQuoteAuthorImage(layout, theme)
					<div class="opacity-85 fs-7">
						@quoteAuthor
						@RenderQuoteSource()
					</div>
				</figcaption>
			}
		</figure>
	</div>
}

@if (layout == "QuoteLeftBorderIconLeft")
{
	<div class="h-100 d-flex flex-row@(gapClass)@(contentPaddingClass)@(theme)" @borderLeftLayout>
		<div class="@quoteIconSize">
			@quoteIcon
		</div>
		<figure class="d-flex flex-column gap-3 m-0">
			<blockquote class="m-0 blockquote">
				@RenderQuote(layout, fontSizeClass)
			</blockquote>
			@if (!string.IsNullOrEmpty(quoteAuthor))
			{
				<figcaption class="d-flex gap-3 align-items-center m-0 position-relative">
					@RenderQuoteAuthorImage(layout, theme)
					<div class="opacity-85 fs-7">
						@quoteAuthor
						@RenderQuoteSource()
					</div>
				</figcaption>
			}
		</figure>
	</div>
}

@if (layout == "QuoteTopImageCenter")
{
	<figure class="d-flex flex-column m-0 h-100">
		<blockquote class="m-0 blockquote@(contentPaddingClass)@(theme)">
			@RenderQuote(layout, fontSizeClass)
		</blockquote>
		@if (!string.IsNullOrEmpty(quoteAuthor))
		{
			<figcaption class="bg-white d-flex gap-3 justify-content-center m-0 position-relative@(contentPaddingClass)">
				@RenderQuoteAuthorImage(layout, theme)
				<div class="opacity-85 fs-7 pt-3">
					@quoteAuthor
					@RenderQuoteSource()
				</div>
			</figcaption>
		}
	</figure>
}

@if (layout == "QuoteLeftImageRight")
{
	<figure class="d-flex m-0">
		<div class="d-flex flex-column gap-3 w-50 w-lg-75@(contentPaddingClass)@(theme)">
			<blockquote class="m-0 blockquote">
				@RenderQuote(layout, fontSizeClass)
			</blockquote>
			@if (!string.IsNullOrEmpty(quoteAuthor))
			{
				<figcaption class="d-flex gap-3 align-items-center m-0 position-relative">
					<div class="opacity-85 fs-7">
						@quoteAuthor
						@RenderQuoteSource()
					</div>
				</figcaption>
			}
		</div>
		@RenderQuoteAuthorImage(layout, theme)
	</figure>
}

@helper RenderQuote(string layout, string fontSizeClass)
{
	string quote = Model.Item.GetRawValueString("Quote", string.Empty);

	if (layout == "QuoteTopImageCenter")
	{
		<div class="@fontSizeClass text-center">@quote</div>
	}
	else
	{
		<div class="@fontSizeClass mb-0-last-child">@quote</div>
	}
}

@helper RenderQuoteAuthorImage(string layout, string theme)
{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	string quoteAuthor = Model.Item.GetRawValueString("QuoteAuthor", string.Empty);
	Dynamicweb.Frontend.FileViewModel image = Model.Item.GetFile("QuoteAuthorImage");
	string imagePath = image?.PathUrlEncoded ?? string.Empty;
	int xPos = image?.FocalPositionFromLeft ?? 50;
	int yPos = image?.FocalPositionFromTop ?? 50;
	string imagePosition = $"{xPos}% {yPos}%";
	int imageWidth = 32;
	int imageheight = 32;
	string imageClass = "rounded-circle";

	switch (layout)
	{
		case "QuoteLeftImageRight":
			imageWidth = 300;
			imageheight = 400;
			imageClass = "img-fluid w-50 w-lg-25";
			break;
		case "QuoteTopImageCenter":
			imageWidth = 80;
			imageheight = 80;
			imageClass += " position-absolute top-0 start-50 translate-middle";
			break;
	}

	if (!string.IsNullOrEmpty(imagePath))
	{
		<img src="/Admin/Public/GetImage.ashx?image=@imagePath&width=@(imageWidth*2)&crop=0&format=webp&compression=75" width="@imageWidth" height="@imageheight" class="@imageClass" alt="@quoteAuthor" loading="lazy" decoding="async" style="object-fit: cover; object-position:@imagePosition;" />
	}
	else
	{
		if (layout == "QuoteTopImageCenter")
        {
			string quoteAuthorIconStyle = theme != string.Empty ? "filter:brightness(1.08)" : "background-color:rgb(0,0,0,0.08);";

			<div class="p-3 icon-5 shadow-none @imageClass@(theme)" style="@quoteAuthorIconStyle">
				@ReadFile(iconPath + "user.svg")
			</div>
        }

		else if (layout == "QuoteLeftImageRight")
        {

			<div class="bg-white d-flex align-items-center justify-content-center icon-5 @imageClass" style="background-color: rgb(0,0,0,0.08)">
				@ReadFile(iconPath + "user.svg")
			</div>
        }

		else
		{
			<div class="p-2 icon-2 rounded-circle shadow-none@(theme)" style="background-color: rgb(0,0,0,0.08)">
				@ReadFile(iconPath + "user.svg")
			</div>
        }
	}
}

@helper RenderQuoteSource()
{
	string quoteSource = Model.Item.GetRawValueString("QuoteSource", string.Empty);
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();

	if (Model.Item.GetLink("QuoteSourceLink") != null)
	{
		link = Model.Item.GetLink("QuoteSourceLink");
	}

	if (!string.IsNullOrEmpty(quoteSource) && !string.IsNullOrEmpty(link.Url))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;

		<a class="text-decoration-none text-decoration-underline-hover" href="@link.Url" @target>
			<cite title="@quoteSource">@quoteSource</cite>
		</a>
	}
	else if (string.IsNullOrEmpty(quoteSource) && !string.IsNullOrEmpty(link.Url))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;
		<a class="stretched-link text-decoration-none text-decoration-underline-hover" href="@link.Url" @target>
			<cite title="@quoteSource">@quoteSource</cite>
		</a>
	}
	else
	{
		<cite title="@quoteSource">@quoteSource</cite>
	}
}

