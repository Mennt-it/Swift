@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog


@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductListViewModel productList = new ProductListViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}

	string detailsPageLink = Dynamicweb.Context.Current.Items["DetailsPageLink"] != null ? Dynamicweb.Context.Current.Items["DetailsPageLink"].ToString() : "";

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string textPadding = theme != "" ? "px-2 px-lg-3 pb-2 pb-lg-3" : "";

	string url = Dynamicweb.Context.Current.Request.RawUrl;
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Swift_PageClean.cshtml" : "?LayoutTemplate=Swift_PageClean.cshtml";
	}

	string staticVariantsLayout = Model.Item.GetRawValueString("StaticVariantsLayout", "hide");

	string groupId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("GroupID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("GroupID") : "";
}

@if (productList.TotalProductsCount > 0) { 
	int pageSizeSetting = 30;
	int pageSize = productList.PageSize;
	pageSize += pageSizeSetting;

	int loadedProducts = productList.PageSize > productList.TotalProductsCount ? productList.TotalProductsCount : productList.PageSize;

	<div class="grid gap-0 mb-5 border-bottom">
		@foreach (ProductViewModel product in productList.Products)
		{
			string link = $"{detailsPageLink}&groupid={product.PrimaryOrDefaultGroup.Id}&productid={product.Id}";
			link += !string.IsNullOrEmpty(product.VariantId) ? "&variantid=" + product.VariantId : "";
			string price = product?.Price?.PriceFormatted ?? "";
			string imagePath = product?.DefaultImage?.Value ?? "";
			imagePath = Dynamicweb.Context.Current.Server.UrlEncode(imagePath);

			string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
			ratio = ratio != "0" ? ratio : "";
			string ratioCssClass = ratio != "" ? " ratio" : "";
			string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";

			string imagePathXs       = "/Admin/Public/GetImage.ashx?width=" + 240 + "&image=" + imagePath + "&Format=WebP&Quality=70";
			string imagePathS        = "/Admin/Public/GetImage.ashx?width=" + 350 + "&image=" + imagePath + "&Format=WebP&Quality=70";
			string imagePathFallBack = "/Admin/Public/GetImage.ashx?width=" + 350 + "&image=" + imagePath + "&Format=WebP&Quality=70";

			string imageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", "").Trim().ToLower() : "";
			string imagePadding = imageTheme != "" || theme != "" ? "p-2 p-lg-3" : "";

			string imageId = "ProductImage_" + product.Id + product.VariantId;
			string priceId = "ProductPrice_" + product.Id + product.VariantId;

			IEnumerable<string> selectedDisplayGroups = Model.Item.GetList("MainFeatures").SelectedValues;
			List<CategoryFieldViewModel> mainFeatures = new List<CategoryFieldViewModel>();

			foreach (var selection in selectedDisplayGroups)
			{
				foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
				{
					if (selection == group.Id) {
						mainFeatures.Add(group);
					}
				}
			}

			<article class="product-list-item g-col-6 g-col-lg-4 px-3 pb-3 pb-lg-5">
				<div class="d-flex flex-column gap-3 h-100 @(theme)">
					<div>
						<div class="position-relative overflow-hidden">
							<a href="@link" title="@product.Name" class="d-block">
								<div class="@(ratioCssClass)@(imageTheme)" style="@(ratioVariable)">
									<div class="d-flex align-items-center justify-content-center">
										<img 
											id="@imageId"
											srcset="
												@imagePathXs 240w,
												@imagePathS  350w"
											sizes="(max-width: 640px) 480px, 640px"
											src="@imagePathFallBack"
											height=""
											width=""
											loading="lazy"
											decoding="async"
											class="mw-100 mh-100 @imagePadding"
											alt="@product.Name">
									</div>
								</div>
							</a>

							@if (product.VariantInfo.VariantInfo != null && staticVariantsLayout == "images")
							{
								int variantGroupCount = 0; 
								int showMaxVariantGroups = 2;
								int showMaxVariants = 3;
								theme = theme != "" ? theme : "bg-white";

								<div 
									class="static-variants w-100 d-none d-lg-block position-absolute left-0 bottom-0 @theme" 
									id="StaticVariants_@product.Id" 
									style="pointer-events: none;">

									@foreach (var variantGroup in product.VariantGroups())
									{
										int variantsCount = 0;

										<div class="d-flex gap-2 mb-2">
											@foreach (var variant in variantGroup.Options)
											{
												if (variantGroupCount < showMaxVariantGroups)
												{
													var optionsCount = variantGroup.Options.Count();

													if (variantsCount < showMaxVariants)
													{
														string optionWidth = !string.IsNullOrEmpty(variant.Color) ? "w-25" : "";

														<article class="static-variants-option @optionWidth @(theme)" title="@product.Name @variant.Name" style="transition-delay: calc(var(--animation-speed-in) * @variantsCount); pointer-events: initial;">
															@if (!string.IsNullOrEmpty(variant.Color))
															{
																string defaultImage = Dynamicweb.Context.Current.Server.UrlEncode(product.DefaultImage.Value);
																string variantImage = Dynamicweb.Context.Current.Server.UrlEncode(variant.Image.Value);

																<figure class="figure w-100 d-block m-0" onmouseover="switchVariantProduct('@product.Id', '@product.Price.PriceFormatted', '@variantImage')" onmouseout="switchVariantProduct('@product.Id', '@product.Price.PriceFormatted', '@defaultImage')">
																	<div class="d-flex align-items-center justify-content-center">
																		<img src="/admin/public/GetImage.ashx?image=@variantImage&width=75&height=75&crop=5&FillCanvas=true&format=webp&Quality=70" height="75" width="75" class="mw-100 mh-100 p-1 text-small" loading="lazy" decoding="async" alt="@product.Name, @variant.Name">
																	</div>
																</figure>
															}
															else
															{
																<div class="d-flex align-items-center justify-content-center">
																	@variant.Name
																</div>
															}
															<div class="visually-hidden">
																<h4>@Translate("Variant Name")</h4>
																<p>@product.Name, @variant.Name</p>
																<h4>@Translate("Variant Price")</h4>
																<p><span class="text-price">@product.Price.PriceFormatted</span></p>
															</div>
														</article>
													}

													variantsCount++;

													if (variantsCount == showMaxVariants && optionsCount != showMaxVariants)
													{
														int left = optionsCount - showMaxVariants;
														<div class="variant-option ms-1 d-flex justify-content-center align-items-center" style="transition-delay: calc(var(--animation-speed-in) * @variantsCount)">
															<span>+@left</span>
														</div>
													}													
												}
											}

										</div>

										variantGroupCount++;
									}
								</div>
							}
						</div>
					</div>
					<div class="d-flex flex-column gap-1 h-100 position-relative @textPadding">
						<div class="flex-fill">
							<h3 class="h6 mb-0">
								<a href="@link" class="text-decoration-none">
									@product.Name @product.VariantId
								</a>
							</h3>
							@if (!Model.Item.GetBoolean("HideProductNumber")) { 
								<p class="small opacity-85 mb-2">@product.Number</p>
							}
							@if (mainFeatures.Count > 0)
							{
								<div class="mt-3 mb-2 grid gap-0">
									@foreach (CategoryFieldViewModel mainFeatureGroup in mainFeatures)
									{
										foreach (var field in mainFeatureGroup.Fields)
										{
											@RenderField(field.Value)
										}
									}
								</div>
							}
						</div>
						<div>
							@if (product.Price.Price != product.PriceBeforeDiscount.Price) {
								<span class="text-decoration-line-through text-muted">
									@product.PriceBeforeDiscount.PriceFormatted
								</span>
							}
							<span class="fw-bold" id="@priceId">
								<span class="text-price">@price</span>
							</span>
						</div>
						@if (product.VariantInfo.VariantInfo != null && staticVariantsLayout == "swatches")
						{
							var optionCount = product.VariantInfo.VariantInfo.Count();
							var showMaxVariants = 5;

							<div class="d-flex flex-row gap-1 align-items-center">
								@foreach (VariantInfoViewModel variant in product.VariantInfo.VariantInfo.Take(showMaxVariants))
								{
									<span class="colorbox colorbox-sm rounded-circle me-1" style="background-color: @variant.OptionColor"></span>
								}
								@if (optionCount > showMaxVariants)
								{
									int left = optionCount - showMaxVariants;
									<span class="ms-2">+@left</span>
								}
							</div>
						}
					</div>
				</div>
			</article>
		}
	</div>

	<div class="mb-3">
		<div class="text-center">
			<div class="opacity-85 mb-3">@loadedProducts @Translate("out of") @productList.TotalProductsCount @Translate("products")</div>
			@if (productList.PageCount != 1) {
				string sortBySelection = Dynamicweb.Context.Current.Request?.Form["SortBy"] ?? "name";

				<form method="post" action="@url" data-response-target-element="content" class="w-100">
					@foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
					{
						foreach (FacetViewModel facetItem in facetGroup.Facets)
						{
							foreach (FacetOptionViewModel facetOption in facetItem.Options)
							{
								if (facetOption.Selected)
								{
									<input type="hidden" name="@facetItem.QueryParameter" value="[@facetOption.Value]" />
								}
							}
						}
					}

					@if (productList?.Group?.Id != null) {
						<input type="hidden" name="GroupId" value="@productList.Group.Id" />
					}

					<input type="hidden" name="PageSize" value="@pageSize" />
					<input type="hidden" name="SortBy" value="@sortBySelection" />
					<input type="hidden" name="RequestType" value="UpdateList" />

					<button class="btn btn-primary mb-3" type="button" onclick="ProductList.Update(event)">@Translate("Load more products")</button>
				</form>
			}
			<a href="#content" class="btn btn-clean">@Translate("Back to top")</a>
		</div>
	</div>

	<script>
		function switchVariantProduct(id, price, imagesrc) {
			var productImageElement = document.querySelector("#ProductImage_" + id);
			var productPriceElement = document.querySelector("#ProductPrice_" + id + " .text-price");

			if (productPriceElement) {
				productPriceElement.innerText = price;
			}

			if (productImageElement) {
				productImageElement.src = imagesrc;

				var imageSrcset = productImageElement.srcset;
				imageSrcset = imageSrcset.replace(/image=.*?&/g, 'image=' + imagesrc + "&");

				productImageElement.srcset = imageSrcset;
			}
		}
	</script>
} else {
	if (!isVisualEditor) {
		<div class="alert alert-dark m-0">
			@Translate("We did not find anything matching your search result")
		</div>
	} else {
		<div class="alert alert-dark m-0" role="alert">
			<span>@Translate("Product list: The list will be shown here, if any")</span>
		</div>
	}
}

@helper RenderField(FieldValueViewModel field) { 
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";

	if (fieldValue != "") {
		fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
		fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

		if (field.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>)) {
			fieldValue = "";

			foreach (FieldOptionValueViewModel option in field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>) {
				fieldValue = option.Value;
			}
		}

		bool isColor = false;
		if (fieldValue.Contains("#") && (Translate(field.Name) == Translate("Color") || Translate(field.Name) == Translate("Colour"))) {
			isColor = true;   
		}

		if (!string.IsNullOrEmpty(fieldValue)) {
			<dt class="g-col-4 py-2 fw-bold">@field.Name</dt>

			<dd class="g-col-8 py-2 mb-0">
			@if (!isColor) {
				@fieldValue
			} else {
				<div class="position-relative">
					<span class="colorbox-sm" style="background-color: @fieldValue"></span>
				</div>
			}
			</dd>
		} 
	}
}
