@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.Products.FieldDisplayGroups
@using Dynamicweb.Frontend

@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	string[] variantId = product.VariantId.Split('.');
	string disableAddToCart = string.IsNullOrEmpty(product.VariantId) && product.VariantInfo.VariantInfo != null ? "disabled" : "";
	string hideStockState = string.IsNullOrEmpty(product.VariantId) && product.VariantInfo.VariantInfo != null ? "d-none" : "";

	string url = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	IEnumerable<string> selectedDisplayGroups = Model.Item.GetList("MainFeatures").SelectedValues;
	List<CategoryFieldViewModel> mainFeatures = new List<CategoryFieldViewModel>();

	foreach (var selection in selectedDisplayGroups)
	{
		foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
		{		
			if (selection == group.Id) {
				mainFeatures.Add(group);
			}
		}
	}

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-6");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;
}

<div class="h-100 @(contentPadding) @(theme)">
	<div class="d-flex flex-column gap-4 js-product">
		<div>
			<h1 class="@titleFontSize" itemprop="name">@product.Name</h1>
			@if (!Model.Item.GetBoolean("HideProductNumber")) { 
				<div class="opacity-85">@product.Number</div>
			}
		</div>
		<div>
			<div class="fs-4 fw-bold" itemprop="offers" itemscope itemtype="https://schema.org/Offer">
				<span itemprop="priceCurrency" content="@product.Price.CurrencyCode" class="d-none"></span>
				<span itemprop="price" content="@product.Price.Price" class="d-none"></span>
				<span class="text-price">@product.Price.PriceFormatted</span>
			</div>
			@if (product.Price.Price != product.PriceBeforeDiscount.Price) {
				<div class="text-decoration-line-through opacity-85">
					@product.PriceBeforeDiscount.PriceFormatted
				</div>
			}
		</div>

		@if (!string.IsNullOrEmpty(product.ShortDescription))
		{
			<div class="mb-0-last-child" itemprop="disambiguatingDescription">
				@product.ShortDescription
			</div>
		}

		@if (mainFeatures.Count > 0)
		{
			<dl class="d-flex flex-column gap-3 m-0">
				@foreach (CategoryFieldViewModel mainFeatureGroup in mainFeatures)
				{
					foreach (var field in mainFeatureGroup.Fields)
					{
					@RenderField(field.Value)
					}
				}
			</dl>
		}

		@if (product.VariantInfo.VariantInfo != null) {
			int groupNumber = 1;

			<div class="mb-3 js-variant-selector" data-combinations="@string.Join(",", product.VariantCombinations())">
				@foreach (var variantGroup in product.VariantGroups())
				{
					VariantGroupViewModel group = variantGroup;

					<h3 class="h6">@group.Name</h3>
					<div class="mb-3 js-variant-group" data-group-id="@groupNumber">
						@foreach (var option in group.Options)
						{
							string active = variantId.Contains(option.Id) ? "active" : "";

							if (!string.IsNullOrEmpty(option.Color))
							{
								<button type="button" class="btn colorbox rounded-circle me-1 mb-2 d-inline-block variant-option js-variant-option @active" style="background-color: @option.Color" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id"></button>
							}
							else if (!string.IsNullOrEmpty(option.Color) && !string.IsNullOrEmpty(option.Image.Value))
							{
								<button type="button" class="btn p-0 d-inline-block mb-2 variant-option js-variant-option @active" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id">
									<img src="/Admin/Public/GetImage.ashx?image=@(option.Image.Value)&width=42&Format=WebP&Quality=70" />
								</button>
							} 
							else 
							{
								<button type="button" class="btn btn-secondary d-inline-block mb-2 variant-option js-variant-option @active" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id">
									@option.Name
								</button>
							}
						}
					</div>
			
					groupNumber++;
				}
			</div>
		}

		<form method="post" action="@url">
			<div class="d-flex flex-row">
				<input type="hidden" name="redirect" value="false" />
				<input type="hidden" name="ProductId" value="@product.Id" />
				<input type="hidden" name="ProductName" value="@product.Name" />
				@if (product.DefaultImage != null) {
					<input type="hidden" name="Thumbnail" value="/Admin/Public/GetImage.ashx?image=@(product.DefaultImage.Value)&width=80&format=webp" />
				}
				<input type="hidden" name="cartcmd" value="add" />

				@if (!string.IsNullOrEmpty(product.VariantId)) {
					<input type="hidden" name="VariantId" value="@product.VariantId" />
				}

				@if (!Model.Item.GetBoolean("QuantitySelector"))
				{
					<div class="flex-fill">
						<input id="Quantity_@product.Id" name="Quantity" value="1" type="hidden">
						<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary js-add-to-cart-button w-100 @disableAddToCart" title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)">@Translate("Add to cart")</button>
					</div>
				} else {
					<div class="flex-fill input-group input-primary-button-group d-flex flex-row">
						<input id="Quantity_@product.Id" name="Quantity" value="1" class="form-control" style="max-width: 100px" type="number">
						<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary flex-fill js-add-to-cart-button @disableAddToCart" title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)">@Translate("Add to cart")</button>
					</div>
				}
			</div>

			@if (!Model.Item.GetBoolean("HideStockState")) {
				<div class="mt-3 js-stock-state @hideStockState">
					@if (product.StockLevel > 0) {
						if (!Model.Item.GetBoolean("HideInventory")) {
							<small class="text-success">@product.StockLevel @Translate("Products available in stock")</small>
						} else {
							<small class="text-success">@Translate("Available in stock")</small>
						}
					} else {
						<small class="text-danger">@Translate("Out of Stock")</small>
					}
				</div>
			}
		</form>
	</div>
</div>


@helper RenderField(FieldValueViewModel field) { 
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";

	if (fieldValue != "") {
		fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
		fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

		if (field.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>)) {
			fieldValue = "";

			foreach (FieldOptionValueViewModel option in field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>) {
				fieldValue = option.Value;
			}
		}

		bool isColor = false;
		if (fieldValue.Contains("#") && (Translate(field.Name) == Translate("Color") || Translate(field.Name) == Translate("Colour"))) {
			isColor = true;   
		}

		if (!string.IsNullOrEmpty(fieldValue)) {
			<div class="grid" style="row-gap: 0;">
				<dt class="g-col-12 g-col-sm-4 g-col-lg-12 fw-bold m-0">@field.Name</dt>
				@if (!isColor) {
					<dd class="g-col-12 g-col-sm-8 g-col-lg-12 m-0">@fieldValue</dd>
				} else {
					<dd class="g-col-12 g-col-sm-8 g-col-lg-12 m-0">
						<div class="position-relative">
							<span class="colorbox-small" style="background-color: @fieldValue"></span>
						</div>
					</dd>
				}
			</div>				

		} 
	}
}

@if (product.VariantInfo.VariantInfo != null)
{
	<script>
		//Initialize the variant selector
		document.addEventListener('load', function (event) {
			swift.VariantSelector.init();
		});
	</script>
}

<div aria-live="polite" aria-atomic="true">
	<div class="toast-container position-fixed bottom-0 end-0 p-3">
		<div id="cartNotificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
			<div class="toast-header">
				<strong id="cartNotificationToastHeader" class="me-auto">@Translate("Added to cart")</strong>
				<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
			</div>
			<div class="toast-body d-flex gap-3 theme theme-gray">
				<img id="cartNotificationToast_Image" src="" />
				<div id="cartNotificationToast_Text"></div>
			</div>
		</div>
	</div>
</div>


<script>
	var cartNotification = document.querySelector("#cartNotificationToast");

	document.addEventListener("update.swift.cart", function (event) {
		var data = Object.fromEntries(event.detail.formData.entries());
		var toast = new Toast(cartNotification);

		event.detail.formData.set("Quantity", "2");

		if (data.Quantity == "1") {
			document.querySelector("#cartNotificationToastHeader").innerHTML = data.Quantity + " " + '@Translate("Product added to cart")';
		} else {
			document.querySelector("#cartNotificationToastHeader").innerHTML = data.Quantity + " " + '@Translate("Products added to cart")';
		}

		if (data.Thumbnail != "") {
			document.querySelector("#cartNotificationToast_Image").src = data.Thumbnail;
		}
		document.querySelector("#cartNotificationToast_Text").innerHTML = data.ProductName;

		toast.show();

		console.log("Data " + JSON.stringify(data));
		console.log("ProductID " + data.ProductId);
		console.log("Button " + event.detail.parentEvent);
		event.preventDefault();
	});

	document.addEventListener("updated.swift.cart", function(event) { 
		console.log("Updated " + event.detail.html);
	});
</script>
