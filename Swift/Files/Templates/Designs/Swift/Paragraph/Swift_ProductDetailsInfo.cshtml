@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites
@using Dynamicweb.Ecommerce.Products.FieldDisplayGroups
@using Dynamicweb.Frontend

@{
	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;
	bool hideAddToCart = anonymousUsersLimitations.Contains("cart") && anonymousUser;
	hideAddToCart = product.VariantInfo.VariantInfo != null && Model.Item.GetBoolean("HideVariantSelector") ? true : hideAddToCart;
	bool hidePrice = anonymousUsersLimitations.Contains("price") && anonymousUser;
	bool hideFavoritesSelector = !string.IsNullOrEmpty(Model.Item.GetString("HideFavoritesSelector")) ? Model.Item.GetBoolean("HideFavoritesSelector") : false;

	bool IsNeverOutOfStock = product.NeverOutOfstock;
	string[] variantId = product.VariantId.Split('.');
	string disableAddToCart = (product.StockLevel <= 0) ? "disabled" : "";
	if (IsNeverOutOfStock)
	{
		disableAddToCart = "";
	}

	// Does product has a expected delivery data
	bool hasExpectedDelivery = product.ExpectedDelivery != null && product.ExpectedDelivery > DateTime.Now;
	string expectedDeliveryDate = product.ExpectedDelivery?.ToShortDateString() ?? "";

	string url = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	IEnumerable<string> selectedDisplayGroups = Model.Item.GetRawValueString("MainFeatures").Split(',').ToList();
	List<CategoryFieldViewModel> mainFeatures = new List<CategoryFieldViewModel>();

	foreach (var selection in selectedDisplayGroups)
	{
		foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
		{
			if (selection == group.Id)
			{
				mainFeatures.Add(group);
			}
		}
	}

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-6");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string quantityPricesLayout = Model.Item.GetRawValueString("QuantityPricesLayout", "list");

	string minQty = product.PurchaseMinimumQuantity != 1 ? "min=\"" + product.PurchaseMinimumQuantity.ToString() + "\"" : "min=\"1\"";
	string stepQty = product.PurchaseQuantityStep > 1 ? product.PurchaseQuantityStep.ToString() : "1";
	string valueQty = product.PurchaseMinimumQuantity > product.PurchaseQuantityStep ? product.PurchaseMinimumQuantity.ToString() : stepQty;
	string qtyValidCheck = stepQty != "1" ? "onkeyup=\"swift.Cart.QuantityValidate(event)\"" : "";

	string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	string priceMin = "";
	string priceMax = "";

	var favoriteParameters = new Dictionary<string, object>();
	if (!anonymousUser && !hideFavoritesSelector)
	{
		IEnumerable<FavoriteList> favoreiteLists = Pageview.User.GetFavoriteLists();
		int defaultFavoriteListId = 0;

		if (favoreiteLists.Count() == 1) {
			foreach (FavoriteList list in favoreiteLists) {
				defaultFavoriteListId = list.ListId;
			}
		}

		favoriteParameters.Add("ListId", defaultFavoriteListId);
	}

	var badgeParms = new Dictionary<string, object>();
	badgeParms.Add("size", "h7");
	badgeParms.Add("saleBadgeType", Model.Item.GetRawValue("SaleBadgeType"));
	badgeParms.Add("saleBadgeCssClassName", Model.Item.GetRawValue("SaleBadgeDesign"));
	badgeParms.Add("newBadgeCssClassName", Model.Item.GetRawValue("NewBadgeDesign"));
	badgeParms.Add("newPublicationDays", Model.Item.GetInt32("NewPublicationDays"));
	badgeParms.Add("campaignBadgesValues", Model.Item.GetRawValueString("CampaignBadges"));

	bool saleBadgeEnabled = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("SaleBadgeDesign")) && Model.Item.GetRawValueString("SaleBadgeDesign") != "none" ? true : false;
	bool newBadgeEnabled = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("NewBadgeDesign")) && Model.Item.GetRawValueString("NewBadgeDesign") != "none" ? true : false;
	DateTime createdDate = product.Created.Value;
	bool showBadges = saleBadgeEnabled && product.Discount.Price != 0 ? true : false;
	showBadges = (newBadgeEnabled && Model.Item.GetInt32("NewPublicationDays") == 0) || (newBadgeEnabled && (createdDate.AddDays(Model.Item.GetInt32("NewPublicationDays")) > DateTime.Now)) ? true : showBadges;
	showBadges = !string.IsNullOrEmpty(Model.Item.GetRawValueString("CampaignBadges")) ? true : showBadges;
}

<div class="h-100 @(contentPadding) @(theme)">
	<div class="d-flex flex-column gap-4 js-product">
		@if (showBadges) {
			<div>
				@RenderPartial("Components/EcommerceBadge.cshtml", product, badgeParms)
			</div>
        }

		<div>
			<h1 class="@titleFontSize" itemprop="name">@product.Name</h1>
			@if (!Model.Item.GetBoolean("HideProductNumber"))
			{
				<div class="opacity-85">@product.Number</div>
			}
		</div>

		@if (!hidePrice)
		{
			<div>
				<div class="h4" itemprop="offers" itemscope itemtype="https://schema.org/Offer">
					<span itemprop="priceCurrency" content="@product.Price.CurrencyCode" class="d-none"></span>

					@if (showPricesWithVat == "false" && !neverShowVat)
					{
						string beforePrice = product.PriceBeforeDiscount.PriceWithoutVatFormatted;

						<span itemprop="price" content="@product.Price.PriceWithoutVat" class="d-none"></span>
						if (product.Price.Price != product.PriceBeforeDiscount.Price)
						{
							<span class="text-decoration-line-through opacity-75 me-3">@beforePrice</span>
						}
					}
					else
					{
						string beforePrice = product.PriceBeforeDiscount.PriceFormatted;

						<span itemprop="price" content="@product.Price.Price" class="d-none"></span>
						if (product.Price.Price != product.PriceBeforeDiscount.Price)
						{
							<span class="text-decoration-line-through opacity-75 me-3">@beforePrice</span>
						}
					}

					@if (showPricesWithVat == "false" && !neverShowVat)
					{
						string price = product.Price.PriceWithoutVatFormatted;
						if (product?.VariantInfo?.VariantInfo != null)
						{
							priceMin = product?.VariantInfo?.PriceMin?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithoutVatFormatted : "";
							priceMax = product?.VariantInfo?.PriceMax?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithoutVatFormatted : "";
						}
						if (priceMin != priceMax)
						{
							price = priceMin + " - " + priceMax;
						}
						<span class="text-price">@price</span>
					}
					else
					{
						string price = product.Price.PriceFormatted;
						if (product?.VariantInfo?.VariantInfo != null)
						{
							priceMin = product?.VariantInfo?.PriceMin?.PriceFormatted != null ? product.VariantInfo.PriceMin.PriceFormatted : "";
							priceMax = product?.VariantInfo?.PriceMax?.PriceFormatted != null ? product.VariantInfo.PriceMax.PriceFormatted : "";
						}
						if (priceMin != priceMax)
						{
							price = priceMin + " - " + priceMax;
						}
						<span class="text-price">@price</span>
					}
				</div>
				@if (showPricesWithVat == "false" && !neverShowVat)
				{
					string price = product.Price.PriceWithVatFormatted;
					if (product?.VariantInfo?.VariantInfo != null)
					{
						priceMin = product?.VariantInfo?.PriceMin?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithVatFormatted : "";
						priceMax = product?.VariantInfo?.PriceMax?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithVatFormatted : "";
					}
					if (priceMin != priceMax)
					{
						price = priceMin + " - " + priceMax;
					}
					<small class="opacity-85 fst-normal">@price @Translate("Incl. VAT")</small>
				}

				@if (product.Prices.Count > 0) {
					if (quantityPricesLayout == "list") {
						<div class="mt-3">
							@foreach (PriceListViewModel quantityPrice in product.Prices)
							{
								string quantityLabel = Translate("PCS");
								string quantityPriceSuffix = quantityPrice.Quantity > 1 ? Translate("pr. PCS") : "";

								<small class="d-block opacity-75"><span>@quantityPrice.Quantity @quantityLabel</span> - <span class="fw-bold">@quantityPrice.Price.PriceFormatted @quantityPriceSuffix</span></small>
							}
						</div>
                    } else if (quantityPricesLayout == "table") {
						<div class="grid">
							<table class="table table-sm mt-3 g-col-12 g-col-lg-6">
								<thead>
									<tr>
										<td>@Translate("QTY")</td>
										<td>@Translate("pr. PCS")</td>
									</tr>
								</thead>
								<tbody>
									@foreach (PriceListViewModel quantityPrice in product.Prices)
									{
										<tr>
											<td>@quantityPrice.Quantity</td>
											<td>@quantityPrice.Price.PriceFormatted</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
                    }
                }
			</div>
		}

		@if (!string.IsNullOrEmpty(product.ShortDescription))
		{
			<div class="mb-0-last-child" itemprop="disambiguatingDescription">
				@product.ShortDescription
			</div>
		}

		@if (mainFeatures.Count > 0)
		{
			foreach (CategoryFieldViewModel mainFeatureGroup in mainFeatures)
			{
				<dl class="grid gap-0">
					@foreach (var field in mainFeatureGroup.Fields)
					{
						@RenderField(field.Value)
					}
				</dl>
			}
		}

		@if (product.VariantInfo.VariantInfo != null && !Model.Item.GetBoolean("HideVariantSelector"))
		{
			int groupNumber = 1;

			<form class="mb-3 js-variant-selector" data-combinations="@string.Join(",", product.VariantCombinations())">
				<input type="hidden" name="variantid" />

				@foreach (var variantGroup in product.VariantGroups())
				{
					VariantGroupViewModel group = variantGroup;

					<h3 class="h6">@group.Name</h3>
					<div class="mb-3 js-variant-group" data-group-id="@groupNumber">
						@foreach (var option in group.Options)
						{
							string active = variantId.Contains(option.Id) ? "active" : "";

							if (!string.IsNullOrEmpty(option.Color))
							{
								<button type="button" class="btn colorbox rounded-circle me-1 mb-2 d-inline-block variant-option js-variant-option @active" style="background-color: @option.Color" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id"></button>
							}
							else if (!string.IsNullOrEmpty(option.Color) && !string.IsNullOrEmpty(option.Image.Value))
							{
								<button type="button" class="btn p-0 d-inline-block mb-2 variant-option js-variant-option @active" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id">
									<img src="/Admin/Public/GetImage.ashx?image=@(option.Image.Value)&width=42&Format=WebP&Quality=70" />
								</button>
							}
							else
							{
								<button type="button" class="btn btn-secondary d-inline-block mb-2 variant-option js-variant-option @active" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id">
									@option.Name
								</button>
							}
						}
					</div>

					groupNumber++;
				}
			</form>
		}

		<div class="d-flex flex-row flex-nowrap gap-2">
			@if (!hideAddToCart)
			{
				<form method="post" action="@url" class="flex-fill">
					<input type="hidden" name="redirect" value="false" />
					<input type="hidden" name="ProductId" value="@product.Id" />
					<input type="hidden" name="cartcmd" value="add" />

					@if (!string.IsNullOrEmpty(product.VariantId))
					{
						<input type="hidden" name="VariantId" value="@product.VariantId" />
					}
					@if (!Model.Item.GetBoolean("QuantitySelector"))
					{
						<input id="Quantity_@product.Id" name="Quantity" value="@valueQty" type="hidden">
						<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary w-100 js-add-to-cart-button @disableAddToCart" @disableAddToCart title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)">@Translate("Add to cart")</button>
					} else { 
						<div class="input-group input-primary-button-group js-input-group d-flex flex-row flex-nowrap">
							<label for="Quantity_@(product.Id)" class="visually-hidden">@Translate("Quantity")</label>
							<input id="Quantity_@product.Id" name="Quantity" value="@valueQty" step="@stepQty" @minQty class="form-control" style="max-width: 96px; min-width:64px;" type="number">
							<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary flex-fill js-add-to-cart-button @disableAddToCart" @disableAddToCart title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)">@Translate("Add to cart")</button>
						</div>

						if (stepQty != "1")
						{
							<div class="invalid-feedback d-none">
								@Translate("Please select a quantity that is dividable by") @stepQty
							</div>
						}
					}
				</form>
				if (!anonymousUser && !hideFavoritesSelector)
				{
					@RenderPartial("Components/ToggleFavorite.cshtml", product, favoriteParameters)
				}
			}
			else if (!anonymousUser && !hideFavoritesSelector)
			{
				<div class="flex-fill">
					@Translate("Add to favorites") @RenderPartial("Components/ToggleFavorite.cshtml", product, favoriteParameters)
				</div>
			}
		</div>
	</div>
	@if (!Model.Item.GetBoolean("HideStockState"))
	{
		if (!IsNeverOutOfStock)
		{
			<div class="mt-3 js-stock-state">

				@if (product.StockLevel > 0)
				{
					if (!Model.Item.GetBoolean("HideInventory"))
					{
						<p class="small text-success m-0">@product.StockLevel @Translate("Products available in stock")</p>
					}
					else
					{
						<p class="small text-success m-0">@Translate("Available in stock")</p>
					}
				}

				else
				{
					<p class="small text-danger m-0">@Translate("Out of Stock")</p>
				}

				@if (hasExpectedDelivery)
				{
					<p>
						<span>@Translate("Expected back in stock:")</span>
						<span>@expectedDeliveryDate</span>
					</p>
				}

			</div>
		}
	}
</div>

@helper RenderField(FieldValueViewModel field)
{
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";
	bool noValues = false;

	if (!string.IsNullOrEmpty(fieldValue))
	{
		if (field.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>))
		{
			System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
			noValues = values.Count > 0 ? false : true;
		}
	}

	if (!string.IsNullOrEmpty(fieldValue) && noValues == false)
	{
		<dt class="g-col-12 g-col-sm-4 g-col-lg-12 fw-bold m-0">@field.Name</dt>
		<dd class="g-col-12 g-col-sm-8 g-col-lg-12 mb-3">
			@RenderFieldValue(field)
		</dd>
	}
}

@helper RenderFieldValue(FieldValueViewModel field)
{
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";

	fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
	fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

	bool isColor = false;

	if (field.Value.GetType() == typeof(System.Collections.Generic.List<Dynamicweb.Ecommerce.ProductCatalog.FieldOptionValueViewModel>))
	{
		int valueCount = 0;
		System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
		int totalValues = values.Count;

		foreach (FieldOptionValueViewModel option in values)
		{
			if (option.Value.Substring(0, 1) == "#")
			{
				isColor = true;
			}

			if (!isColor)
			{
				@option.Name
			}
			else
			{
				<span class="colorbox-sm" style="background-color: @option.Value" title="@option.Value"></span>
			}

			if (valueCount != totalValues && valueCount < (totalValues - 1))
			{
				if (isColor)
				{
					<text> </text>
				}
				else
				{
					<text>, </text>
				}
			}
			valueCount++;
		}
	}
	else
	{
		if (fieldValue.Substring(0, 1) == "#")
		{
			isColor = true;
		}

		if (!isColor)
		{
			@fieldValue
		}
		else
		{
			<span class="colorbox-sm" style="background-color: @fieldValue" title="@fieldValue"></span>
		}
	}
}

@if (product.VariantInfo.VariantInfo != null)
{
	<script type="module">
		swift.VariantSelector.init();
	</script>
}


