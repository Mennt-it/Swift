@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	bool productViewModelFound = false;
	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		productViewModelFound = true;
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	string relationType = Model.Item.GetRawValueString("RelationType", "trending");

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

	string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "");
	buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
	buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	string generalTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("GeneralTheme")) ? " theme " + Model.Item.GetRawValueString("GeneralTheme").Replace(" ", "").Trim().ToLower() : "";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string imageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", "").Trim().ToLower() : "";

	string detailPageId = Model.Item.GetLink("ProductDetailsPage") != null ? Model.Item.GetLink("ProductDetailsPage").PageId.ToString() : "";
	string productPageByNavigationTag = GetPageIdByNavigationTag("ProductDetailPage") != 0 ? GetPageIdByNavigationTag("ProductDetailPage").ToString() : "";
	detailPageId = detailPageId == "" ? productPageByNavigationTag : detailPageId;

	string pageId = Model.Item.GetLink("ProductSliderServicePage") != null ? Model.Item.GetLink("ProductSliderServicePage").PageId.ToString() : "";
	string servicePageByNavigationTag = GetPageIdByNavigationTag("ProductSliderService") != 0 ? GetPageIdByNavigationTag("ProductSliderService").ToString() : "";
	pageId = pageId == "" ? servicePageByNavigationTag : pageId;

	string url = "/Default.aspx?ID=" + pageId;
	if (!url.Contains("LayoutTemplate")) {
		url += url.Contains("?") ? "&LayoutTemplate=Designs/Swift/Swift_PageClean.cshtml" : "?LayoutTemplate=Designs/Swift/Swift_PageClean.cshtml";
	}
	if (isVisualEditor) {
		url += "&VisualEdit=True";
	}

	//If products is added through the trending groups selector
	IList<ProductGroupViewModel> groupsToRelateToTrending = Model.Item.GetValue<IList<ProductGroupViewModel>>("GroupsToRelateToTrending");
	IList<ProductGroupViewModel> groupsToRelateToMostSold = Model.Item.GetValue<IList<ProductGroupViewModel>>("GroupsToRelateToMostSold");
	IList<string> relateFromGroupIds = new List<string>{};

	if (groupsToRelateToTrending != null && relationType == "trending") {
		foreach (var fromGroup in groupsToRelateToTrending)
		{
			relateFromGroupIds.Add(fromGroup.Id);
		}
	}

	if (groupsToRelateToMostSold != null && relationType == "most-sold") {
		foreach (var fromGroup in groupsToRelateToMostSold)
		{
			relateFromGroupIds.Add(fromGroup.Id);
		}
	}

	//If products is added through the selector
	IList<string> relateFromProductIds = new List<string>{};

	ProductListViewModel productsToRelateTo = Model.Item.GetValue<ProductListViewModel>("ProductsToRelateTo");
	if (productsToRelateTo != null && relationType == "frequently") {
		foreach (var fromProduct in productsToRelateTo.Products)
		{
			relateFromProductIds.Add(fromProduct.Id);
		}
	}

	ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("Products");
	if (products != null && relationType == "selected") {
		foreach (var productSelection in products.Products)
		{
			relateFromProductIds.Add(productSelection.Id);
		}
	}

	if (relationType == "related-products") {
		foreach (var group in product.RelatedGroups)
		{
			foreach (var relatedProduct in group.Products)
			{
				relateFromProductIds.Add(relatedProduct.ProductId);
			}
		}
	}

	string groupIds = productViewModelFound ? product.PrimaryOrDefaultGroup.Id : string.Join(",", relateFromGroupIds);
	string productIds = productViewModelFound && relationType != "related-products" ? product.Id : string.Join(",", relateFromProductIds);
	string title = Model?.Item?.GetString("Title") != null ? Model.Item.GetString("Title") : Translate("Products");

	string linkParameters = "";
	linkParameters += relationType != "related-products" ? "&GroupId=" + groupIds : "";
	linkParameters += !string.IsNullOrEmpty(productIds) ? "&MainProductId=" + productIds : "";
	string productListPageId = Model.Item.GetLink("ProductListPage") != null ? Model.Item.GetLink("ProductListPage").PageId.ToString() : "";
	string productListPageByNavigationTag = GetPageIdByNavigationTag("Shop") != 0 ? GetPageIdByNavigationTag("Shop").ToString() : "";
	productListPageId = productListPageId == "" ? productListPageByNavigationTag : productListPageId;
	string link = "/Default.aspx?ID=" + productListPageId + linkParameters;
}

<form method="post" action="@url" id="RelatedProductsForm_@Model.ID" data-response-target-element="RelatedProducts_@Model.ID" data-preloader="inline" data-update-url="false">
	<input type="hidden" name="Link" value="@link" />
	<input type="hidden" name="HideTitle" value="@Model.Item.GetString("HideTitle")" />
	@if (Model.Item.GetInt32("ProductsCount") != 0) { 
		<input type="hidden" name="PageSize" value="@Model.Item.GetInt32("ProductsCount")" />
	}
	@if (detailPageId != "") { 
		<input type="hidden" name="ProductDetailsPage" value="@detailPageId" />
	}
	@if (!Model.Item.GetBoolean("HideTitle")) { 
		<input type="hidden" name="HeadingTitle" id="RelatedProductsTitle_@Model.ID" value="@title" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("Subtitle"))) { 
		<input type="hidden" name="Subtitle" value="@Model.Item.GetString("Subtitle")" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("LinkText"))) { 
		<input type="hidden" name="LinkText" value="@Model.Item.GetString("LinkText")" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("ImageAspectRatio"))) { 
		string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
		ratio = ratio != "0" ? ratio : "";
		<input type="hidden" name="ImageAspectRatio" value="@ratio" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("Layout"))) { 
		<input type="hidden" name="Layout" value="@Model.Item.GetRawValueString("Layout")" />
	}
	@if (titleFontSize != "") { 
		<input type="hidden" name="TitleFontSize" value="@titleFontSize" />
	}
	@if (subtitleFontSize != "") { 
		<input type="hidden" name="SubtitleFontSize" value="@subtitleFontSize" />
	}
	@if (buttonStyle != "") { 
		<input type="hidden" name="ButtonStyle" value="@buttonStyle" />
	}
	@if (generalTheme != "") { 
		<input type="hidden" name="GeneralTheme" value="@generalTheme" />
	}
	@if (theme != "") { 
		<input type="hidden" name="Theme" value="@theme" />
	}
	@if (imageTheme != "") { 
		<input type="hidden" name="ImageTheme" value="@imageTheme" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("ContentPadding"))) { 
		string contentPadding = Model.Item.GetRawValueString("ContentPadding");
		<input type="hidden" name="ContentPadding" value="@contentPadding" />
	}
	<input type="hidden" name="TextReadability" value="@maxWidth" />

	@* Types *@
	@if (relationType == "trending") {
		<input type="hidden" name="SortBy" value="OrderCountGrowth" /> 
	}
	@if (relationType == "most-sold") {
		<input type="hidden" name="SortBy" value="OrderCount" /> 
	}
	@if (relationType == "frequently") {
		<input type="hidden" name="BoughtWithProductIds" value="[@productIds]" /> 
	}

	@if (relationType == "trending" || relationType == "most-sold") {
		if (groupIds != "") { 
			<input type="hidden" name="GroupId" value="@groupIds" />
		}
	}

	@if (relationType == "selected" || relationType == "related-products") {
		<input type="hidden" name="MainProductID"  id="MainProductID_@Model.ID" value="@productIds" /> 
	}

	@if (relationType != "related-products") {
		<div class="w-100 h-100">
			<div id="RelatedProducts_@Model.ID" class="h-100" style="min-height: 345px"></div>
		</div>
    } else {
		<div class="grid gap-6 w-100 h-100">
			@foreach (var group in product.RelatedGroups)
			{
				<div id="RelatedProducts_@(Model.ID)_@group.Id" class="g-col-12 h-100" style="min-height: 345px"></div>
			}
		</div>
    }
</form>

@if (relationType != "related-products") {
	<script type="module">
		swift.PageUpdater.Update(document.querySelector("#RelatedProducts_@Model.ID"));
	</script>
} else {
	foreach (var group in product.RelatedGroups)
	{
		IList<string> fromProductIds = new List<string>{};

		foreach (var relatedProduct in group.Products) {
			fromProductIds.Add(relatedProduct.ProductId);
		}

		<script type="module">
			document.querySelector("#MainProductID_@Model.ID").value = "@string.Join(",", fromProductIds)";
			document.querySelector("#RelatedProductsTitle_@Model.ID").value = "@group.Name";
			document.querySelector("#RelatedProductsForm_@Model.ID").setAttribute("data-response-target-element", "RelatedProducts_@(Model.ID)_@group.Id");
			swift.PageUpdater.Update(document.querySelector("#RelatedProducts_@(Model.ID)_@group.Id"));
		</script>
	}
}
