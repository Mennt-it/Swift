@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Environment

@{
	ProductListViewModel productList = new ProductListViewModel();

	ProductListViewModelSettings productSetting = new ProductListViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}
	else if (Pageview.Item["DummyProductGroup"] != null)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel groupList = pageViewModel.Item.GetValue("DummyProductGroup") != null ? pageViewModel.Item.GetValue("DummyProductGroup") as ProductListViewModel : new ProductListViewModel();

		if (groupList?.Group?.Id != null)
		{
			productList = ViewModelFactory.CreateView(productSetting, groupList.Group.Id);
			Dynamicweb.Context.Current.Items.Add("ProductList", productList);
		}
		else
		{
			productList = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.ProductGroups.GetGroups(Dynamicweb.Ecommerce.Common.Context.LanguageID).FirstOrDefault().Id);

			Dynamicweb.Context.Current.Items.Add("ProductList", productList);
		}
	}
	else if (Pageview.Item["DummyProductGroup"] == null)
	{
		productList = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.ProductGroups.GetGroups(Dynamicweb.Ecommerce.Common.Context.LanguageID).FirstOrDefault().Id);
		Dynamicweb.Context.Current.Items.Add("ProductList", productList);
	}

	string searchParameter = Dynamicweb.Context.Current.Request.GetString("q");

	bool hideTitle = Model.Item.GetBoolean("HideGroupTitle");
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");

	string groupName = productList?.Group?.Name != null ? productList.Group.Name : "";
	string headerName = searchParameter != "" ? Translate("Search results for") + ": " + searchParameter : groupName;

	bool hideDescription = Model.Item.GetBoolean("HideGroupDescription");
	string groupDescription = productList?.Group?.Description != null ? productList.Group.Description : "";
	string descriptionFontSize = Model.Item.GetRawValueString("DescriptionFontSize", "fs-6");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	string layout = Model.Item.GetRawValueString("Layout", "text-start");
	string autoMargin = layout == "text-start" ? "my-auto" : "m-auto";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

@if ((!string.IsNullOrEmpty(headerName) && !hideTitle) || !string.IsNullOrEmpty(groupDescription)) {
	<div class="h-100 @(contentPadding)@(theme) item_@Model.Item.SystemName.ToLower()">
		<div class="@(layout) @(maxWidth) w-100 @autoMargin">
			@if (!hideTitle) {
				<h1 class="@titleFontSize">@headerName</h1>
			}

			@if (!hideDescription && !string.IsNullOrEmpty(groupDescription)) {
				<div class="@descriptionFontSize">
					@groupDescription
				</div>
			}
		</div>
	</div>
} else if (Pageview.IsVisualEditorMode) {
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("Product list info: The info paragraph will be shown here, if any")</span>
	</div>
}
