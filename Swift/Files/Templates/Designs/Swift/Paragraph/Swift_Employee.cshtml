@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>


@{
	var employeeItems = Model.Item?.GetItems("Employee_Items") ?? Enumerable.Empty<Dynamicweb.Frontend.ItemViewModel>().ToList();
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	string contentPaddingClass = string.Empty;
	int gridSettings = !string.IsNullOrEmpty(Model.Item.GetInt32("GridSettings").ToString()) ? Model.Item.GetInt32("GridSettings") : 4;
	string gridSettingsClass = string.Empty;
	string ratio = Pageview.CurrentParagraph.Item["ImageAspectRatio"] != null ? Pageview.CurrentParagraph.Item["ImageAspectRatio"].ToString() : string.Empty;
	ratio = ratio != "0" ? ratio : string.Empty;
	string ratioCssClass = ratio != string.Empty ? " ratio" : string.Empty;
	string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;
	string imageObjectFit = ratio != string.Empty ? "object-fit: cover;" : "object-fit: contain;";
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	switch (contentPadding)
	{
		case "small":
			contentPaddingClass = "p-3";
			break;
		case "large":
			contentPaddingClass = "p-5";
			break;
	}

	switch (gridSettings)
	{
		case 2:
			gridSettingsClass = " grid-md-2";
			break;
		case 3:
			gridSettingsClass = " grid-md-3";
			break;
		case 4:
			gridSettingsClass = " grid-md-2 grid-lg-3 grid-xl-4";
			break;
		case 5:
			gridSettingsClass = " grid-md-2 grid-lg-3 grid-xl-5";
			break;
	}
}

<div class="grid@(gridSettingsClass)">
	@foreach (var item in employeeItems)
	{
		string image = item.GetString("Image", string.Empty);
		image = Dynamicweb.Context.Current.Server.UrlEncode(image);
		var imagePath = "/Admin/Public/GetImage.ashx?Image=" + image + "&Width=320&crop=0";
		string name = item.GetString("Name", string.Empty);
		string jobTitle = item.GetString("JobTitle", string.Empty);
		string phoneNumber = item.GetString("PhoneNumber", string.Empty);
		string email = item.GetString("Email", string.Empty);

		<div class="grid grid-1@(theme)">
			<figure class="m-0@(@ratioCssClass)" @ratioVariable>
				<img src="@imagePath" class="" alt="@name" style="@imageObjectFit">
			</figure>
			<div class="grid grid-1 @contentPaddingClass">
				<h5 class="">@name</h5>
				<div class="d-flex gap-2 align-items-center">
					<div class="icon-2">
						@ReadFile(iconPath + "briefcase.svg")
					</div>
					<div class="">@jobTitle</div>
				</div>
				<div class="d-flex gap-2 align-items-center">
					<div class="icon-2">
						@ReadFile(iconPath + "phone-call.svg")
					</div>
					<div teil class="">@phoneNumber</div>
				</div>
				<div class="d-flex gap-2 align-items-center">
					<div class="icon-2">
						@ReadFile(iconPath + "mail.svg")
					</div>
					<div class="">@email</div>
				</div>
			</div>
		</div>
	}
</div>
