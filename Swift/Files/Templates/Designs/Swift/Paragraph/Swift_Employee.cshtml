@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string name = Model.Item.GetRawValueString("Name", string.Empty);
	string jobTitle = Model.Item.GetRawValueString("JobTitle", string.Empty);
	string phoneNumber = Model.Item.GetRawValueString("PhoneNumber", string.Empty);
	string email = Model.Item.GetRawValueString("Email", string.Empty);

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", string.Empty);
	ratio = ratio != "0" ? ratio : string.Empty;
	string ratioCssClass = ratio != string.Empty ? "ratio" : string.Empty;
	string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;
	string imageObjectFit = ratio != string.Empty ? "object-fit: cover;" : "object-fit: contain;";
	string imageOriginalSize = ratio == string.Empty ? "mw-100 mh-100" : string.Empty;
	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;
	var parms = new Dictionary<string, object>();
	parms.Add("loading", "lazy");
	parms.Add("alt", Model.Item.GetString("Name"));
	parms.Add("columns", Model.GridRowColumnCount);

	var socailMediaItems = Model.Item?.GetItems("SocialMediaItems") ?? Enumerable.Empty<Dynamicweb.Frontend.ItemViewModel>().ToList();

	string layout = Model.Item.GetRawValueString("Layout", string.Empty);
	string boxedLayout = Model.Item.GetRawValueString("BoxedLayout", string.Empty);
	string cicleLayout = Model.Item.GetRawValueString("CircleLayout", string.Empty);
	string layoutClass = string.Empty;
	string employeeInfoAlignment = "d-flex flex-column gap-2";

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string themeClass = !string.IsNullOrEmpty(theme) ? theme + " p-4" : string.Empty;

	bool roundedEdges = !string.IsNullOrEmpty(Model.Item.GetBoolean("RoundedEdges").ToString()) ? Model.Item.GetBoolean("RoundedEdges") : false;
	string roundedEdgesClass = roundedEdges ? " rounded-5 overflow-hidden" : string.Empty;

	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";


	if (layout == "Boxed")
	{
		switch (boxedLayout)
		{
			case "ImageTop":
				layoutClass = "grid grid-1 gap-4";
				break;
			case "ImageLeft":
				layoutClass = "grid grid-1 grid-sm-2 gap-4";
				break;
		}
	}
	else if (layout == "Circle")
	{
		switch (cicleLayout)
		{
			case "ImageCircleTop":
				layoutClass = "grid grid-1 gap-4";
				employeeInfoAlignment = employeeInfoAlignment + " align-items-center text-center";
				break;
			case "imageCircleLeft":
				layoutClass = "grid grid-1 grid-sm-2 gap-4 align-items-center";
				employeeInfoAlignment = employeeInfoAlignment + " align-items-center align-items-sm-start text-center text-sm-start";
				break;
		}
	}
}

<div class="@layoutClass@(themeClass)@(roundedEdgesClass)">

	@if (!string.IsNullOrEmpty(Model.Item.GetRawValueString("Image")))
	{
		if (layout == "Boxed")
		{
			parms.Add("style", imageObjectFit);
			parms.Add("cssClass", imageOriginalSize + roundedEdgesClass);
			
			<div>
				<div class="@(@ratioCssClass)" @ratioVariable>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</div> 
			</div>
		}
		else if (layout == "Circle")
		{
			parms.Add("style", "object-fit:cover");
			parms.Add("cssClass", "rounded-circle");
		
			<div class="ratio ratio-1x1">
				@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
			</div>
		}
	}

	<div class="@employeeInfoAlignment">
		<h5>@name</h5>

		@if (!string.IsNullOrEmpty(jobTitle))
		{
			<div class="d-flex gap-2 opacity-85">
				<span class="icon-2">@ReadFile(iconPath + "briefcase.svg")</span>
				<span class="fs-7 lh-sm">@jobTitle</span>
			</div>
		}

		@if (!string.IsNullOrEmpty(phoneNumber))
		{
			<div class="d-flex gap-2 opacity-85">
				<span class="icon-2">@ReadFile(iconPath + "phone-call.svg")</span>
				<span class="fs-7 lh-sm">@phoneNumber</span>
			</div>
		}

		@if (!string.IsNullOrEmpty(email))
		{
			<div class="d-flex gap-2 opacity-85">
				<span class="icon-2">@ReadFile(iconPath + "mail.svg")</span>
				<span class="fs-7 lh-sm text-break">@email</span>
			</div>
		}

		@foreach (var item in socailMediaItems)
		{
			string socialMediaLinkLabel = item.GetString("SocialMediaLinkLabel", string.Empty);
			string socialMediaLink = item.GetString("SocialMediaLink", string.Empty);
			string socialMediaIcon = item.GetString("SocialMediaIcon", string.Empty);

			if (!string.IsNullOrEmpty(socialMediaLink) || !string.IsNullOrEmpty(socialMediaIcon) || !string.IsNullOrEmpty(socialMediaLinkLabel))
			{
				<a href="@socialMediaLink" class="d-flex gap-2 opacity-85">

					@if (!string.IsNullOrEmpty(socialMediaIcon))
					{
						<span class="icon-2">@ReadFile(socialMediaIcon)</span>
					}
					@if (!string.IsNullOrEmpty(socialMediaLinkLabel))
					{
						<span class="fs-7 lh-sm text-break">@socialMediaLinkLabel</span>
					}
				</a>
			}
		}
	</div>
</div>
