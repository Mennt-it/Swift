@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using System.IO
@using Dynamicweb.Frontend

@{
	string layout = Model.Item.GetRawValueString("Layout", "align-middle-center-text-center");

	bool movePageBehind = false;
	if (Pageview.Page.PropertyItem != null) { 
		string headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
		movePageBehind = headerCssClass == "fixed-top" ? true : false;
	}

	bool isFirstParagraph = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(Pageview.Page.ID)?.FirstOrDefault().ID == Model.ID;

	string posterHeight = Model.Item.GetRawValueString("PosterHeight", "h-100 min-vh-75 min-vh-md-100");
	posterHeight = posterHeight == "small" ? "min-vh-25 min-vh-md-50" : posterHeight;
	posterHeight = posterHeight == "medium" ? "min-vh-50 min-vh-md-75" : posterHeight;
	posterHeight = posterHeight == "large" ? "min-vh-75 min-vh-md-100" : posterHeight;

	string posterPadding = Model.Item.GetRawValueString("ContentPadding", "");
	posterPadding = posterPadding == "none" ? "p-3 px-xl-3 py-xl-4" : posterPadding;
	posterPadding = posterPadding == "small" ? "p-3 p-xl-4" : posterPadding;
	posterPadding = posterPadding == "large" ? "p-4 p-xl-5" : posterPadding;

	string posterWidth = "container-xl";

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

<div class="position-relative h-100@(theme)">
	@RenderVideo()

	@switch (layout)
	{
		case "align-top-left-text-left":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-start justify-content-start align-items-start @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-top-center-text-center":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-center justify-content-start align-items-center @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-top-right-text-right":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-end justify-content-start align-items-end @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-middle-left-text-left":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-start justify-content-center align-items-start @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-middle-center-text-center":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-center justify-content-center align-items-center @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-middle-right-text-right":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-end justify-content-center align-items-end @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-bottom-left-text-left":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-start justify-content-end align-items-start @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-bottom-center-text-center":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-center justify-content-end align-items-center @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
		case "align-bottom-right-text-right":
			<div class="@(posterWidth) h-100 @posterPadding">
				<div class="h-100 position-relative d-flex flex-column text-end justify-content-end align-items-end @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButton()
				</div>
			</div>
			break;
	}
</div>

@helper RenderVideo()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Video")))
	{
		string video = Model.Item.GetString("Video");
		string imageFilter = Model.Item.GetRawValueString("ImageFilter", "");
			imageFilter = imageFilter == "no-filter" ? "" : imageFilter;
			imageFilter = imageFilter == "filter" ? " image-filter" : imageFilter;
		string videoType = Path.GetExtension(video).ToLower();

		<div class="position-absolute top-0 bottom-0 end-0 start-0@(imageFilter)">
			<video preload="true" poster="/Admin/Public/GetImage.ashx?image=@Model.Item.GetFile("Image")&width=1280&format=webp" loop autoplay muted playsinline class="h-100 w-100" style="object-fit: cover;">
				<source src="@Model.Item.GetFile("Video")"
						type="video/@videoType.Replace(".", "")">
			</video>
		</div>
	}
	
}

@helper RenderTitle()
{

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-1");

		<h2 class="@titleFontSize mb-3">
			@Model.Item.GetString("Title")
		</h2>
	}
}

@helper RenderText()
{

	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{

		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<p class="@subtitleFontSize lead mb-3 max-w-75ch">@Model.Item.GetString("Text")</p>
	}
}

@helper RenderButton()
{
	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null) {
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType == "product-group") {
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string>{};

		if (selectedGroups != null) {
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel() {
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product") {
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string>{};

		if (products != null) {
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel() {
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (link != null && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : "";

		string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "primary");
		buttonStyle = buttonStyle == "primary" ? "btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? "btn-secondary" : buttonStyle;

		string ButtonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
		ButtonSize = ButtonSize == "small" ? " btn-sm" : ButtonSize;
		ButtonSize = ButtonSize == "regular" ? "" : ButtonSize;
		ButtonSize = ButtonSize == "large" ? " btn-lg" : ButtonSize;

		<div class="mt-3">
			<a href="@link.Url" class="btn @buttonStyle @(ButtonSize) stretched-link">@Model.Item.GetString("ButtonLabel")</a>
		</div>
	}
}

@if (movePageBehind && isFirstParagraph) {
<script>
		function setContentPosition() {
			const viewportWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
			var headerHeight = 0;
			var fixedPosterHeight;
			var desktopHeader = document.querySelector("#page-header-dekstop");
			var mobileHeader = document.querySelector("#page-header-mobile");

			if (viewportWidth > 992) {
				headerHeight = desktopHeader.clientHeight;
				fixedPosterHeight = "100vh";
			} else {
				headerHeight = mobileHeader.clientHeight;
				fixedPosterHeight = "75vh";
			}

			document.querySelector("#Poster_@(Pageview.CurrentParagraph.ID)").style.paddingTop = headerHeight + "px";
			document.querySelector("#Poster_@(Pageview.CurrentParagraph.ID)").style.setProperty("height", "calc(@(posterHeight) - " + headerHeight + "px)", "important");
		}
		setContentPosition();

		window.addEventListener("resize", function () {
			setContentPosition();
		});
</script>
}
