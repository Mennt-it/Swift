@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();
	string target = link.IsExternal ? "target=\"_blank\"" : "";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string buttonLabel = Model.Item.GetString("ButtonLabel", string.Empty);
	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "primary");
	string buttonStyleClass = string.Empty;
	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	string buttonSizeClass = string.Empty;
	string buttonAlignment = Model.Item.GetRawValueString("ButtonAlignment", "start");
	string buttonAlignmentClass = string.Empty;


	switch (buttonStyle) {
		case "primary":
			buttonStyleClass = "btn-primary";
			break;
		case "secondary":
			buttonStyleClass = "btn-secondary";
			break;
		case "link":
			buttonStyleClass = "btn-link bg-transparent";
			break;
	}

	switch (buttonSize)
	{
		case "small":
			buttonSizeClass = "btn-sm ";
			break;
		case "large":
			buttonSizeClass = "btn-lg ";
			break;
	}

	switch (buttonAlignment)
	{
		case "start":
			buttonAlignmentClass = "d-flex justify-content-start";
			break;
		case "center":
			buttonAlignmentClass = "d-flex justify-content-center";
			break;
		case "end":
			buttonAlignmentClass = "d-flex justify-content-end";
			break;
	}

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds)
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds)
		};
	}
}
<div class="@buttonAlignmentClass">
	<a href="@link.Url" @target class="text-nowrap btn @(buttonSizeClass)@(buttonStyleClass)@(theme)">@Model.Item.GetString("ButtonLabel")</a>
</div>

	
