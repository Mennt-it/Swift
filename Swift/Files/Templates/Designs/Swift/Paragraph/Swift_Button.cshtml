@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string buttonLabel1 = Model.Item.GetString("ButtonLabel1", string.Empty);
	string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
	string buttonLabel3 = Model.Item.GetString("ButtonLabel3", string.Empty);

	string buttonStyle1 = Model.Item.GetRawValueString("ButtonStyle1", "Primary");
	string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2", "Secondary");
	string buttonStyle3 = Model.Item.GetRawValueString("ButtonStyle3", "Link");

	string buttonStyle1Class = string.Empty;
	string buttonStyle2Class = string.Empty;
	string buttonStyle3Class = string.Empty;

	Dynamicweb.Frontend.LinkViewModel buttonLink1 = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel buttonLink2 = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel buttonLink3 = new Dynamicweb.Frontend.LinkViewModel();

	if (Model.Item.GetLink("ButtonLink1") != null)
	{
		buttonLink1 = Model.Item.GetLink("ButtonLink1");
	}
	if (Model.Item.GetLink("ButtonLink2") != null)
	{
		buttonLink2 = Model.Item.GetLink("ButtonLink2");
	}
	if (Model.Item.GetLink("ButtonLink3") != null)
	{
		buttonLink3 = Model.Item.GetLink("ButtonLink3");
	}

	string buttonAlignment = Model.Item.GetRawValueString("ButtonAlignment", "start");
	string buttonAlignmentClass = string.Empty;

	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	string buttonSizeClass = string.Empty;

	switch (buttonStyle1)
	{
		case "primary":
			buttonStyle1Class = " btn-primary";
			break;
		case "secondary":
			buttonStyle1Class = " btn-secondary";
			break;
		case "link":
			buttonStyle1Class = " btn-link bg-transparent";
			break;
	}

	switch (buttonStyle2)
	{
		case "primary":
			buttonStyle2Class = " btn-primary";
			break;
		case "secondary":
			buttonStyle2Class = " btn-secondary";
			break;
		case "link":
			buttonStyle2Class = " btn-link bg-transparent";
			break;
	}

	switch (buttonStyle3)
	{
		case "primary":
			buttonStyle3Class = " btn-primary";
			break;
		case "secondary":
			buttonStyle3Class = " btn-secondary";
			break;
		case "link":
			buttonStyle3Class = " btn-link bg-transparent";
			break;
	}

	switch (buttonAlignment)
	{
		case "start":
			buttonAlignmentClass = "justify-content-start";
			break;
		case "center":
			buttonAlignmentClass = "justify-content-center";
			break;
		case "end":
			buttonAlignmentClass = "justify-content-end";
			break;
	}

	switch (buttonSize)
	{
		case "small":
			buttonSizeClass = " btn-sm";
			break;
		case "large":
			buttonSizeClass = " btn-lg";
			break;
	}
}

<div class="d-flex @buttonAlignmentClass">
	<div class="d-flex gap-3">
			
		@if (buttonLink1 != null && !string.IsNullOrEmpty(buttonLabel1))
		{
			string targetButtonLink1 = buttonLink1.IsExternal ? "target=\"_blank\"" : string.Empty;

			<a href="@buttonLink1.Url" @targetButtonLink1 class="text-nowrap btn@(buttonSizeClass)@(buttonStyle1Class)">@buttonLabel1</a>
		}
			
		@if (buttonLink2 != null && !string.IsNullOrEmpty(buttonLabel2))
		{
			string targetButtonLink2 = buttonLink2.IsExternal ? "target=\"_blank\"" : string.Empty;

			<a href="@buttonLink2.Url" @targetButtonLink2 class="text-nowrap btn@(buttonSizeClass)@(buttonStyle2Class)">@buttonLabel2</a>
		}
			
		@if (buttonLink3 != null && !string.IsNullOrEmpty(buttonLabel3))
		{
			string targetButtonLink3 = buttonLink3.IsExternal ? "target=\"_blank\"" : string.Empty;

			<a href="@buttonLink3.Url" @targetButtonLink3 class="text-nowrap btn@(buttonSizeClass)@(buttonStyle3Class)">@buttonLabel3</a>
		}
	</div>
</div>
