@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string firstButtonLabel = Model.Item.GetString("firstButtonLabel", string.Empty);
	string secondButtonLabel = Model.Item.GetString("SecondButtonLabel", string.Empty);
	string thirdButtonLabel = Model.Item.GetString("ThirdButtonLabel", string.Empty);

	string firstButtonStyle = Model.Item.GetRawValueString("FirstButtonStyle", "Primary");
	string SecondButtonStyle = Model.Item.GetRawValueString("SecondButtonStyle", "Secondary");
	string thirdButtonStyle = Model.Item.GetRawValueString("ThirdButtonStyle", "Link");

	string firstButtonStyleClass = string.Empty;
	string secondButtonStyleClass = string.Empty;
	string thirdButtonStyleClass = string.Empty;

	Dynamicweb.Frontend.LinkViewModel firstButtonLink = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel secondButtonLink = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel thirdButtonLink = new Dynamicweb.Frontend.LinkViewModel();

	if (Model.Item.GetLink("FirstButtonLink") != null)
	{
		firstButtonLink = Model.Item.GetLink("FirstButtonLink");
	}
	if (Model.Item.GetLink("SecondButtonLink") != null)
	{
		secondButtonLink = Model.Item.GetLink("SecondButtonLink");
	}
	if (Model.Item.GetLink("ThirdButtonLink") != null)
	{
		thirdButtonLink = Model.Item.GetLink("ThirdButtonLink");
	}

	string firstButtonTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("FirstButtonTheme")) ? " theme " + Model.Item.GetRawValueString("FirstButtonTheme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string secondButtonTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("SecondButtonTheme")) ? " theme " + Model.Item.GetRawValueString("SecondButtonTheme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string thirdButtonTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ThirdButtonTheme")) ? " theme " + Model.Item.GetRawValueString("ThirdButtonTheme").Replace(" ", "").Trim().ToLower() : string.Empty;

	string buttonAlignment = Model.Item.GetRawValueString("ButtonAlignment", "start");
	string buttonAlignmentClass = string.Empty;

	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	string buttonSizeClass = string.Empty;

	switch (firstButtonStyle)
	{
		case "primary":
			firstButtonStyleClass = " btn-primary";
			break;
		case "secondary":
			firstButtonStyleClass = " btn-secondary";
			break;
		case "link":
			firstButtonStyleClass = " btn-link bg-transparent";
			break;
	}

	switch (SecondButtonStyle)
	{
		case "primary":
			secondButtonStyleClass = " btn-primary";
			break;
		case "secondary":
			secondButtonStyleClass = " btn-secondary";
			break;
		case "link":
			secondButtonStyleClass = " btn-link bg-transparent";
			break;
	}

	switch (thirdButtonStyle)
	{
		case "primary":
			thirdButtonStyleClass = " btn-primary";
			break;
		case "secondary":
			thirdButtonStyleClass = " btn-secondary";
			break;
		case "link":
			thirdButtonStyleClass = " btn-link bg-transparent";
			break;
	}

	switch (buttonAlignment)
	{
		case "start":
			buttonAlignmentClass = "justify-content-start";
			break;
		case "center":
			buttonAlignmentClass = "justify-content-center";
			break;
		case "end":
			buttonAlignmentClass = "justify-content-end";
			break;
	}

	switch (buttonSize)
	{
		case "small":
			buttonSizeClass = " btn-sm";
			break;
		case "large":
			buttonSizeClass = " btn-lg";
			break;
	}
}

<div class="d-flex @buttonAlignmentClass">
	<div class="btn-group gap-3">
			
		@if (firstButtonLink != null && !string.IsNullOrEmpty(firstButtonLabel))
		{
			string targetFirstButtonLink = firstButtonLink.IsExternal ? "target=\"_blank\"" : string.Empty;

			<a href="@firstButtonLink.Url" @targetFirstButtonLink class="text-nowrap btn@(buttonSizeClass)@(firstButtonStyleClass)@(firstButtonTheme)">@firstButtonLabel</a>
		}
			
		@if (secondButtonLink != null && !string.IsNullOrEmpty(secondButtonLabel))
		{
			string targetSecondButtonLink = secondButtonLink.IsExternal ? "target=\"_blank\"" : string.Empty;

			<a href="@secondButtonLink.Url" @targetSecondButtonLink class="text-nowrap btn@(buttonSizeClass)@(secondButtonStyleClass)@(secondButtonTheme)">@secondButtonLabel</a>
		}
			
		@if (thirdButtonLink != null && !string.IsNullOrEmpty(thirdButtonLabel))
		{
			string targetThirdButtonLink = thirdButtonLink.IsExternal ? "target=\"_blank\"" : string.Empty;

			<a href="@thirdButtonLink.Url" @targetThirdButtonLink class="text-nowrap btn@(buttonSizeClass)@(thirdButtonStyleClass)@(thirdButtonTheme)">@thirdButtonLabel</a>
		}
	</div>
</div>
