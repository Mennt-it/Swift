@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using System.IO


@{ 
	string paragraphId = Model.ID.ToString();

	string horizontalAlign = !string.IsNullOrEmpty(Model.Item.GetRawValueString("HorizontalAlignment")) ? "justify-content-" + Model.Item.GetRawValueString("HorizontalAlignment") : "";
	string offcanvasDirection = !string.IsNullOrEmpty(Model.Item.GetRawValueString("OffCanvasDirection")) ? Model.Item.GetRawValueString("OffCanvasDirection") : "start";

	var utilityNavigationSettings = new NavigationSettings();
	utilityNavigationSettings.StartLevel = 1;
	utilityNavigationSettings.StopLevel = 10;
	utilityNavigationSettings.ExpandMode = ExpandMode.All;

	utilityNavigationSettings.Parameters.Add("TextPosition", "right");
	utilityNavigationSettings.Parameters.Add("HideTexts", true);
	utilityNavigationSettings.Parameters.Add("HideIcons", false);
	utilityNavigationSettings.Parameters.Add("Size", "normal");

	if (!string.IsNullOrEmpty(Model.Item.GetString("UtilityNavigationRoot"))) {
		string root = Model.Item.GetString("UtilityNavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			utilityNavigationSettings.RootPageId = rootPageId;
		}
	}

	int sourcePageId = Model.Item.GetLink("ContentSource")?.PageId != null ? Model.Item.GetLink("ContentSource").PageId : 0;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string themeSidebarNavigation = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ThemeOffCanvasNavigation")) ? " theme " + Model.Item.GetRawValueString("ThemeOffCanvasNavigation").Replace(" ", "").Trim().ToLower() : "";
}


<div class="d-flex mx-n3 @(horizontalAlign)@(theme)">

	<button class="btn px-3 py-2 text-reset" type="button" data-bs-toggle="offcanvas" data-bs-target="#navigation_@(paragraphId)" aria-controls="navigation_@(paragraphId)" aria-label="@Translate("Navigation open button")">
		@RenderMenuIcon()
	</button>

	@*Moving offcanvas to Master for optimal rendering*@
	@SnippetStart("offcanvas")
	<nav class="offcanvas offcanvas-@offcanvasDirection @themeSidebarNavigation" tabindex="-1" id="navigation_@(paragraphId)" aria-label="@Translate("Navigation")" style="visibility: hidden;">
		<div class="offcanvas-header py-1 px-0 position-relative">
			
			<button type="button" class="btn btn-link" data-bs-dismiss="offcanvas" aria-label="@Translate("Navigation close button")">
				@RenderStaticIcon("x")
			</button>

			@if (!string.IsNullOrEmpty(Model.Item.GetString("UtilityNavigationRoot"))) {
				<div>
					@Navigation.RenderNavigation("Navigation/OffCanvasUtilityNavigation.cshtml", utilityNavigationSettings)
				</div>
			}
		</div>
		<div class="offcanvas-body p-0 position-relative overflow-y-auto overflow-x-hidden">
			<div class="offcanvas-navigation text-uppercase h-100 position-relative d-none overflow-y-auto overflow-x-hidden" role="navigation">
				@if (sourcePageId != 0) {
					@RenderGrid(sourcePageId)
				}
			</div>
		</div>
	</nav>
	@SnippetEnd("offcanvas")

</div>


@helper RenderMenuIcon()
{
	if (Model.Item.GetString("Icon") != null) 
	{
		string imagePath = Model.Item.GetRawValueString("Icon", "");

		if (!imagePath.ToLower().Contains("none") && imagePath != "")
		{
			if (Path.GetExtension(imagePath).ToLower() == ".svg")
			{
				<span class="icon-3 pe-none">
					@ReadFile(imagePath)
				</span>
			}
			else
			{
				imagePath = "/Admin/Public/GetImage.ashx?width=" + 24 + "&height=" + 24 + "&image=" + imagePath + "&Format=WebP&Quality=100";

				<picture class="mx-auto d-block pe-none" width="24" height="24">
					<img loading="lazy" decoding="async" src="@imagePath" alt="@Model.Item.GetString("Title")" />
				</picture>
			}
		}
	}
}

@helper RenderStaticIcon(string icon)
{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/" + icon + ".svg";  

	if (!iconPath.ToLower().Contains("none") && iconPath != "")
	{
		<span class="icon-3 pe-none">
			@ReadFile(iconPath)
		</span>
	}	
}
