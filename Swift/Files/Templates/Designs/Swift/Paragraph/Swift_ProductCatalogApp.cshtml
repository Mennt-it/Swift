@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{ 
	bool hasDetailsTemplate = !string.IsNullOrEmpty(Pageview.CurrentParagraph.ModuleProperties.GetValue("ProductTemplate_path"));

	//Set the hasDetailsTemplate property
	if (Dynamicweb.Context.Current.Items.Contains("HasDetailsTemplate"))
	{
		Dynamicweb.Context.Current.Items["HasDetailsTemplate"] = hasDetailsTemplate;
	}
	else
	{
		Dynamicweb.Context.Current.Items.Add("HasDetailsTemplate", hasDetailsTemplate);
	}

	//Put the details page link up in context items
	if (Dynamicweb.Context.Current.Items.Contains("DetailsPageLink"))
	{
		Dynamicweb.Context.Current.Items["DetailsPageLink"] = Model.Item.GetString("DetailsView");
	}
	else
	{
		Dynamicweb.Context.Current.Items.Add("DetailsPageLink", Model.Item.GetString("DetailsView"));
	}
}

@if (Pageview.IsVisualEditorMode) {
    <div class="alert alert-info" role="alert">
        <span>@Translate("Product catalog App: Edit this column to configure. (Product catalog app must be attached this paragraph)")</span>
    </div>
}

<div class="item_@Model.Item.SystemName.ToLower()">
    @Model.GetModuleOutput()
</div>
