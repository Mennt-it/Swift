@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	bool renderAsResponsive = Pageview.AreaSettings.GetString("DeviceRendering", "responsive").Equals("responsive", StringComparison.OrdinalIgnoreCase);
	bool mobile = Pageview.Device == Dynamicweb.Frontend.Devices.DeviceType.Mobile || Pageview.Device == Dynamicweb.Frontend.Devices.DeviceType.Tablet;

	string responsiveClassDesktop = string.Empty;
	string responsiveClassMobile = string.Empty;
	if (renderAsResponsive)
	{
		responsiveClassDesktop = "d-none d-xl-grid";
		responsiveClassMobile = "d-grid d-xl-none";
	}

	string listSource = !string.IsNullOrEmpty(Model.Item.GetString("ListSource")) ? Model.Item.GetString("ListSource") : Model.PageID.ToString();
	string sortArticleList = !string.IsNullOrEmpty(Model.Item.GetString("SortArticleList")) ? Model.Item.GetString("SortArticleList") : Model.PageID.ToString();
	string listStyle = Model.Item.GetRawValueString("ListStyle");
	bool carouselDesktop = Model.Item.GetBoolean("CarouselDesktop");
	bool carouselMobile = Model.Item.GetBoolean("CarouselMobile");
	string listLayoutStacked = Model.Item.GetRawValueString("ListLayoutStacked");
	string listLayoutSideBySide = Model.Item.GetRawValueString("ListLayoutSideBySide");
	string itemStyleStacked = Model.Item.GetRawValueString("ItemStyleStacked");
	string itemStyleSideBySide = Model.Item.GetRawValueString("ItemStyleSideBySide");
	string sliderItemReveal = string.Empty;
	string sliderCount = "slider-item-show";

	if (listStyle == "side-by-side") {
		sliderCount += listLayoutSideBySide;
	}

	if (listStyle == "stacked")
	{
		sliderCount += listLayoutStacked;
	}

	string gridCount = "grid-";
	if (listStyle == "side-by-side")
	{
		gridCount += listLayoutSideBySide;
	}

	if (listStyle == "stacked")
	{
		gridCount += "1" + " " + gridCount + "lg-" + listLayoutStacked;
	}

	if (listStyle == "side-by-side")
	{
		if (!mobile)
		{
			sliderItemReveal = "slider-item-reveal";
		}
	}
	else
	{
		if(listStyle == "stacked")
		{
			sliderItemReveal = "slider-item-reveal";
		}
	}
}

@if (renderAsResponsive || !mobile)
{
	if (carouselDesktop) 
	{ 
		<div class="@responsiveClassDesktop swiffy-slider slider-nav-round @sliderItemReveal @sliderCount">
			<div class="slider-container">
				@RenderItemList(new
				{
					ItemType = "Swift_Article",
					ListTemplate = "ItemPublisher/List/List.cshtml",
					ItemFieldsList = "*",
					ListSourceType = "Page",
					ListSourcePage = listSource,
					//IncludeAllChildItems = true,
					ListPageSize = "10",
					IncludeParagraphItems = true,
					ListOrderBy = "Created",
					ListOrderByDirection = sortArticleList
				})
				@RenderItemList(new
				{
					ItemType = "Swift_ArticleListPage",
					ListTemplate = "ItemPublisher/List/List.cshtml",
					ItemFieldsList = "*",
					ListSourceType = "Page",
					ListSourcePage = listSource,
					//IncludeAllChildItems = true,
					ListPageSize = "10",
					IncludeParagraphItems = true,
					ListOrderBy = "Created",
					ListOrderByDirection = sortArticleList
				})
			</div>
			<button type="button" class="slider-nav opacity-100"></button>
			<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
		</div>
	}
	else 
	{
		<div class="@responsiveClassDesktop grid @gridCount">
			@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				//IncludeAllChildItems = true,
				ListPageSize = "10",
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				//IncludeAllChildItems = true,
				ListPageSize = "10",
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
		</div>
	}
}

@if (renderAsResponsive || mobile)
{
	if (carouselMobile) 
	{ 
		<div class="@responsiveClassMobile swiffy-slider slider-nav-round @sliderItemReveal @sliderCount">
			<div class="slider-container">
				@RenderItemList(new
				{
					ItemType = "Swift_Article",
					ListTemplate = "ItemPublisher/List/List.cshtml",
					ItemFieldsList = "*",
					ListSourceType = "Page",
					ListSourcePage = listSource,
					//IncludeAllChildItems = true,
					ListPageSize = "10",
					IncludeParagraphItems = true,
					ListOrderBy = "Created",
					ListOrderByDirection = sortArticleList
				})
				@RenderItemList(new
				{
					ItemType = "Swift_ArticleListPage",
					ListTemplate = "ItemPublisher/List/List.cshtml",
					ItemFieldsList = "*",
					ListSourceType = "Page",
					ListSourcePage = listSource,
					//IncludeAllChildItems = true,
					ListPageSize = "10",
					IncludeParagraphItems = true,
					ListOrderBy = "Created",
					ListOrderByDirection = sortArticleList
				})
			</div>
			<button type="button" class="slider-nav opacity-100"></button>
			<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
		</div>
	}
	else 
	{ 
		<div class="@responsiveClassMobile grid @gridCount">
			@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				//IncludeAllChildItems = true,
				ListPageSize = "10",
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = "Descending"
			})
			@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				//IncludeAllChildItems = true,
				ListPageSize = "10",
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = "Descending"
			})
		</div>
	}
}

@if (carouselMobile || carouselDesktop) 
{ 

	<script type="module" data-noinit>
		swiffyslider.init()
	</script>
}
