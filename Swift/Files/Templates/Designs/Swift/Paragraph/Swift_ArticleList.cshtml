@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string listSource = !string.IsNullOrEmpty(Model.Item.GetString("ListSource")) ? Model.Item.GetString("ListSource") : Model.PageID.ToString();
	string sortArticleList = !string.IsNullOrEmpty(Model.Item.GetString("SortArticleList")) ? Model.Item.GetString("SortArticleList") : "Descending";
	string maxItemsInList = !string.IsNullOrEmpty(Model.Item.GetString("MaxItemsInList")) ? Model.Item.GetString("MaxItemsInList") : "10";
	string listLayout = !string.IsNullOrEmpty(Model.Item.GetString("ListLayout")) ? Model.Item.GetString("ListLayout") : string.Empty;
	string listLayoutMobile = !string.IsNullOrEmpty(Model.Item.GetString("ListLayoutMobile")) ? Model.Item.GetString("ListLayoutMobile") : "grid";
	string layoutMode = "grid";
	string carouselWrapperClass = string.Empty;
	string gridWrapperClass = string.Empty;
	string sliderWrapper = "swiffy-slider";
	string sliderNav = "slider-nav-round";
	string sliderContainer = "slider-container";
	string sliderRevealItem = "slider-item-reveal";
	
	switch (listLayoutMobile)
	{ 
		case "grid":
		gridWrapperClass = "grid grid-1";
			break;
	}

	switch (listLayout)
	{
	case "carousel-2":
		layoutMode = "carousel";
		carouselWrapperClass = "slider-item-show2";
		break;
	case "carousel-3":
		layoutMode = "carousel";
		carouselWrapperClass = "slider-item-show3";
		break;
	case "carousel-4":
		layoutMode = "carousel";
		carouselWrapperClass = "slider-item-show4";
		break;
	case "carousel-5":
		layoutMode = "carousel";
		carouselWrapperClass = "slider-item-show5";
		break;
	case "grid-1":
		gridWrapperClass = "grid grid-1 gap-md-4";
		break;
	case "grid-2":
		gridWrapperClass = "grid grid-1 grid-md-2 gap-md-4";
		break;
	case "grid-3":
		gridWrapperClass = "grid grid-1 grid-md-3 gap-md-4";
		break;
	case "grid-4":
		gridWrapperClass = "grid grid-1 grid-md-2 grid-lg-3 grid-xl-4 gap-md-4";
		break;
	case "grid-5":
		gridWrapperClass = "grid grid-1 grid-md-2 grid-lg-3 grid-xl-5 gap-md-4";
		break;
	}
}

@* Desktop carousel & mobile carousel *@
@if (layoutMode == "carousel" && listLayoutMobile == "carousel")
{
	<div class="@carouselWrapperClass @sliderWrapper @sliderNav @sliderRevealItem">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
		</div>
		<button type="button" class="slider-nav opacity-100"></button>
		<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
	</div>
}

@* Desktop grid & mobile grid *@
@if (layoutMode == "grid" && listLayoutMobile == "grid")
{
	<div class="@gridWrapperClass">
		@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
		@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
	</div>
}

@* Desktop grid & mobile carousel *@
@if (layoutMode == "grid" && listLayoutMobile == "carousel")
{
	<div class="d-none d-xl-grid @gridWrapperClass">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
	</div>
	<div class="d-grid d-xl-none @carouselWrapperClass @sliderWrapper @sliderNav @sliderRevealItem">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
		</div>
		<button type="button" class="slider-nav opacity-100"></button>
		<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
	</div>
}

@* Desktop carousel & mobile grid *@
@if (layoutMode == "carousel" && listLayoutMobile == "grid")
{
	<div class="d-none d-xl-grid @carouselWrapperClass @sliderWrapper @sliderNav @sliderRevealItem">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
		</div>
		<button type="button" class="slider-nav opacity-100"></button>
		<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
	</div>
	<div class="d-grid d-xl-none @gridWrapperClass">
		@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
		@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
	</div>
}

@if (carouselWrapperClass == "carousel")
{
	<script type="module" data-noinit>
		swiffyslider.init()
	</script>
}

@helper RenderArticleList(string itemType, string listSource, string maxItemsInList, string sortArticleList)
{
	@RenderItemList(new
	{
		ItemType = itemType,
		ListTemplate = "ItemPublisher/List/List.cshtml",
		ItemFieldsList = "*",
		ListSourceType = "Page",
		ListSourcePage = listSource,
		ListPageSize = maxItemsInList,
		IncludeParagraphItems = true,
		ListOrderBy = "Created",
		ListOrderByDirection = sortArticleList
	})
}
