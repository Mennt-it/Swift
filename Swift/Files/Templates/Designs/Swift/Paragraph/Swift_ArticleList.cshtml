@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string listSource = !string.IsNullOrEmpty(Model.Item.GetString("ListSource")) ? Model.Item.GetString("ListSource") : Model.PageID.ToString();
	string articleListSortOrder = !string.IsNullOrEmpty(Model.Item.GetString("ArticleListSortOrder")) ? Model.Item.GetString("ArticleListSortOrder") : "Descending";
	string maxItemsInList = !string.IsNullOrEmpty(Model.Item.GetString("MaxItemsInList")) ? Model.Item.GetString("MaxItemsInList") : "10";
	string layout = !string.IsNullOrEmpty(Model.Item.GetString("Layout")) ? Model.Item.GetString("Layout") : "image-top";
	string listLayout = !string.IsNullOrEmpty(Model.Item.GetString("ListLayout")) ? Model.Item.GetString("ListLayout") : string.Empty;
	string listLayoutMobile = !string.IsNullOrEmpty(Model.Item.GetString("ListLayoutMobile")) ? Model.Item.GetString("ListLayoutMobile") : "grid";
	string columnTheme = !string.IsNullOrEmpty(Model.Item.GetString("ColumnTheme")) ? Model.Item.GetString("ColumnTheme") : string.Empty;
	string layoutMode = "grid";
	string carouselWrapperClass = string.Empty;
	string gridWrapperClass = string.Empty;
	string sliderWrapper = "article-slider swiffy-slider";
	string sliderNav = "slider-nav-round";
	string sliderContainer = "slider-container";
	string sliderRevealItem = "slider-item-reveal";
	string sliderSnap = "slider-item-nosnap";
	string columnThemeClass = string.Empty;
	string columnThemePadding = string.Empty;

	if (!string.IsNullOrEmpty(columnTheme))
	{
		columnThemeClass = columnTheme;
	}

	if (columnTheme != string.Empty)
	{
		columnThemePadding = "p-3";
		columnThemeClass = " theme " + columnTheme;
	}

	switch (listLayoutMobile)
	{
		case "grid":
			gridWrapperClass = "grid grid-1";
			break;
	}

	switch (listLayout)
	{
		case "carousel-1":
			layoutMode = "carousel";
			carouselWrapperClass = string.Empty;
			break;
		case "carousel-2":
			layoutMode = "carousel";
			carouselWrapperClass = "slider-item-show2";
			break;
		case "carousel-3":
			layoutMode = "carousel";
			carouselWrapperClass = "slider-item-show3";
			break;
		case "carousel-4":
			layoutMode = "carousel";
			carouselWrapperClass = "slider-item-show4";
			break;
		case "carousel-5":
			layoutMode = "carousel";
			carouselWrapperClass = "slider-item-show5";
			break;
		case "grid-1":
			gridWrapperClass = "grid grid-1 gap-md-4";
			break;
		case "grid-2":
			gridWrapperClass = "grid grid-1 grid-md-2 gap-md-4";
			break;
		case "grid-3":
			gridWrapperClass = "grid grid-1 grid-md-3 gap-md-4";
			break;
		case "grid-4":
			gridWrapperClass = "grid grid-1 grid-md-2 grid-lg-3 grid-xl-4 gap-md-4";
			break;
		case "grid-5":
			gridWrapperClass = "grid grid-1 grid-md-2 grid-lg-3 grid-xl-5 gap-md-4";
			break;
	}
}

@* Desktop carousel & mobile carousel *@
@if (layoutMode == "carousel" && listLayoutMobile == "carousel")
{
	<div class="@columnThemeClass @columnThemePadding @sliderWrapper @sliderNav @sliderRevealItem @sliderSnap @carouselWrapperClass">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder)
		</div>
		<button type="button" title="@Translate("Slider navigation button - Previous slider")" class="slider-nav"></button>
		<button type="button" title="@Translate("Slider navigation button - Next slider")" class="slider-nav slider-nav-next"></button>
	</div>
}

@* Desktop grid & mobile grid *@
@if (layoutMode == "grid" && listLayoutMobile == "grid")
{
	<div class="@columnThemeClass @columnThemePadding @gridWrapperClass">
		@RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder)
		@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder)
	</div>
}

@* Desktop grid & mobile carousel *@
@if (layoutMode == "grid" && listLayoutMobile == "carousel")
{
	<div class="d-none d-xl-grid @columnThemeClass @columnThemePadding @gridWrapperClass">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder)
	</div>
	<div class="d-grid d-xl-none @columnThemeClass @columnThemePadding @sliderWrapper @sliderNav @sliderRevealItem @sliderSnap @carouselWrapperClass">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder)
		</div>
		<button type="button" title="@Translate("Slider navigation button - Previous slider")" class="slider-nav"></button>
		<button type="button" title="@Translate("Slider navigation button - Next slider")" class="slider-nav slider-nav-next"></button>
	</div>
}

@* Desktop carousel & mobile grid *@
@if (layoutMode == "carousel" && listLayoutMobile == "grid")
{
	<div class="d-none d-xl-grid @columnThemeClass @columnThemePadding @sliderWrapper @sliderNav @sliderRevealItem @sliderSnap @carouselWrapperClass">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder)
		</div>
		<button type="button" title="@Translate("Slider navigation button - Previous slider")" class="slider-nav"></button>
		<button type="button" title="@Translate("Slider navigation button - Next slider")" class="slider-nav slider-nav-next"></button>
	</div>
	<div class="d-grid d-xl-none @columnThemeClass @columnThemePadding @gridWrapperClass">
		@RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder)
		@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder)
	</div>
}

@if (layoutMode == "carousel")
{
	<script type="module">
		swiffyslider.init()
	</script>
}

@helper RenderArticleList(string itemType, string listSource, string maxItemsInList, string articleListSortOrder)
{
	@RenderItemList(new
	{
		ItemType = itemType,
		ListTemplate = "ItemPublisher/List/List.cshtml",
		ItemFieldsList = "*",
		ListSourceType = "Page",
		ListSourcePage = listSource,
		ListPageSize = maxItemsInList,
		IncludeParagraphItems = true,
		ListOrderBy = "PublishedDate",
		ListSecondOrderBy = "Updated",
		ListOrderByDirection = articleListSortOrder
	})
}
