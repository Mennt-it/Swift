@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	bool renderAsResponsive = Pageview.AreaSettings.GetString("DeviceRendering", "responsive").Equals("responsive", StringComparison.OrdinalIgnoreCase);
	bool mobile = Pageview.Device == Dynamicweb.Frontend.Devices.DeviceType.Mobile || Pageview.Device == Dynamicweb.Frontend.Devices.DeviceType.Tablet;

	string responsiveClassDesktop = string.Empty;
	string responsiveClassMobile = string.Empty;
	if (renderAsResponsive)
	{
		responsiveClassDesktop = "d-none d-xl-grid";
		responsiveClassMobile = "d-grid d-xl-none";
	}

	string listSource = !string.IsNullOrEmpty(Model.Item.GetString("ListSource")) ? Model.Item.GetString("ListSource") : Model.PageID.ToString();
	string sortArticleList = !string.IsNullOrEmpty(Model.Item.GetString("SortArticleList")) ? Model.Item.GetString("SortArticleList") : "Descending";
	string maxItemsInList = !string.IsNullOrEmpty(Model.Item.GetString("MaxItemsInList")) ? Model.Item.GetString("MaxItemsInList") : "10";


	string layout = !string.IsNullOrEmpty(Model.Item.GetString("Layout")) ? Model.Item.GetString("Layout") : string.Empty;
	layout = layout == "image-left" ? "" : layout;
	layout = layout == "image-right" ? "" : layout;
	layout = layout == "image-top" ? "" : layout;

	string listLayout = !string.IsNullOrEmpty(Model.Item.GetString("ListLayout")) ? Model.Item.GetString("ListLayout") : string.Empty;
	string listLayoutMobile = !string.IsNullOrEmpty(Model.Item.GetString("ListLayoutMobile")) ? Model.Item.GetString("ListLayoutMobile") : string.Empty;

	string NumberOfsliderItems = string.Empty;
	string NumberOfGridItems = string.Empty;
	string sliderWrapper = "swiffy-slider";
	string sliderNav = "slider-nav-round";
	string sliderContainer = "slider-container";
	string  sliderRevealItem = "slider-item-reveal";

	NumberOfsliderItems = listLayout == "carousel-1" ? string.Empty : NumberOfsliderItems;
	NumberOfsliderItems = listLayout == "carousel-2" ? "slider-item-show2" : NumberOfsliderItems;
	NumberOfsliderItems = listLayout == "carousel-3" ? "slider-item-show3" : NumberOfsliderItems;
	NumberOfsliderItems = listLayout == "carousel-4" ? "slider-item-show4" : NumberOfsliderItems;
	NumberOfsliderItems = listLayout == "carousel-5" ? "slider-item-show5" : NumberOfsliderItems;

	NumberOfGridItems = listLayout == "grid-1" ? "grid grid-1 grid-lg-1" : NumberOfGridItems;
	NumberOfGridItems = listLayout == "grid-2" ? "grid grid-1 grid-lg-2" : NumberOfGridItems;
	NumberOfGridItems = listLayout == "grid-3" ? "grid grid-1 grid-lg-3" : NumberOfGridItems;
	NumberOfGridItems = listLayout == "grid-4" ? "grid grid-1 grid-lg-4" : NumberOfGridItems;
	NumberOfGridItems = listLayout == "grid-5" ? "grid grid-1 grid-lg-5" : NumberOfGridItems;
	NumberOfGridItems = listLayoutMobile == "list" ? "grid grid-1" : NumberOfGridItems;

	string listLayoutMobileClass = listLayoutMobile == "dafault" ? listLayout : listLayoutMobile;

}
@responsiveClassDesktop
@responsiveClassMobile
@NumberOfGridItems
@mobile
@renderAsResponsive
@listLayoutMobile
@listLayoutMobileClass

@if (renderAsResponsive && !mobile)
{
	if (
		listLayout == "carousel-1" ||
		listLayout == "carousel-2" ||
		listLayout == "carousel-3" ||
		listLayout == "carousel-4" ||
		listLayout == "carousel-5")
	{
		<div class="@responsiveClassDesktop @sliderWrapper @sliderNav @NumberOfsliderItems @sliderRevealItem">
			<div class="@sliderContainer">
				@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
				@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			</div>
			<button type="button" class="slider-nav opacity-100"></button>
			<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
		</div>
	}
	else
	{
		<div class="@responsiveClassDesktop">
			<div class="@NumberOfGridItems">
				@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
				@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			</div>
		</div>
	}
}

@if (renderAsResponsive && mobile)
{
	if (listLayoutMobile == "carousel")
	{
		<div class="@responsiveClassMobile @sliderWrapper @sliderNav @NumberOfsliderItems @sliderRevealItem">
			<div class="@sliderContainer">
				@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
				@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			</div>
			<button type="button" class="slider-nav opacity-100"></button>
			<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
		</div>
	}
	else
	{
		<div class="@responsiveClassMobile">
			<div class="@NumberOfGridItems">
				@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
				@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			</div>
		</div>
	}
}

@if (!renderAsResponsive && !mobile)
{
	if (
		listLayout == "carousel-1" ||
		listLayout == "carousel-2" ||
		listLayout == "carousel-3" ||
		listLayout == "carousel-4" ||
		listLayout == "carousel-5")
	{
		<div class="@responsiveClassDesktop @sliderWrapper @sliderNav @NumberOfsliderItems @sliderRevealItem">
			<div class="@sliderContainer">
				@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
				@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			</div>
			<button type="button" class="slider-nav opacity-100"></button>
			<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
		</div>
	}
	else
	{
		<div class="@responsiveClassDesktop">
			<div class="@NumberOfGridItems">
				@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
				@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			</div>
		</div>
	}
}

@if (!renderAsResponsive && mobile)
{
	if (listLayoutMobile == "carousel")
	{
		<div class="@responsiveClassMobile @sliderWrapper @sliderNav @NumberOfsliderItems @sliderRevealItem">
			<div class="@sliderContainer">
				@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
				@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			</div>
			<button type="button" class="slider-nav opacity-100"></button>
			<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
		</div>
	}
	else
	{
		<div class="@responsiveClassMobile">
			<div class="@NumberOfGridItems">
				@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
				@RenderItemList(new
			{
				ItemType = "Swift_ArticleListPage",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				ListPageSize = maxItemsInList,
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = sortArticleList
			})
			</div>
		</div>
	}
}

@if (listLayout == "carousel-1" ||
	listLayout == "carousel-2" ||
	listLayout == "carousel-3" ||
	listLayout == "carousel-4" ||
	listLayout == "carousel-5")
{ 
	<script type="module" data-noinit>
		swiffyslider.init()
	</script>
}
