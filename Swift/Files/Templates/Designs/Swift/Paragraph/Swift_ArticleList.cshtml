@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string listSource = !string.IsNullOrEmpty(Model.Item.GetString("ListSource")) ? Model.Item.GetString("ListSource") : Model.PageID.ToString();
	string sortArticleList = !string.IsNullOrEmpty(Model.Item.GetString("SortArticleList")) ? Model.Item.GetString("SortArticleList") : "Descending";
	string maxItemsInList = !string.IsNullOrEmpty(Model.Item.GetString("MaxItemsInList")) ? Model.Item.GetString("MaxItemsInList") : "10";

	string layout = !string.IsNullOrEmpty(Model.Item.GetString("Layout")) ? Model.Item.GetString("Layout") : string.Empty;
	layout = layout == "image-left" ? "" : layout;
	layout = layout == "image-right" ? "" : layout;
	layout = layout == "image-top" ? "" : layout;

	string listLayout = !string.IsNullOrEmpty(Model.Item.GetString("ListLayout")) ? Model.Item.GetString("ListLayout") : string.Empty;
	string listLayoutMobile = !string.IsNullOrEmpty(Model.Item.GetString("ListLayoutMobile")) ? Model.Item.GetString("ListLayoutMobile") : string.Empty;

	string numberOfsliderItems = string.Empty;
	string numberOfGridItems = string.Empty;
	string sliderWrapper = "swiffy-slider";
	string sliderNav = "slider-nav-round";
	string sliderContainer = "slider-container";
	string sliderRevealItem = "slider-item-reveal";

	numberOfsliderItems = listLayout == "carousel-1" ? string.Empty : numberOfsliderItems;
	numberOfsliderItems = listLayout == "carousel-2" ? "slider-item-show2" : numberOfsliderItems;
	numberOfsliderItems = listLayout == "carousel-3" ? "slider-item-show3" : numberOfsliderItems;
	numberOfsliderItems = listLayout == "carousel-4" ? "slider-item-show4" : numberOfsliderItems;
	numberOfsliderItems = listLayout == "carousel-5" ? "slider-item-show5" : numberOfsliderItems;

	numberOfGridItems = listLayout == "grid-1" ? "grid grid-1 gap-md-4" : numberOfGridItems;
	numberOfGridItems = listLayout == "grid-2" ? "grid grid-1 grid-md-2 gap-md-4" : numberOfGridItems;
	numberOfGridItems = listLayout == "grid-3" ? "grid grid-1 grid-md-2 gap-md-4" : numberOfGridItems;
	numberOfGridItems = listLayout == "grid-4" ? "grid grid-1 grid-md-2 grid-lg-3 grid-xl-4 gap-md-4" : numberOfGridItems;
	numberOfGridItems = listLayout == "grid-5" ? "grid grid-1 grid-md-2 grid-lg-3 grid-xl-5 gap-md-4" : numberOfGridItems;
}

@* Desktop carousel & mobile default *@
@if (numberOfsliderItems != "" && listLayoutMobile == "default")
{
	<div class="@sliderWrapper @sliderNav @numberOfsliderItems @sliderRevealItem">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
		</div>
		<button type="button" class="slider-nav opacity-100"></button>
		<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
	</div>
}

@* Desktop grid & mobile default *@
@if (numberOfGridItems != "" && listLayoutMobile == "default")
{
	<div class="@numberOfGridItems">
		@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
		@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
	</div>
}

@* Desktop carousel & mobile carousel *@
@if (numberOfsliderItems != "" && listLayoutMobile == "carousel")
{
	<div class="@sliderWrapper @sliderNav @numberOfsliderItems @sliderRevealItem">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
		</div>
		<button type="button" class="slider-nav opacity-100"></button>
		<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
	</div>
}

@* Desktop grid & mobile carousel *@
@if (
	numberOfGridItems != "" &&
	listLayoutMobile == "carousel")
{
	<div class="d-none d-xl-grid @numberOfGridItems">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
	</div>
	<div class="d-grid d-xl-none @sliderWrapper @sliderNav @sliderRevealItem">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
		</div>
		<button type="button" class="slider-nav opacity-100"></button>
		<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
	</div>
}

@* Desktop carousel & mobile grid *@
@if (numberOfsliderItems != "" && listLayoutMobile == "list")
{
	<div class="d-none d-xl-grid @sliderWrapper @sliderNav @numberOfsliderItems @sliderRevealItem">
		<div class="@sliderContainer">
			@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
			@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
		</div>
		<button type="button" class="slider-nav opacity-100"></button>
		<button type="button" class="slider-nav slider-nav-next opacity-100"></button>
	</div>
	<div class="d-grid d-xl-none grid grid-1">
		@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
		@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
	</div>
}

@* Desktop grid & mobile grid *@
@if (numberOfGridItems != "" && listLayoutMobile == "list")
{
	<div class="@numberOfGridItems">
		@RenderArticleList("Swift_Article", listSource, maxItemsInList, sortArticleList)
		@RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, sortArticleList)
	</div>
}

@if (numberOfsliderItems != "")
{
	<script type="module" data-noinit>
		swiffyslider.init()
	</script>
}

@helper RenderArticleList(string itemType, string listSource, string maxItemsInList, string sortArticleList)
{
	@RenderItemList(new
	{
		ItemType = itemType,
		ListTemplate = "ItemPublisher/List/List.cshtml",
		ItemFieldsList = "*",
		ListSourceType = "Page",
		ListSourcePage = listSource,
		ListPageSize = maxItemsInList,
		IncludeParagraphItems = true,
		ListOrderBy = "Created",
		ListOrderByDirection = sortArticleList
	})
}
