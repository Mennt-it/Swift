@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string listSource = !string.IsNullOrEmpty(Model.Item.GetString("ListSource")) ? Model.Item.GetString("ListSource") : Model.PageID.ToString();
	string layoutDesktop = Model.Item.GetRawValueString("LayoutDesktop");
	string layoutMobile = Model.Item.GetRawValueString("LayoutMobile");
	string gridLayoutDesktop = Model.Item.GetRawValueString("GridLayoutDesktop");
	string gridLayoutMobile = Model.Item.GetRawValueString("GridLayoutMobile");
	string sliderWrapper = layoutDesktop == "carousel" || layoutMobile == "carousel" ? "swiffy-slider" : "";
	string sliderSection = layoutDesktop == "carousel" || layoutMobile == "carousel" ? "slider-container" : "";
	string sliderCount = layoutDesktop == "carousel" || layoutMobile == "carousel" ? "slider-item-show4" : "";
	string gridWrapperMobile = layoutMobile == "grid" ? "grid grid-" + gridLayoutMobile : "";
	string gridWrapperDesktop = layoutDesktop == "grid" ? "grid grid-lg-" + gridLayoutDesktop : "";
}

@*@RenderItemList(new
{
	ItemType = "Swift_ArticleList",
	ListTemplate = "ItemPublisher/List/List.cshtml", //create new one
	ItemFieldsList = "*",
	ListSourceType = "Page",
	ListSourcePage = listSource,
	IncludeAllChildItems = true,
	ListPageSize = "10",
	IncludeParagraphItems = true,
	ListOrderBy = "Created",
	ListOrderByDirection = "Descending"
})*@

@* Render list for small screens *@ 

<div class="d-lg-none">
	@if (layoutMobile == "carousel") { 
		<div class="@sliderWrapper @sliderCount">
			<div class="@sliderSection">
				@RenderItemList(new
				{
					ItemType = "Swift_Article",
					ListTemplate = "ItemPublisher/List/List.cshtml",
					ItemFieldsList = "*",
					ListSourceType = "Page",
					ListSourcePage = listSource,
					//IncludeAllChildItems = true,
					ListPageSize = "10",
					IncludeParagraphItems = true,
					ListOrderBy = "Created",
					ListOrderByDirection = "Descending"
				})
			</div>
			<button type="button" class="slider-nav"></button>
			<button type="button" class="slider-nav slider-nav-next"></button>
		</div>
	}
	else if (layoutMobile == "grid"){
		<div class="@gridWrapperMobile @gridWrapperDesktop">
			@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				//IncludeAllChildItems = true,
				ListPageSize = "10",
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = "Descending"
			})
		</div>
	}
</div>

@* Render list for large screen *@ 
<div class="d-none d-lg-block">
	@if (layoutDesktop == "carousel") { 
		<div class="@sliderWrapper @sliderCount">
			<div class="@sliderSection">
				@RenderItemList(new
				{
					ItemType = "Swift_Article",
					ListTemplate = "ItemPublisher/List/List.cshtml",
					ItemFieldsList = "*",
					ListSourceType = "Page",
					ListSourcePage = listSource,
					//IncludeAllChildItems = true,
					ListPageSize = "10",
					IncludeParagraphItems = true,
					ListOrderBy = "Created",
					ListOrderByDirection = "Descending"
				})
			</div>
			<button type="button" class="slider-nav"></button>
			<button type="button" class="slider-nav slider-nav-next"></button>
		</div>
	}
	else if (layoutDesktop == "grid"){
		<div class="@gridWrapperMobile @gridWrapperDesktop">
			@RenderItemList(new
			{
				ItemType = "Swift_Article",
				ListTemplate = "ItemPublisher/List/List.cshtml",
				ItemFieldsList = "*",
				ListSourceType = "Page",
				ListSourcePage = listSource,
				//IncludeAllChildItems = true,
				ListPageSize = "10",
				IncludeParagraphItems = true,
				ListOrderBy = "Created",
				ListOrderByDirection = "Descending"
			})
		</div>
	}
</div>
