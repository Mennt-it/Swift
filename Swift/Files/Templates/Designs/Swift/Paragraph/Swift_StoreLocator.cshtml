@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{ 
	string apiKey = !string.IsNullOrEmpty(Pageview.AreaSettings.GetString("Google_APIKey")) ? Pageview.AreaSettings.GetString("Google_APIKey") : "";

	var locationList = Model.Item.GetUsers("UserGroup");
	var locationCounter = 0;

    string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
}

<style>
	.map {
		background-color: #eee;
		height: 50vh;
		width: 100%;
	}

	.locations-list {
        height: 100%;
	}

	@@media (min-width: 992px) {
		.map {
			height: 80vh;
		}

		.locations-list {
            overflow: hidden;
			height: 80vh;
		}
	}
</style>

@if (apiKey != "") {
    <div class="grid position-relative">
        <div class="g-col-12 grid">
			@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle")) {
                <div class="g-col-12 g-col-lg-8">
				    <h1 class="mb-0">@Model.Item.GetString("Title")</h1>
                </div>
			}

            <div class="g-col-12 g-col-lg-4 input-group">
                <input type="text" class="form-control" id="mapSearch" placeholder="@Translate("Search location")">
                <button class="btn btn-outline-secondary" type="button" id="mapSearchButton">@ReadFile(iconPath+"search.svg")</button>
            </div>
        </div>
        
        <div class="g-col-12 g-col-lg-8 order-1 order-lg-2">
		    <div class="map" id="map"></div>
	    </div>

	    @if (locationList.Count() > 1) {
		    <div class="g-col-12 g-col-lg-4 order-2 order-lg-1">
                <div class="locations-list">
                    <div class="d-none" id="emptyMapList">
                        <div class="alert alert-info" role="alert">
                            <span>@Translate("There are no options in the selected area")</span>
                        </div>
                    </div>

			        <ul class="list-group" id="mapList">
				        @foreach (var location in locationList)
				        {
                            string title = !string.IsNullOrEmpty(location.Company) ? location.Company : location.Name;
                            List<string> addressLineTwo = new List<string>();
                            if (!string.IsNullOrEmpty(location.Zip)) {
		                        addressLineTwo.Add(location.Zip);
	                        }
                            if (!string.IsNullOrEmpty(location.City)) {
		                        addressLineTwo.Add(location.City);
	                        }
                            if (!string.IsNullOrEmpty(location.State)) {
		                        addressLineTwo.Add(location.State);
	                        }
                            if (!string.IsNullOrEmpty(location.Country)) {
		                        addressLineTwo.Add(location.Country);
	                        }
                            string addressLineTwoString = (string.Join(",", addressLineTwo.Select(x => x.ToString()).ToArray())).Replace(",", ", ");

                            List<string> addressLineThree = new List<string>();
                            if (!string.IsNullOrEmpty(location.Email)) {
		                        addressLineThree.Add(location.Email);
	                        }
                            if (!string.IsNullOrEmpty(location.Phone)) {
		                        addressLineThree.Add(location.Phone);
	                        }
                            string addressLineThreeString = (string.Join(",", addressLineThree.Select(x => x.ToString()).ToArray())).Replace(",", ", ");

					        <li class="list-group-item d-none" data-location-number="@locationCounter" style="cursor: pointer">
                                <div class="d-flex">
                                    <div class="flex-fill">
                                        @if (!string.IsNullOrEmpty(title)) {
                                            <h6 class="h6">@title</h6>
                                        }
                                        @if (!string.IsNullOrEmpty(location.Address)) {
                                            <div>@location.Address</div>
							            }
                                        @if (addressLineTwo.Count > 0) {
                                            <div>@addressLineTwoString</div>
							            }
                                        @if (addressLineThree.Count > 0) {
                                            <div>@addressLineThreeString</div>
							            }
                                    </div>
                                    <div>
                                        <a href="https://www.google.dk/maps/dir//@(addressLineTwoString.Replace(", ", "+"))" class="btn icon-2 pe-0 pt-0" target="_blank" title="@Translate("Directions")">
                                            @ReadFile(iconPath+"corner-up-right.svg")
                                        </a>
                                    </div>
                                </div>
                                <div class="d-none js-address-info">
                                    @if (!string.IsNullOrEmpty(title)) {
                                        <h6 class="h6">@title</h6>
                                    }
                                    @if (!string.IsNullOrEmpty(location.Address)) {
                                        <div>@location.Address</div>
							        }
                                    @if (addressLineTwo.Count > 0) {
                                        <div>@addressLineTwoString</div>
							        }
                                    @if (addressLineThree.Count > 0) {
                                        <div>@addressLineThreeString</div>
							        }
                                    
                                    <a href="https://www.google.dk/maps/dir//@(addressLineTwoString.Replace(", ", "+"))" class="btn btn-primary w-100 mt-3" target="_blank">
                                        @Translate("Directions")
                                    </a>
                                </div>
                            </li>

					        locationCounter++;
				        }
			        </ul>

		        </div>
            </div>
	    } else if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle")) {
		    <div class="g-col-12 order-2 order-lg-1">
			    <h1>@Model.Item.GetString("Title")</h1>
		    </div>
	    }

	    
    </div>
} else {
    <div class="alert alert-info" role="alert">
        @Translate("Google maps API key is missing")
    </div>
}

<script>
    var locations = [
        @foreach (var location in locationList) {
            <text>{
                name: "@(location.Name)",
                company: "@(location.Company)",
                address: "@(location.Address)",
                city: "@(location.City)",
                zip: "@(location.Zip)",
                state: "@(location.State)",
                country: "@(location.Country)",
                location: {
                    lat: @(location.Latitude),
                    lng: @(location.Longitude)
                }
            },</text>
        }
    ];

    var mapStyle = [
  {
    "featureType": "administrative.land_parcel",
    "elementType": "labels",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "landscape.man_made",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#b0afb6"
      }
    ]
  },
  {
    "featureType": "landscape.natural",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#d7d7da"
      }
    ]
  },
  {
    "featureType": "landscape.natural.terrain",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#7ba78b"
      }
    ]
  },
  {
    "featureType": "poi",
    "elementType": "labels.text",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "poi.business",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "poi.park",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#659577"
      }
    ]
  },
  {
    "featureType": "road",
    "elementType": "labels.icon",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#f5f5f5"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#f0f0f0"
      }
    ]
  },
  {
    "featureType": "road.local",
    "elementType": "labels",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "transit",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "water",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#8ea5c2"
      }
    ]
  }
];

	function initMap() {
        // Set the geocoder
        geocoder = new google.maps.Geocoder();

		// Set initial map center
		var myMapCenter = {
			lat: 56.1394749, 
			lng: 10.1682465
		};

        // Create the geocoder
        var geocoder;

		// Create the map
		var map = new google.maps.Map(document.getElementById('map'), {
			center: myMapCenter,
            zoom: 4,
            disableDefaultUI: true,
            zoomControl: true,
            zoomControlOptions: {
                position: google.maps.ControlPosition.RIGHT_TOP,
            },
            styles: mapStyle
        });

        // Markers array
        var markers = [];
        var markersCount = 0;

		// Markup map
		locations.forEach(function(location){
            marklocation(location);
            markersCount++;
        });

        // Create InfoWindow
        var infoWindow = new google.maps.InfoWindow({
            maxWidth: 300,
            minWidth: 220
        });

        // Create a marker and set its position.
		function marklocation(location){

            var marker = new google.maps.Marker({
                icon: {
                    path: "M4,6C2.9,6,2,5.1,2,4s0.9-2,2-2s2,0.9,2,2S5.1,6,4,6 M4,0C1.8,0,0,1.8,0,4c0,3,4,7.4,4,7.4S8,7,8,4C8,1.8,6.2,0,4,0z",
                    fillColor: "black",
                    fillOpacity: 1,
                    strokeWeight: 0,
                    scale: 2
                },
				map: map,
				position: location.location,
                title: location.name,
                id: markersCount
			});

            markers.push(marker); // Keep marker instances in a global array

			// show location info when marker is clicked
			marker.addListener('click', function(){
				openInfo(location, marker);
			});
		}

        // Map is idle
        google.maps.event.addListener(map, 'idle', function () {
            showVisibleMarkers();
        });

        function showVisibleMarkers() {
            var bounds = map.getBounds();
            var markersFound = 0;

            for (var i = 0; i < markers.length; i++) {
                var marker = markers[i],
                    infoPanel = document.querySelector('[data-location-number="' + i + '"]'); 
                                           
                if (bounds.contains(marker.getPosition()) === true) {
                    infoPanel.classList.remove("d-none");
                    markersFound++;
                }
                else {
                    infoPanel.classList.add("d-none");
                }

                document.querySelector("#emptyMapList").classList.add("d-none");
            }

            if (markersFound == 0) {                   
                document.querySelector("#emptyMapList").classList.remove("d-none");
			}
        }

        //Click on list item
        document.querySelectorAll("[data-location-number]").forEach(function (locationItem) {
            locationItem.addEventListener("click", focusOnMarker);
        });

        function focusOnMarker(event) {
            infoWindow.close();

            var markerId = event.currentTarget.getAttribute("data-location-number");
            var selectedMarker = markers[markerId];

            map.setZoom(7);
            map.panTo(selectedMarker.getPosition());

            clearListItemSelection();
            
            event.currentTarget.classList.add("active");
		}

        //Click on marker
        function openInfo(location, marker) {
            var listItemId = marker.id;
            var listItem = document.querySelector('[data-location-number="' + listItemId + '"]');

            var contentString = listItem.querySelector(".js-address-info").innerHTML;

            infoWindow.setContent(contentString);
            infoWindow.open(map, marker);

            map.panTo(marker.getPosition());
        }

		function focusOnListItem(location, marker){
            var listItemId = marker.id;
            var listItem = document.querySelector('[data-location-number="' + listItemId + '"]');

            clearListItemSelection();

            map.setZoom(14);
            map.panTo(marker.getPosition());

            listItem.classList.add("active");
        }

        //Clear list item selection
        function clearListItemSelection() {
            document.querySelectorAll("[data-location-number]").forEach(function (locationItem) {
                locationItem.classList.remove("active");
            });
        }

        //Search on map (geocode)
        document.querySelector("#mapSearchButton").addEventListener("click", function (event) {
            geocode({ address: event.currentTarget.value })
        });

        function geocode(request) {
            var geocoder = new google.maps.Geocoder();
            var address = document.querySelector("#mapSearch").value;

            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setZoom(14);
                    map.panTo(results[0].geometry.location);
                } else {
                    console.log('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
	}
</script>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=@(apiKey)&libraries=places&callback=initMap"></script>



