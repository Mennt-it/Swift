@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.ProductCatalog

@functions {

	NavigationTreeViewModel GetNavigationTreeFromPageId(int pageId = 0, int startLevel = 1, int stopLevel = 9)
	{

		var navigationSettings = new NavigationSettings()
		{
			StartLevel = startLevel,
			StopLevel = stopLevel,
			RootPageId = pageId,
			ExpandMode = ExpandMode.All,
		};

		return Navigation.GetNavigationViewModel(navigationSettings);
	}

	string GetGroupFieldValue(string fieldSystemName, NavigationTreeNodeViewModel node)
	{

		ProductGroupViewModel productGroup = node.GetProductGroup();
		string fieldValue = string.Empty;
		IList<FieldValueViewModel> groupFields = productGroup.GroupFields != null ? productGroup.GroupFields : null;
		if (groupFields != null)
		{
			foreach (FieldValueViewModel field in groupFields)
			{

				if (field.SystemName == fieldSystemName)
				{
					fieldValue = field != null ? field.Value.ToString() : string.Empty;
				}
			}
		}

		return fieldValue;
	}

	bool NavigationTreeHasChildren(NavigationTreeNodeViewModel rootNode)
	{
		foreach (var subNode in rootNode.Nodes)
		{
			if (subNode.Nodes.Any())
			{
				return true;
			}
		}
		return false;
	}

	int GetPageIdFromLink(string pageLink)
	{
		return !string.IsNullOrEmpty(pageLink) ? Convert.ToInt32(pageLink.Substring(pageLink.LastIndexOf('=') + 1)) : 0;

	}

	string GetSubmenuType(NavigationTreeNodeViewModel rootNode)
	{
		string submenuType = string.Empty;
		var page = Dynamicweb.Content.Services.Pages.GetPage(rootNode.PageId);
		var pageType = !string.IsNullOrEmpty(page.ItemType) ? page.ItemType : "Swift_Page";
		if (page.PropertyItem is object && page.PropertyItem.TryGetValue("SubmenuType", out object submenuTypeValue))
		{
			submenuType = Dynamicweb.Core.Converter.ToString(submenuTypeValue);
		}
		return submenuType;
	}

	bool IsMegaMenu(NavigationTreeNodeViewModel rootNode, string submenuType)
	{
		switch (submenuType)
		{
			case "dropdown":
				return false;
			case "auto":
				return NavigationTreeHasChildren(rootNode);
			default:
				return true;
		}
	}

	string ClickableCss(NavigationTreeNodeViewModel node)
	{
		return node.IsClickable ? string.Empty : "pe-0";
	}

}

@{
	// Page settings
	int navigationRootPageId = !string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot")) ? Model.Item.GetLink("NavigationRoot").PageId : 0;
	var rootNavigation = GetNavigationTreeFromPageId(navigationRootPageId);
	int maxEndNodes = Model.Item.GetInt32("ThirdLevelNodeLimit");
	string maxEndNodesText = Model.Item.GetString("ShowAllLinkLabel");

	//CSS Settings
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? "theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string spacing = Model.Item.GetString("Spacing", "compact");
	spacing = spacing == "compact" ? "p-0" : spacing;
	spacing = spacing == "normal" ? "p-2" : spacing;
	spacing = spacing == "wide" ? "p-3" : spacing;

	string navigationLinkAlignment = Model.Item.GetString("NavAlignment", "justify-content-start text-start");
	navigationLinkAlignment = navigationLinkAlignment == "start" ? "justify-content-start text-start" : navigationLinkAlignment;
	navigationLinkAlignment = navigationLinkAlignment == "center" ? "justify-content-center text-center" : navigationLinkAlignment;
	navigationLinkAlignment = navigationLinkAlignment == "end" ? "justify-content-end text-end" : navigationLinkAlignment;

	string megaMenuAlignment = Model.Item.GetString("MegaMenuAlignment");
	megaMenuAlignment = megaMenuAlignment == "start" ? "text-start" : megaMenuAlignment;
	megaMenuAlignment = megaMenuAlignment == "center" ? "text-center" : megaMenuAlignment;
	megaMenuAlignment = megaMenuAlignment == "end" ? "text-end" : megaMenuAlignment;

	string headerLinkAnimation = Model.Item.GetString("HeaderLinkAnimation", "left");
	headerLinkAnimation = headerLinkAnimation == "left" ? "hover-underline-animation-left" : headerLinkAnimation;
	headerLinkAnimation = headerLinkAnimation == "right" ? "hover-underline-animation-right" : headerLinkAnimation;
	headerLinkAnimation = headerLinkAnimation == "center" ? "hover-underline-animation-center" : headerLinkAnimation;
	headerLinkAnimation = headerLinkAnimation == "none" ? string.Empty : headerLinkAnimation;

	string itemCss = $"nav-link megamenu-item text-decoration-none fs-6 {spacing}";

}

<div class="nav-wrapper megamenu-wrapper">
	<div class="@theme">
		<nav class="d-flex gap-2 @navigationLinkAlignment">
			@foreach (var rootNode in rootNavigation.Nodes.Where(node => node.ShowInMenu))
			{

				string submenuType = GetSubmenuType(rootNode);
				bool isMegaMenu = IsMegaMenu(rootNode, submenuType);
				string submenuTypeCss = isMegaMenu ? "position-static" : string.Empty;

				string relatedContentNavigationRoot = GetGroupFieldValue("ProductGroupRelatedContent", rootNode);
				int relatedContentPageId = !string.IsNullOrEmpty(relatedContentNavigationRoot) ? GetPageIdFromLink(relatedContentNavigationRoot) : 0;
				var relatedContentNodes = GetNavigationTreeFromPageId(relatedContentPageId).Nodes;
				bool hasRelatedContent = relatedContentNodes.Any() && relatedContentPageId != 0;
				bool nodesExist = rootNode.Nodes.Any() || hasRelatedContent;

				<div class="nav-item dropdown @submenuTypeCss">
					<a class="nav-link p-2 @headerLinkAnimation fs-6 fw-bold text-uppercase" role="button" data-bs-toggle="dropdown" data-bs-offset="0,0" aria-expanded="false">
						@rootNode.Name
					</a>

				@if(nodesExist)
				{
					if (isMegaMenu)
					{
						
						<div class="dropdown-menu border-0 megamenu-content-wrapper">
							<div class="container-xl">
								<div class="grid grid-12 py-2">
							
									@if (hasRelatedContent)
									{
										<div class="flex-column g-col-2 @megaMenuAlignment">

											@foreach (var relatedContentNode in relatedContentNodes)
											{
												<a class="@itemCss @(ClickableCss(relatedContentNode))" href="@relatedContentNode.Link">
													<strong>@relatedContentNode.Name</strong>
												</a>
											}
										</div>
									}

									<div class="g-col-10 grid grid-8 gap-4">

										@foreach (var subNode in rootNode.Nodes.Where(node => node.ShowInMenu))
										{
											<div class="g-col-2 @megaMenuAlignment">
												<a class="@itemCss @(ClickableCss(subNode))" href="@subNode.Link">
													<strong>@subNode.Name</strong>
												</a>
												@foreach (var (endNode, index) in subNode.Nodes.Select((node, idx) => (node, idx)))
												{
													if (index < maxEndNodes && endNode.ShowInMenu)
													{
														<a class="@itemCss @(ClickableCss(endNode))" href="@endNode.Link">
															@endNode.Name
														</a>

														continue;
													}

													if (!string.IsNullOrWhiteSpace(maxEndNodesText))
													{
														<a class="@itemCss text-decoration-underline" href="@subNode.Link">
															@Translate(maxEndNodesText)
														</a>
													}

													break;
												}
											</div>
											
										}
									</div>
								</div>
							</div>
						</div>	
					}
					else
					{
						<ul class="dropdown-menu border-0 rounded-0 @megaMenuAlignment">

							@if (hasRelatedContent)
							{
								foreach (var relatedContentNode in relatedContentNodes)
								{
									<li class="dropdown-item">
										<a class="@itemCss @(ClickableCss(relatedContentNode))" href="@relatedContentNode.Link">
											<strong>@relatedContentNode.Name</strong>
										</a>
									</li>
								}

								<li class="dropdown-divider"></li>
							}

							@foreach (var subNode in rootNode.Nodes.Where(node => node.ShowInMenu))
							{
								<li class="dropdown-item">
									<a class="@itemCss @(ClickableCss(subNode))" href="@subNode.Link">
										<strong>@subNode.Name</strong>
									</a>
								</li>
							}
						</ul>
					}
				}
				</div>
			}
		</nav>
	</div>
</div>








