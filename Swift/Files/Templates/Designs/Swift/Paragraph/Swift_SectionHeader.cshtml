@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{ 
	string layout = Model.Item.GetRawValueString("Layout", "text-left");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

<div class="h-100 @(contentPadding)@(theme)">
	@switch (layout)
	{
		case "text-start":
			<div class="d-flex flex-column align-items-start h-100 text-start">
				@RenderLead()
				@RenderTitle()
			</div>
		break;
		case "text-center":
			<div class="d-flex flex-column align-items-center h-100 text-center">
				@RenderLead()
				@RenderTitle()
			</div>
		break;
		case "text-end":
			<div class="d-flex flex-column align-items-end h-100 text-end">
				@RenderLead()
				@RenderTitle()
			</div>
		break;
	}
</div>

@helper RenderLead()
{
	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? " max-w-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<span class="@subtitleFontSize lead d-block mb-2@(maxWidth)">@Model.Item.GetString("Text")</span>
	}
}

@helper RenderTitle()
{

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")))
	{
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");

		<h2 class="@titleFontSize">@Model.Item.GetString("Title")</h2>
	}
}
