@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend
@using System.IO

@functions {
	public ProductViewModel product { get; set; } = new ProductViewModel();
	public string[] supportedImageFormats { get; set; }
	public string[] supportedVideoFormats { get; set; }
	public string[] supportedDocumentFormats { get; set; }
	public string[] allSupportedFormats { get; set; }

	public class RatioSettings
	{
		public string Ratio { get; set; }
		public string CssClass { get; set; }
		public string CssVariable { get; set; }
		public string Fill { get; set; }
	}

	public RatioSettings GetRatioSettings()
	{
		var ratioSettings = new RatioSettings();

		string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
		ratio = ratio != "0" ? ratio : "";
		string cssClass = ratio != "" && ratio != "fill" ? " ratio" : "";
		string cssVariable = ratio != "" && ratio != "fill" ? "--bs-aspect-ratio: " + ratio : "";

		ratioSettings.Ratio = ratio;
		ratioSettings.CssClass = cssClass;
		ratioSettings.CssVariable = cssVariable;
		ratioSettings.Fill = ratio == "fill" ? " h-100" : "";

		return ratioSettings;
	}
}

@{
	@* Get the product data *@
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	@* Supported formats *@
	supportedImageFormats = new string[] { ".jpg", ".webp", ".png", ".gif" };
	supportedVideoFormats = new string[] { "youtu.be", "youtube", "vimeo", ".mp4" };
	supportedDocumentFormats = new string[] { ".pdf" };
	allSupportedFormats = supportedImageFormats.Concat(supportedVideoFormats).Concat(supportedDocumentFormats).ToArray();

	@* Collect the assets *@
	var selectedAssetCategories = Model.Item.GetRawValueString("ImageAssets").Split(',').ToList();
	bool includeImagePatternImages = Model.Item.GetBoolean("ImagePatternImages");

	@* Needed image data collection to support both DefaultImage, ImagePatterns and Image Assets *@
	IEnumerable<MediaViewModel> assetsImages = product.AssetCategories.Where(x => selectedAssetCategories.Contains(x.SystemName)).SelectMany(x => x.Assets);
	IEnumerable<MediaViewModel> assetsList = new MediaViewModel[] { };
	assetsList = includeImagePatternImages && assetsImages.Count() == 0 ? assetsList.Append(product.DefaultImage) : assetsList;
	assetsList = assetsList.Union(assetsImages);
	assetsList = includeImagePatternImages ? assetsList.Union(product.ImagePatternImages) : assetsList;

	int totalAssets = 0;
	foreach (MediaViewModel asset in assetsList)
	{
		var assetValue = asset.Value.ToLower();
		foreach (string format in allSupportedFormats)
		{
			if (assetValue.Contains(format))
			{
				totalAssets++;
			}
		}
	}

	if (totalAssets == 0)
	{
		assetsList = new List<MediaViewModel>() { };
		totalAssets = 0;
	}

	int videoNumber = 0;

	@* Layout settings *@
	string spacing = Model.Item.GetRawValueString("Spacing", "p-0");
	spacing = spacing == "none" ? "p-0" : spacing;
	spacing = spacing == "small" ? "p-3" : spacing;
	spacing = spacing == "large" ? "p-5" : spacing;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	bool hideThumbnails = Model.Item.GetBoolean("HideThumbnails");

	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
}

@* Get assets from selected categories or get all assets *@

<div class="@spacing@(theme)">
	@if (totalAssets != 0 && assetsList.Count() != 0)
	{
		if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");

			<h3 class="@titleFontSize mb-3">
				@Model.Item.GetString("Title")
			</h3>
		}

		<div class="table-responsive">
			<table class="table table-hover align-middle mb-0" style="table-layout: fixed;">
				<thead>
					<tr>
						@if (!hideThumbnails)
						{
							<th width="60">&nbsp;</th>
						}
						<th>@Translate("Name")</th>
						<th class="text-end d-none d-lg-table-cell">@Translate("Download")</th>
						<th class="text-end" width="100">@Translate("File type")</th>
					</tr>
				</thead>
				<tbody class="border-top-0">
					@foreach (MediaViewModel asset in assetsList)
					{
						var assetValue = asset.Value.ToLower();
						string assetName = !string.IsNullOrEmpty(asset.DisplayName) ? asset.DisplayName :  asset.Value.Substring( asset.Value.LastIndexOf('/') + 1); 

						bool isVideo = false;
						foreach (string format in supportedVideoFormats)
						{ //Videos
							if (assetValue.Contains(format))
							{
								isVideo = true;
							}
						}

						if (!isVideo)
						{
							string filePath = Dynamicweb.Context.Current.Server.MapPath(assetValue);
							long fileSize = 0;

							if (File.Exists(filePath)) {
								fileSize = new System.IO.FileInfo(filePath) != null ? new System.IO.FileInfo(filePath).Length : 0;
				
								foreach (string format in allSupportedFormats)
								{
									if (assetValue.Contains(format))
									{
										<tr class="position-relative">
											@if (!hideThumbnails)
											{
												@RenderAsset(asset)
											}
											<td>
												<a href="@assetValue" class="text-decoration-none" download alt="@assetName">
													@assetName
												</a>
											</td>
											<td class="text-end d-none d-lg-table-cell">
												<a href="@assetValue" class="text-decoration-none stretched-link" download alt="@assetName">
													@fileSize KB <div class="icon-2" style="z-index: 1">@ReadFile(iconPath + "download.svg")</div>
												</a>
											</td>
											<td class="text-end">@format</td>
										</tr>
									}
								}
                            } 
						}
						else
						{
							string videoType = asset.Value.Contains("youtu.be") || asset.Value.Contains("youtube") ? "Youtube" : "";
							videoType = asset.Value.Contains("vimeo") ? "Vimeo" : videoType;

							<tr data-bs-toggle="modal" data-bs-target="#modal_@(Model.ID)_@videoNumber" style="cursor: pointer">
								@if (!hideThumbnails)
								{
									@RenderAsset(asset)
								}
								<td>
									@assetName
								</td>
								<td class="d-none d-lg-table-cell">&nbsp;</td>
								<td align="right">@videoType</td>
							</tr>

							videoNumber++;
						}
					}
				</tbody>
			</table>
		</div>

		int modalVideoNumber = 0;
		foreach (MediaViewModel asset in assetsList)
		{
			var assetName = asset.Value.ToLower();

			foreach (string format in supportedVideoFormats)
			{ //Videos
				if (assetName.Contains(format))
				{
					<div class="modal fade js-video-modal" id="modal_@(Model.ID)_@modalVideoNumber" tabindex="-1" aria-labelledby="productDetailsTableModalTitle_@(Model.ID)_@modalVideoNumber" aria-hidden="true">
						<div class="modal-dialog modal-dialog-centered modal-xl">
							<div class="modal-content">
								<div class="modal-header visually-hidden">
									<h5 class="modal-title" id="productDetailsTableModalTitle_@(Model.ID)_@modalVideoNumber">@product.Title</h5>
									<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
								</div>
								<div class="modal-body p-2 p-lg-3 h-100">
									@RenderVideoPlayer(asset)
								</div>
							</div>
						</div>
					</div>

					modalVideoNumber++;
				}
			}
		}
	}
	else if (Pageview.IsVisualEditorMode)
	{
		RatioSettings ratioSettings = GetRatioSettings();

		<div class="h-100 @theme">
			<div class="d-block @(ratioSettings.CssClass)@(ratioSettings.Fill)" style="@(ratioSettings.CssVariable)">
				<img src="~/Files/Images/missing_image.jpg" alt="@Translate("Missing image")" loading="lazy" decoding="async" class="mh-100 mw-100" style="object-fit: cover;" />
			</div>
		</div>
	}

</div>

@helper RenderAsset(MediaViewModel asset)
{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", "").Trim().ToLower() : "";
	string assetValue = asset.Value;

	<td class="@(theme) px-0">
		@foreach (string format in supportedImageFormats)
		{ //Images
			if (assetValue.Contains(format))
			{
				@RenderImage(asset)
			}
		}
		@foreach (string format in supportedVideoFormats)
		{ //Videos
			if (assetValue.Contains(format))
			{
				@RenderVideoScreendump(asset)
			}
		}
		@foreach (string format in supportedDocumentFormats)
		{ //Documents
			if (assetValue.Contains(format))
			{
				@RenderDocument(asset)
			}
		}
	</td>
}

@helper RenderImage(MediaViewModel asset)
{
	string productName = product.Name;
	productName += !string.IsNullOrEmpty(asset.Keywords) ? " " + asset.Keywords : "";
	string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;
	string imageLinkPath = imagePath;
	imagePath = $"/Admin/Public/GetImage.ashx?image={imagePath}&width=60&format=webp";

	string assetTitle = !string.IsNullOrEmpty(asset.DisplayName) ? "title=\"" + asset.DisplayName + "\"" : "";

	RatioSettings ratioSettings = GetRatioSettings();

	<a href="@imageLinkPath" class="d-block @(ratioSettings.CssClass)@(ratioSettings.Fill)" style="@(ratioSettings.CssVariable)" download>
		<div class="d-flex align-items-center justify-content-center overflow-hidden h-100">
			<img loading="lazy" src="@imagePath" class="mw-100 mh-100" alt="@productName" @assetTitle itemprop="image" />
		</div>
	</a>
}

@helper RenderVideoScreendump(MediaViewModel asset)
{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	string videoScreendumpPath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : "";
	string videoId = videoScreendumpPath.Substring(videoScreendumpPath.LastIndexOf('/') + 1);
	videoScreendumpPath = videoScreendumpPath.Contains("youtu.be") || videoScreendumpPath.Contains("youtube") ? "https://img.youtube.com/vi/" + videoId + "/maxresdefault.jpg" : videoScreendumpPath;

	string vimeoJsClass = videoScreendumpPath.Contains("vimeo") ? "js-vimeo-video-thumbnail" : "";
	videoScreendumpPath = videoScreendumpPath.Contains("vimeo") ? "" : videoScreendumpPath;

	string productName = product.Name;
	productName += !string.IsNullOrEmpty(asset.Keywords) ? " " + asset.Keywords : "";
	string assetTitle = !string.IsNullOrEmpty(asset.DisplayName) ? "title=\"" + asset.DisplayName + "\"" : "";

	RatioSettings ratioSettings = GetRatioSettings();

	<div class="d-block @(ratioSettings.CssClass)@(ratioSettings.Fill)" style="@(ratioSettings.CssVariable)">
		<div class="d-flex align-items-center justify-content-center overflow-hidden h-100">
			<div class="icon-2 position-absolute" style="z-index: 1">@ReadFile(iconPath + "play-circle.svg")</div>
			<img src="@videoScreendumpPath" loading="lazy" decoding="async" alt="@productName" @assetTitle class="@vimeoJsClass mw-100 mh-100" data-video-id="@videoId" style="object-fit: cover;" />
		</div>
	</div>
}

@helper RenderDocument(MediaViewModel asset)
{
	string productName = product.Name;
	productName += !string.IsNullOrEmpty(asset.Keywords) ? " " + asset.Keywords : "";
	string imagePath = !string.IsNullOrEmpty(asset.Value) ? asset.Value : product.DefaultImage.Value;
	string imageLinkPath = imagePath;
	imagePath = $"/Admin/Public/GetImage.ashx?image={imagePath}&width=60&format=webp";
	string assetTitle = !string.IsNullOrEmpty(asset.DisplayName) ? "title=\"" + asset.DisplayName + "\"" : "";

	RatioSettings ratioSettings = GetRatioSettings();

	<a href="@imageLinkPath" class="d-block @(ratioSettings.CssClass)@(ratioSettings.Fill)" style="@(ratioSettings.CssVariable)" download alt="@productName">
		<div class="d-flex align-items-center justify-content-center overflow-hidden h-100">
			<img loading="lazy" src="@imagePath" class="mw-100 mh-100" alt="@productName" @assetTitle />
		</div>
	</a>
}

@helper RenderVideoPlayer(MediaViewModel asset)
{
	string assetName = !string.IsNullOrEmpty(asset.DisplayName) ? asset.DisplayName : asset.Name;
	string assetValue = asset.Value;
	string videoId = asset.Value.Substring(asset.Value.LastIndexOf('/') + 1);
	string type = assetValue.Contains("youtu.be") || assetValue.Contains("youtube") ? "youtube" : "";
	type = assetValue.Contains("vimeo") ? "vimeo" : type;
	type = assetValue.Contains(".mp4") ? "selfhosted" : type;

	<div class="h-100" itemscope itemtype="https://schema.org/VideoObject">
		<span class="visually-hidden" itemprop="name">@assetName</span>
		<span class="visually-hidden" itemprop="contentUrl">@asset.Value</span>
		<span class="visually-hidden" itemprop="thumbnailUrl">@asset.Value</span>
		@if (type != "selfhosted")
		{
			<div id="player_@(Pageview.CurrentParagraph.ID)_@(videoId)"
				 class="plyr__video-embed"
				 data-plyr-provider="@(type)"
				 data-plyr-embed-id="@videoId"
				 style="--plyr-color-main: var(--swift-foreground-color); height: 100%">
			</div>

			<script type="module">
				var player = new Plyr('#player_@(Pageview.CurrentParagraph.ID)_@(videoId)', {
					type: 'video',
					youtube: {
						noCookie: true,
						showinfo: 0
					},
					fullscreen: {
						enabled: true,
						iosNative: true,
					}
				});

				document.querySelectorAll('.js-video-modal').forEach(function (modal) {
					modal.addEventListener('hidden.bs.modal', function (event) {
						player.media.pause();
					})
				});
			</script>
		}
		else
		{
			string videoType = Path.GetExtension(assetValue).ToLower();

			<video preload="auto" class="h-100 w-100" style="object-fit: cover;">
				<source src="@assetValue" type="video/@videoType.Replace(".", "")">
			</video>
		}
	</div>
}
