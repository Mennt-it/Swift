@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using System.IO


@{ 
	string horizontalAlign = !string.IsNullOrEmpty(Model.Item.GetRawValueString("HorizontalAlignment")) ? "justify-content-" + Model.Item.GetRawValueString("HorizontalAlignment") : "";
	string offcanvasDirection = !string.IsNullOrEmpty(Model.Item.GetRawValueString("OffCanvasDirection")) ? Model.Item.GetRawValueString("OffCanvasDirection") : "start";
	string productGroupPromotionImageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ProductGroupPromotionImageTheme")) ? " theme " + Model.Item.GetRawValueString("ProductGroupPromotionImageTheme").Replace(" ", "").Trim().ToLower() : "";
	string productGroupImageShape = Model.Item.GetRawValueString("ProductGroupImageShape", "");
	productGroupImageShape = productGroupImageShape == "image-square" ? "" : productGroupImageShape;
	productGroupImageShape = productGroupImageShape == "image-rounded" ? "rounded-circle" : productGroupImageShape;

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");

	var mobileNavigationSettings = new NavigationSettings();
	mobileNavigationSettings.StartLevel = 1;
	mobileNavigationSettings.StopLevel = 10;
	mobileNavigationSettings.ExpandMode = ExpandMode.All;
	mobileNavigationSettings.Parameters.Add("NavType", "first-nav");
	mobileNavigationSettings.Parameters.Add("ShowProductGroupImage", Model.Item.GetBoolean("ShowProductGroupImage"));
	mobileNavigationSettings.Parameters.Add("ProductGroupImageShape", productGroupImageShape);
	mobileNavigationSettings.Parameters.Add("ProductGroupPromotionImageTheme", productGroupPromotionImageTheme);
	mobileNavigationSettings.Parameters.Add("ShowProductGroupPromotionImage", Model.Item.GetBoolean("ShowProductGroupPromotionImage"));
	mobileNavigationSettings.Parameters.Add("ImageAspectRatio", ratio);

	if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot"))) {
		string root = Model.Item.GetString("NavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			mobileNavigationSettings.RootPageId = rootPageId;
		}
		mobileNavigationSettings.StartLevel = 2;
	} else {
		mobileNavigationSettings.StartLevel = 1;
	}
}

@if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot"))) {
	<div class="item_@Model.Item.SystemName.ToLower()">
		@Navigation.RenderNavigation("Navigation/OffCanvasNavigation.cshtml", mobileNavigationSettings)
	</div>
}
