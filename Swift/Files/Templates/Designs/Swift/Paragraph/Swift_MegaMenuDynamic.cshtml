@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb

@{ 
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string layout = Model.Item.GetRawValueString("Layout", "linksOnly");

	string navAlignment = Model.Item.GetRawValueString("NavAlignment", "justify-content-start text-start");
	navAlignment = navAlignment == "start" ? "justify-content-start text-start" : navAlignment;
	navAlignment = navAlignment == "center" ? "justify-content-center text-center" : navAlignment;
	navAlignment = navAlignment == "end" ? "justify-content-end text-end" : navAlignment;

	string linkFontWeight = Model.Item.GetRawValueString("LinkFontWeight", "fw-normal");
	linkFontWeight = linkFontWeight == "light" ? "fw-light" : linkFontWeight;
	linkFontWeight = linkFontWeight == "normal" ? "fw-normal" : linkFontWeight;
	linkFontWeight = linkFontWeight == "bold" ? "fw-bold" : linkFontWeight;

	string linkCasing = Model.Item.GetRawValueString("LinkCasing", "");
	linkCasing = linkCasing == "regular" ? "" : linkCasing;
	linkCasing = linkCasing == "uppercase" ? "text-uppercase" : linkCasing;
	linkCasing = linkCasing == "lowercase" ? "text-lowercase" : linkCasing;

	string linkFontSize = Model.Item.GetRawValueString("LinkFontSize", "fs-6");
	linkFontSize = linkFontSize == "small" ? "fs-7" : linkFontSize;
	linkFontSize = linkFontSize == "regular" ? "fs-6" : linkFontSize;
	linkFontSize = linkFontSize == "large" ? "fs-5" : linkFontSize;

	int sourcePageId = Model.Item.GetLink("ContentSource")?.PageId != null ? Model.Item.GetLink("ContentSource").PageId : 0;

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 1;
	navigationSettings.StopLevel = 10;
	navigationSettings.ExpandMode = ExpandMode.All;
	navigationSettings.Parameters.Add("theme", theme);
	navigationSettings.Parameters.Add("Layout", layout);
	navigationSettings.Parameters.Add("NavAlignment", navAlignment);
	navigationSettings.Parameters.Add("LinkFontWeight", linkFontWeight);
	navigationSettings.Parameters.Add("LinkCasing", linkCasing);
	navigationSettings.Parameters.Add("LinkFontSize", linkFontSize);
	navigationSettings.Parameters.Add("SourcePageId", sourcePageId);

	if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot")))
	{
		string root = Model.Item.GetString("NavigationRoot");

		if (root.Contains("="))
		{
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			navigationSettings.RootPageId = rootPageId;
		}
	}
}

@Navigation.RenderNavigation("Navigation/MegaMenuDynamic.cshtml", navigationSettings)
