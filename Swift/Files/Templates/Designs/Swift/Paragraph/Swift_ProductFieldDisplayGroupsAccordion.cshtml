@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@functions {

	ProductViewModel GetProduct()
	{
		ProductViewModel product = null;

		if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
		{
			product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
		}

		return product;
	}

	List<FieldGroupViewModel> GetDisplayGroups(ProductViewModel product)
	{

		bool hideFieldsWithZeroValue = Model.Item.GetBoolean("HideFieldsWithZeroValue");
		IEnumerable<string> selectedDisplayGroupSystemName = Model.Item.GetRawValueString("DisplayGroups").Split(',').ToList();
		var displayGroups = product.GetProductDisplayGroupFieldsByGroupSystemNames(selectedDisplayGroupSystemName, hideFieldsWithZeroValue);

		return displayGroups.ToList();
	}

	public static string FirstCharToUpper(string input)
	{
		return input[0].ToString().ToUpper() + input.Substring(1);
	}

}

@{
	ProductViewModel product = GetProduct();

	if (product is object)
	{

		string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
		string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
		contentPadding = contentPadding == "none" ? string.Empty : contentPadding;
		contentPadding = contentPadding == "small" ? " p-2 p-md-3" : contentPadding;
		contentPadding = contentPadding == "large" ? " p-4 p-md-5" : contentPadding;

		string title = Model.Item.GetString("Title");
		bool hideGroupHeaders = Model.Item.GetBoolean("HideGroupHeaders");
		bool hideLabels = Model.Item.GetBoolean("HideFieldLabels");
		bool hideTitle = Model.Item.GetBoolean("HideTitle");
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");

		string size = "compact";
		string gapCss = size == "full" ? " gap-4" : " gap-2";

		var displayGroups = GetDisplayGroups(product);
		string templateLayout = Model.Item.GetRawValueString("Layout", "list");
		string templateLayoutPath = $"Components/Specifications/{FirstCharToUpper(templateLayout)}.cshtml";

		var templateParams = new Dictionary<string, object>
	{
				{"Size", size },
				//Hide title and group headers only apply to the accordion layout, not its tab content layouts
				{ "HideGroupHeaders", true },
				{ "HideTitle", true }
			};

		<div class="h-100@(theme)@(contentPadding) item_@Model.Item.SystemName.ToLower()">
			<div class="grid@(gapCss)">
				@if (!hideTitle)
				{
					<h2 class="g-col-12 @titleFontSize">@Model.Item.GetString("Title")</h2>
				}
				<div class="g-col-12">
					<div class="accordion accordion-flush w-100" id="Specifications_@Model.ID">
						@foreach (var group in displayGroups)
						{
							var id = Guid.NewGuid().ToString();
							string groupHeadingId = $"SpecificationHeading_{Model.ID}_{id}";
							string groupItemId = $"SpecificationItem_{Model.ID}_{id}";

							<div class="accordion-item">
								<h2 class="accordion-header" id="@groupHeadingId">
									<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@groupItemId" aria-expanded="false" aria-controls="@groupItemId">
										@(!hideGroupHeaders ? group.Name : string.Empty)
									</button>
								</h2>
								<div id="@groupItemId" class="accordion-collapse collapse" aria-labelledby="@groupHeadingId" data-bs-parent="#Specifications_@Model.ID">
									<div class="accordion-body">
										<div class="g-col-12">
											<dl class="grid @(gapCss)">
												@{
													templateParams["Groups"] = new List<FieldGroupViewModel> { group };
													@RenderPartial(templateLayoutPath, Model, templateParams);
												}
											</dl>
										</div>
									</div>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	}
	else
	{
		<div class="alert alert-warning m-0">@Translate("Product Specification will be shown here if any")</div>
	}
}
