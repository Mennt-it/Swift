@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb

@{ 
	bool canImpersonate = false;

	if (Pageview.User?.GetSecondaryUsers() != null) {
		canImpersonate = Pageview.User.GetSecondaryUsers().Count != 0 ? true : false;
	}
}

@if (canImpersonate || Dynamicweb.Security.UserManagement.User.GetCurrentSecondaryUser() != null) { 
	<div class="d-flex flex-column flex-md-row align-items-center justify-content-end gap-2 fs-7 text-center text-md-end item_@Model.Item.SystemName.ToLower()">
		<a id="@Model.ID" class="user-select-none" style="scroll-margin-top:var(--header-height,150px)"></a>
		@if (Pageview?.User != null)
		{
			if (Dynamicweb.Security.UserManagement.User.GetCurrentSecondaryUser() != null)
			{
				<div>
					@{ @RenderSecondaryUser() }
					<span>
						@Translate("is signed in as")
					</span>
					@{ @RenderUser() }
				</div>
				<div class="d-flex justify-content-around gap-2">
					@{ @RenderSwitchUser() }
					<span class="border-2 border-end h-auto my-1"></span>
					@{ @RenderSignOut() }
				</div> }
			else
			{
				if (Pageview.User != null)
				{
					<div>
						<span>@Translate("You are signed in as")</span>
						@{ @RenderUser() }
					</div>
					<div class="d-flex justify-content-around gap-2">
						@{ @RenderSignIn() }
					</div>
				}

			}
		}
	</div>
}

@if (Pageview.IsVisualEditorMode && !canImpersonate) {
    <div class="alert alert-info mt-3" role="alert">
        <span>@Translate("Impersonation bar: Edit this column to configure")</span>
    </div>
}

@helper RenderUser()
{
	<span class="fw-bold">@Pageview.User.Name</span>
}

@helper RenderSecondaryUser()
{
	string currentSecondaryUserName = Dynamicweb.Security.UserManagement.User.GetCurrentSecondaryUser().Name;
	<span class="fw-bold">@currentSecondaryUserName</span>
}

@helper RenderSignOut()
{
	<a href="Default.aspx?ID=@(Pageview.ID)&DwExtranetRemoveSecondaryUser=1" class="btn btn-sm btn-link text-reset p-0 swift_sign-out-as-customer-link">@Translate("Sign out as customer")</a>
}

@helper RenderSignIn()
{
	Dynamicweb.Frontend.LinkViewModel CustomerListLink = Model.Item.GetLink("Link");
	string title = !string.IsNullOrEmpty(Model.Item.GetString("Title")) ? Model.Item.GetString("Title") : "";

	if (CustomerListLink != null)
	{
		<span class="d-none d-md-block border-2 border-end h-auto my-1"></span>
		<a href="@CustomerListLink.Url" class="btn btn-sm btn-link text-reset p-0 swift_sign-in-as-customer-link">@Translate("Sign in as customer")</a>
	}
}

@helper RenderSwitchUser()
{
	Dynamicweb.Frontend.LinkViewModel CustomerListLink = Model.Item.GetLink("Link");
	string title = !string.IsNullOrEmpty(Model.Item.GetString("Title")) ? Model.Item.GetString("Title") : "";

	if (CustomerListLink != null)
	{
		<span class="d-none d-md-block border-2 border-end h-auto my-1"></span>
		<a href="@CustomerListLink.Url" class="btn btn-sm btn-link text-reset p-0 swift_switch-customer-link">@Translate("Switch to another customer")</a>
	}
}

