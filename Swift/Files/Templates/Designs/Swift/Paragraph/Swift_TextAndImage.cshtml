@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	bool hideTitle = Model.Item?.GetBoolean("HideTitle") ?? false;
	string title = !hideTitle ? Model.Item.GetString("Title") : string.Empty;
	string lead = Model.Item.GetString("Lead", string.Empty);
	string text = Model.Item.GetString("Text", string.Empty);
	string buttonLabel = Model.Item.GetString("ButtonLabel", string.Empty);
	string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel link2 = new Dynamicweb.Frontend.LinkViewModel();
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string layout = Model.Item.GetRawValueString("Layout", "image-top");
	string maxWidth = Model.Item.GetRawValueString("TextReadability") == "max-width-on" ? " mw-75ch" : string.Empty;
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	string contentPaddingClass = string.Empty;
	string gapClass = " gap-3";

	switch (contentPadding)
	{
		case "small":
			contentPaddingClass = " p-3";
			gapClass = " gap-0";
			break;
		case "large":
			contentPaddingClass = " p-5";
			gapClass = " gap-0";
			break;
	}
}

<div class="d-flex flex-column@(gapClass) h-100 position-relative@(theme)">
	@switch (layout)
	{
		case "image-top":
			{
				@RenderImage()

				if (!string.IsNullOrEmpty(title) || !string.IsNullOrEmpty(lead) || !string.IsNullOrEmpty(text) || link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
				{
					<div class="d-flex flex-column gap-3 h-100@(contentPaddingClass)">
						@RenderTitle(maxWidth, title)
						@RenderLead(maxWidth, lead)
						@RenderText(maxWidth, text)
						@RenderButtons(layout,link, link2, buttonLabel, buttonLabel2, title)
					</div>
				}
			}
			break;

		case "title-top":
			{
				if (!string.IsNullOrEmpty(title))
				{ 
					<div class="@(contentPaddingClass)">
						@RenderTitle(maxWidth, title)
					</div>				
				}
				
				@RenderImage()
				
				if (!string.IsNullOrEmpty(lead) || !string.IsNullOrEmpty(text) || !string.IsNullOrEmpty(buttonLabel) || link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
				{ 
					<div class="d-flex flex-column gap-3@(contentPaddingClass)">
						@RenderLead(maxWidth, lead)
						@RenderText(maxWidth, text)
						@RenderButtons(layout,link, link2, buttonLabel, buttonLabel2, title)
					</div>
				}
			}
			break;

		case "title-lead-top":
			{
				if (!string.IsNullOrEmpty(title) || !string.IsNullOrEmpty(lead))
				{
					<div class="d-flex flex-column gap-3@(contentPaddingClass)">
						@RenderTitle(maxWidth, title)
						@RenderLead(maxWidth, lead)
					</div>				
				}
				
				@RenderImage()
				
				if (!string.IsNullOrEmpty(text) || link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
				{
					<div class="d-flex flex-column gap-3@(contentPaddingClass)">
						@RenderText(maxWidth, text)
						@RenderButtons(layout,link, link2, buttonLabel, buttonLabel2, title)
					</div>
				}
			}
			break;

		case "text-center":
			{
				@RenderImage()
				
				if (!string.IsNullOrEmpty(title) || !string.IsNullOrEmpty(lead) || !string.IsNullOrEmpty(text) || link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
				{
					<div class="d-flex flex-column gap-3 align-items-center text-center h-100@(contentPaddingClass)">
						@RenderTitle(maxWidth, title)
						@RenderLead(maxWidth, lead)
						@RenderText(maxWidth, text)
						@RenderButtons(layout,link, link2, buttonLabel, buttonLabel2, title)
					</div>
				}
			}
			break;

		case "image-bottom":
			{
				if (!string.IsNullOrEmpty(title) || !string.IsNullOrEmpty(lead) || !string.IsNullOrEmpty(text) || link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
				{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@RenderTitle(maxWidth, title)
					@RenderLead(maxWidth, lead)
					@RenderText(maxWidth, text)
					@RenderButtons(layout,link, link2, buttonLabel, buttonLabel2, title)
				</div>
				}

				@RenderImage()
			}
			break;
	}
</div>

@helper RenderTitle(string maxWidth, string title)
{
	string titleFontSize = Model.Item.GetString("TitleFontSize", "h3");

	<h3 class="m-0 @titleFontSize@(maxWidth)">
		@title
	</h3>
}

@helper RenderLead(string maxWidth, string lead)
{
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

	if (!string.IsNullOrEmpty(lead))
	{
		<p class="m-0 lead @(subtitleFontSize)@(maxWidth)">
			@lead
		</p>
	}
}

@helper RenderText(string maxWidth, string text)
{
	if (!string.IsNullOrEmpty(text))
	{
		<div class="mb-0-last-child@(maxWidth)">
			@text
		</div>
	}
}

@helper RenderImage()
{
	string image = Model.Item.GetString("Image", string.Empty);
	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;
	string ratioCssClass = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "ratio" : "";
	string ratioVariable = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "style=\"--bs-aspect-ratio: " + Model.Item.GetRawValueString("ImageAspectRatio") + "\"" : "";
	string imageAspect = Model.Item.GetRawValueString("ImageAspectRatio", "");
	string ImageObjectFit = Model.Item.GetRawValueString("ImageObjectFit", "");
	ImageObjectFit = ImageObjectFit == "cover" ? "" : ImageObjectFit;
	ImageObjectFit = ImageObjectFit == "contain" ? "object-fit:contain" : ImageObjectFit;

	if (!string.IsNullOrEmpty(image))
	{
		var parms = new Dictionary<string, object>();
		parms.Add("loading", "lazy");
		parms.Add("style", ImageObjectFit);
		parms.Add("alt", Model.Item.GetString("ImageAltText"));
		parms.Add("columns", Model.GridRowColumnCount);

		if (Model.Item.GetRawValueString("ImageAspectRatio") == "0")
		{
			parms.Add("fullwidth", true);
			parms.Add("cssClass", "img-fluid");

			if (Model.Item.GetString("Layout") == "text-center")
			{
				<figure class="d-flex flex-column align-items-center">
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure> 
			}
			else
			{
				<figure>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}
		}
		else
		{
			<figure class="mb-0 @ratioCssClass" @ratioVariable>
				@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
			</figure>
            
		}
	}
}

@helper RenderButtons(string layout, Dynamicweb.Frontend.LinkViewModel link, Dynamicweb.Frontend.LinkViewModel link2, string buttonLabel, string buttonLabel2, string title)
{
	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	string linkType2 = Model.Item.GetRawValueString("LinkType2", "page2");

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType2 == "page2" && Model.Item.GetLink("ButtonLink2") != null)
	{
		link2 = Model.Item.GetLink("ButtonLink2");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType2 == "product-group2")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink2");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product2")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink2");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	string buttonSize = Model.Item.GetRawValueString("buttonSize", "regular");
	string buttonSizeClass = string.Empty;

	switch (buttonSize)
	{
		case "small":
			buttonSizeClass = " btn-sm";
			break;
		case "large":
			buttonSizeClass = " btn-lg";
			break;
	}

	if (link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
	{
		string alignmentClass = string.Empty;

		if (layout == "text-center")
        {
			alignmentClass = " justify-content-center";
        }
		<div class="d-flex flex-wrap@(alignmentClass) gap-3">
			@RenderButton1(link, link2, buttonSizeClass, buttonLabel, title)
			@RenderButton2(link, link2 ,buttonSizeClass, buttonLabel2, title)
		</div>
	}

}

@helper RenderButton1 (Dynamicweb.Frontend.LinkViewModel link, Dynamicweb.Frontend.LinkViewModel link2, string buttonSizeClass, string buttonLabel, string title)
{	
	string stretchedLink = Model.Item.GetRawValueString("StretchedLink", "column-not-clickable");
	string buttonStyle = Model.Item.GetRawValueString("ButtonStyle") == "primary" ? " btn-primary" : " btn-secondary";
	string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;
	string stretchedLinkClass = stretchedLink == "column-clickable" && string.IsNullOrEmpty(link2.Url) ? " stretched-link" : string.Empty;

	if (link != null && !string.IsNullOrEmpty(link.Url) && !string.IsNullOrEmpty(buttonLabel))
	{
		<a href="@link.Url" @target class="text-nowrap btn@(buttonStyle)@(buttonSizeClass)@(stretchedLinkClass)">@buttonLabel</a>
	}
	
	else if (link != null && !string.IsNullOrEmpty(link.Url) && string.IsNullOrEmpty(buttonLabel))
	{	
		<a href="@link.Url" @target class="@(stretchedLinkClass)">
			<span class="visually-hidden">@title</span>
		</a>
	}
}

@helper RenderButton2 (Dynamicweb.Frontend.LinkViewModel link, Dynamicweb.Frontend.LinkViewModel link2, string buttonSizeClass, string buttonLabel2, string title)
{	
	string stretchedLink2 = Model.Item.GetRawValueString("StretchedLink2", "column-not-clickable");
	string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2") == "secondary" ? " btn-secondary" : " btn-primary";
	string target2 = link2.IsExternal ? "target=\"_blank\"" : string.Empty;
	string stretchedLinkClass = stretchedLink2 == "column-clickable" && string.IsNullOrEmpty(link.Url) ? " stretched-link" : string.Empty;

	if (link2 != null && !string.IsNullOrEmpty(link2.Url) && !string.IsNullOrEmpty(buttonLabel2))
	{
		<a href="@link2.Url" @target2 class="text-nowrap btn@(buttonStyle2)@(buttonSizeClass)@(stretchedLinkClass)">@buttonLabel2</a>
	}
	
	else if (link2 != null && !string.IsNullOrEmpty(link2.Url) && string.IsNullOrEmpty(buttonLabel2))
	{	
		<a href="@link2.Url" @target2 class="@(stretchedLinkClass)">
			<span class="visually-hidden">@title</span>
		</a>
	}
}
