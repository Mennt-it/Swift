@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string layout = Model.Item.GetRawValueString("Layout", "image-top");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "" : contentPadding;
	contentPadding = contentPadding == "small" ? " p-3 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? " p-5 p-md-5" : contentPadding;

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string buttonLabel = Model.Item.GetString("ButtonLabel");
	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds)
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds)
		};
	}
}

<div class="h-100 position-relative@(theme) mb-0-last-child">
	@switch (layout)
	{

		case "image-top":
			{
				@RenderImageTop(contentPadding, titleFontSize, subtitleFontSize, maxWidth, link)
			}
			break;

		case "title-top":
			{
				@RenderTitleTop(contentPadding, titleFontSize, subtitleFontSize, maxWidth, link)
			}
			break;

		case "title-lead-top":
			{
				@RenderTitleLeadTop(contentPadding, titleFontSize, subtitleFontSize, maxWidth, link)
			}
			break;

		case "text-center":
			{
				@RenderTextCenter(contentPadding, titleFontSize, subtitleFontSize, maxWidth, link)
			}
			break;

		case "image-bottom":
			{
				@RenderImageBottom(contentPadding, titleFontSize, subtitleFontSize, maxWidth, link)
			}
			break;

	}
</div>


@helper RenderImage()
{
	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;
	string ratioCssClass = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "ratio" : "";
	string ratioVariable = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "style=\"--bs-aspect-ratio: " + Model.Item.GetRawValueString("ImageAspectRatio") + "\"" : "";
	string imageAspect = Model.Item.GetRawValueString("ImageAspectRatio", "");
	string ImageObjectFit = Model.Item.GetRawValueString("ImageObjectFit", "");
	ImageObjectFit = ImageObjectFit == "cover" ? "" : ImageObjectFit;
	ImageObjectFit = ImageObjectFit == "contain" ? "object-fit:contain" : ImageObjectFit;

	if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
	{
		var parms = new Dictionary<string, object>();
		parms.Add("loading", "lazy");
		parms.Add("style", ImageObjectFit);
		parms.Add("alt", Model.Item.GetString("ImageAltText"));
		parms.Add("columns", Model.GridRowColumnCount);

		if (Model.Item.GetRawValueString("ImageAspectRatio") == "0")
		{
			parms.Add("fullwidth", true);
			parms.Add("cssClass", "img-fluid");

			if (Model.Item.GetString("Layout") == "text-center")
			{
				<figure class="d-flex flex-column align-items-center">
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure> 
			}
			else
			{
				<figure>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}
		}
		else
		{
			<figure class="@ratioCssClass" @ratioVariable>
				@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
			</figure>
            
		}
	}
}

@helper RenderTitle()
{

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		@Model.Item.GetString("Title")
	}
}

@helper RenderLead()
{

	if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
	{
		@Model.Item.GetString("Lead")
	}
}

@helper RenderText(string maxWidth)
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<div class="mb-3 mb-0-last-child@(maxWidth)">
			@Model.Item.GetString("Text")
		</div>
	}
}

@helper RenderButton(Dynamicweb.Frontend.LinkViewModel link)
{
	string StretchedLink = Model.Item.GetRawValueString("StretchedLink", "");
	StretchedLink = StretchedLink == "column-not-clickable" ? "" : StretchedLink;
	StretchedLink = StretchedLink == "column-clickable" ? " stretched-link" : StretchedLink;
	if (link != null && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : "";
		string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "");
		buttonStyle = buttonStyle == "primary" ? "btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? "btn-secondary" : buttonStyle;
		<a href="@link.Url" @target class="btn @buttonStyle@(StretchedLink)">@Model.Item.GetString("ButtonLabel")</a>
	}

	else if (link != null && !string.IsNullOrEmpty(link.Url))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : "";

		<a href="@link.Url" @target class="@StretchedLink">
			<span class="visually-hidden">@Model.Item.GetString("Title")</span>
		</a>
	}
}

@helper RenderImageTop(string contentPadding, string titleFontSize, string subtitleFontSize, string maxWidth, Dynamicweb.Frontend.LinkViewModel link)
{
	@RenderImage()
	<div class="flex-fill@(contentPadding) mb-0-last-child">
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			<h3 class="mb-3 @titleFontSize@(maxWidth)">@RenderTitle()</h3>
		}
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
		{
			<p class="@subtitleFontSize lead@(maxWidth)">@RenderLead()</p>
		}
		@RenderText(maxWidth)

		<div class="mb-3">
			@RenderButton(link)
		</div>

	</div>
}

@helper RenderTitleTop(string contentPadding, string titleFontSize, string subtitleFontSize, string maxWidth, Dynamicweb.Frontend.LinkViewModel link)
{
	<div class="d-flex flex-column h-100 mb-0-last-child">
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")))
		{
			<div class="flex-fill@(contentPadding) mb-3">
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
				{
					<h3 class="mb-0 @titleFontSize@(maxWidth)">@RenderTitle()</h3>
				}
			</div>
		}
		@RenderImage()
		<div class="flex-fill@(contentPadding) mb-0-last-child">
			@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
			{
				<p class="@subtitleFontSize lead@(maxWidth)">@RenderLead()</p>
			}
			@RenderText(maxWidth)
			<div class="mb-3">
				@RenderButton(link)
			</div>
		</div>
	</div>
}

@helper RenderTitleLeadTop(string contentPadding, string titleFontSize, string subtitleFontSize, string maxWidth, Dynamicweb.Frontend.LinkViewModel link)
{
	if (
		!string.IsNullOrEmpty(Model.Item.GetString("Title")) ||
		!string.IsNullOrEmpty(Model.Item.GetString("lead"))
		)
	{
		<div class="flex-fill mb-3 mb-0-last-child@(contentPadding)">
			@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
			{
				<h3 class="@titleFontSize mb-3@(maxWidth)">@RenderTitle()</h3>
			}
			@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
			{
				<p class="@subtitleFontSize lead mb-3@(maxWidth)">@RenderLead()</p>
			}
		</div>
	}
	@RenderImage()
	<div class="flex-fill@(contentPadding) mb-0-last-child">
		@RenderText(maxWidth)
		<div class="mb-3">
			@RenderButton(link)
		</div>
	</div>
}

@helper RenderTextCenter(string contentPadding, string titleFontSize, string subtitleFontSize, string maxWidth, Dynamicweb.Frontend.LinkViewModel link)
{
	@RenderImage()
	<div class="d-flex flex-column align-items-center text-center flex-fill mb-0-last-child @(contentPadding)">
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			<h3 class="mb-3 @titleFontSize@(maxWidth)">@RenderTitle()</h3>
		}
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
		{
			<p class="mb-3 @subtitleFontSize lead@(maxWidth)">@RenderLead()</p>
		}
		@RenderText(maxWidth)
		<div class="mb-3">
			@RenderButton(link)
		</div>
	</div>
}

@helper RenderImageBottom(string contentPadding, string titleFontSize, string subtitleFontSize, string maxWidth, Dynamicweb.Frontend.LinkViewModel link)
{
	<div class="flex-fill mb-3 mb-0-last-child@(contentPadding)">
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			<h3 class="@titleFontSize mb-3@(maxWidth)">@RenderTitle()</h3>
		}
		@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
		{
			<p class="mb-3 @subtitleFontSize lead@(maxWidth)">@RenderLead()</p>
		}
		@RenderText(maxWidth)
		<div class="mb-3">
			@RenderButton(link)
		</div>
	</div>
	@RenderImage()
}
