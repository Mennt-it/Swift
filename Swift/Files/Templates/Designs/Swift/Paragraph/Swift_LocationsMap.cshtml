@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{ 
	string apiKey = !string.IsNullOrEmpty(Pageview.AreaSettings.GetString("Google_APIKey")) ? Pageview.AreaSettings.GetString("Google_APIKey") : "";
	var locationList = Model.Item.GetUsers("UserGroup");
    string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
    int initialZoomLevel = !string.IsNullOrEmpty(Model.Item.GetString("InitialZoomLevel")) ? Model.Item.GetInt32("InitialZoomLevel") : 4;
    initialZoomLevel = initialZoomLevel == 0 ? 4 : initialZoomLevel;
    string regionCode = !string.IsNullOrEmpty(Model.Item.GetString("RegionCode")) ? Model.Item.GetString("RegionCode") : "DK";
}

@if (Model.Item.GetGeolocation("DefaultMapCenter").Latitude != 0 && Model.Item.GetGeolocation("DefaultMapCenter").Longitude != 0) { 
    <style>
	    .map {
		    background-color: #eee;
            min-height: 360px;
		    width: 100%;
	    }

	    .locations-list {
            height: 100%;
	    }

	    @@media (orientation: portrait) {
		    .map {
			    height: 40vh;
		    }
	    }

	    @@media (orientation: landscape) {
		    .map {
			    height: 50vh;
		    }
        }

	    @@media (min-width: 992px) {
		    .map {
			    height: 80vh;
		    }

		    .locations-list {
                overflow-y: auto;
			    height: 80vh;
		    }
	    }
    </style>

    if (apiKey != "") {
        <div class="grid position-relative">
            @if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle")) {
                <div class="g-col-12 g-col-lg-8 order-1">
				    <h1 class="mb-0">@Model.Item.GetString("Title")</h1>
                </div>
		    }

            <div class="g-col-12 g-col-lg-4 input-group order-2 order-lg-2">
                <input type="text" class="form-control" id="mapSearch" placeholder="@Translate("Search location")">
                <button class="btn btn-outline-secondary" type="button" id="mapSearchButton">@ReadFile(iconPath+"search.svg")</button>
            </div>

            <div class="g-col-12 g-col-lg-8 order-1 order-lg-4">
		        <div class="map" id="map"></div>
	        </div>

	        @if (locationList.Count() > 1) {
		        <div class="g-col-12 g-col-lg-4 order-2 order-lg-3">
                    <div class="locations-list">
                        <ul class="list-group" id="locationsList"></ul>
		            </div>
                </div>
	        } else if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle")) {
		        <div class="g-col-12 order-5 order-lg-3">
			        <h1>@Model.Item.GetString("Title")</h1>
		        </div>
	        }

	    
        </div>
    } else {
        <div class="alert alert-info" role="alert">
            @Translate("Google maps API key is missing")
        </div>
    }

    <script>
        var locations = [
            @foreach (var location in locationList) {
                <text>{
                    name: "@(location.Name)",
                    company: "@(location.Company)",
                    address: "@(location.Address)",
                    city: "@(location.City)",
                    zip: "@(location.Zip)",
                    state: "@(location.State)",
                    country: "@(location.Country)",
                    phone: "@(location.Phone)",
                    email: "@(location.Email)",
                    location: {
                        lat: @(location.Latitude),
                        lng: @(location.Longitude)
                    }
                },</text>
            }
        ];

        var mapStyle = [
      {
        "featureType": "administrative.land_parcel",
        "elementType": "labels",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "landscape.man_made",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#b0afb6"
          }
        ]
      },
      {
        "featureType": "landscape.natural",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#d7d7da"
          }
        ]
      },
      {
        "featureType": "landscape.natural.terrain",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#7ba78b"
          }
        ]
      },
      {
        "featureType": "poi",
        "elementType": "labels.text",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "poi.business",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "poi.park",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#659577"
          }
        ]
      },
      {
        "featureType": "road",
        "elementType": "labels.icon",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "road.highway",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#f5f5f5"
          }
        ]
      },
      {
        "featureType": "road.highway",
        "elementType": "geometry.stroke",
        "stylers": [
          {
            "color": "#f0f0f0"
          }
        ]
      },
      {
        "featureType": "road.local",
        "elementType": "labels",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "transit",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "water",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#8ea5c2"
          }
        ]
      }
    ];

	    function initMap() {
            
	    }
    </script>

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=@(apiKey)&libraries=places&callback=initMap"></script>
} else {
    <div class="alert alert-info" role="alert">
        @Translate("The map is not proberly configured")
    </div>
}


@Model.Item.GetGeolocation("DefaultMapCenter").Longitude
