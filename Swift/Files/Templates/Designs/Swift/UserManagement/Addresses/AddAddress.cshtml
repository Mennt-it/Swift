@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb.Environment

@{
	string apiKey = !string.IsNullOrEmpty(Pageview.AreaSettings.GetString("Google_APIKey")) ? Pageview.AreaSettings.GetString("Google_APIKey") : "";
	string currentCountry = Pageview.User.CountryCode;

	var themeRaw = Pageview.CurrentParagraph.Item["Theme"]?.ToString();
	string theme = !string.IsNullOrEmpty(themeRaw) ? " h-100 theme " + themeRaw.Replace(" ", "").Trim().ToLower() : "";
}

@if (theme != "")
{
	<div class="@(theme)">
		@RenderContent()
	</div>
}
else
{
	@RenderContent()
}

@helper RenderContent() {
	string invalidDescription = !string.IsNullOrEmpty(GetString("UserManagement:User.Description.Input.Error")) ? "is-invalid" : "";
	string invalidName = !string.IsNullOrEmpty(GetString("UserManagement:User.Name.Input.Error")) ? "is-invalid" : "";
	string invalidEmail = !string.IsNullOrEmpty(GetString("UserManagement:User.Email.Input.Error")) ? "is-invalid" : "";

	string currentCountry = GetString("UserManagement:User.UserAddress.CountryCode.Value");
	var regions = Dynamicweb.Ecommerce.Services.Countries.GetRegions(currentCountry);
	string countrySelectorColumnSize = "g-col-12 g-col-lg-3";
	string regionLabel = "State";

	@GetString("UserManagement:User.ManageAddresses.FormStart")
	<input type="hidden" name="ManageAddressesFormAction" value="Update" />

	<header class="py-1">
		<div class="p-3 border-bottom">
			@if (GetBoolean("UserManagement:User.ManageAddresses.AddAddress"))
			{
				<h1 class="h6 m-0">@Translate("Add address")</h1>
			}
			else
			{
				<h1 class="h6 m-0">@Translate("Update address")</h1>
			}
		</div>
	</header>

	<div class="p-3">
		<div class="grid gap-3">
			<div class="g-col-12">
				<div class="form-floating">
					<input type="text" class="form-control" id="FindLocationField" placeholder="@Translate("Find location")" form="nosubmit">
					<label for="FindLocationField">@Translate("Find location")</label>
				</div>
			</div>

			<div class="g-col-12">
				<div class="form-floating">
					<input type="text" class="form-control @invalidDescription" placeholder="@Translate("Description")" id="UserManagement_Form_Description" name="Description" value="@GetString("UserManagement:User.UserAddress.Description.Value")" required />
					<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.Description.Input.Error")</div>
					<label for="UserManagement_Form_Description" class="form-label">@Translate("Description")</label>
				</div>
			</div>

			<div class="g-col-12">
				<div class="form-floating">
					<input type="text" class="form-control" placeholder="@Translate("Company") (@Translate("optional"))" id="UserManagement_Form_Company" name="Company" value="@GetString("UserManagement:User.UserAddress.Company.Value")" />
					<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.Company.Input.Error")</div>
					<label for="UserManagement_Form_Company" class="form-label">@Translate("Company") (@Translate("optional"))</label>
				</div>
			</div>

			<div class="g-col-12">
				<div class="form-floating">
					<input type="text" class="form-control" placeholder="@Translate("Street & number")" id="UserManagement_Form_Address" name="Address" value="@GetString("UserManagement:User.UserAddress.Address.Value")" required />
					<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.Address.Input.Error")</div>
					<label for="UserManagement_Form_Address" class="form-label">@Translate("Street & number")</label>
				</div>
			</div>

			<div class="g-col-12 g-col-lg-3">
				<div class="form-floating">
					<input type="text" class="form-control" placeholder="@Translate("Zip")" id="UserManagement_Form_Zip" name="Zip" value="@GetString("UserManagement:User.UserAddress.Zip.Value")" required />
					<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.Zip.Input.Error")</div>
					<label for="UserManagement_Form_Zip" class="form-label">@Translate("Zip code")</label>
				</div>
			</div>

			@if (currentCountry == "US" || currentCountry == "CA" || currentCountry == "GB")
			{
				if (regions.Count > 0)
				{
					countrySelectorColumnSize = "g-col-12 g-col-lg-3";
				}
			}

			<div class="@countrySelectorColumnSize">
				<div class="form-floating">
					<input type="text" class="form-control" placeholder="@Translate("Town / City")" id="UserManagement_Form_City" name="City" value="@GetString("UserManagement:User.UserAddress.City.Value")" required />
					<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.City.Input.Error")</div>
					<label for="UserManagement_Form_City" class="form-label">@Translate("Town / City")</label>
				</div>
			</div>

			@if (GetBoolean("UserManagement:User.ManageAddresses.AddAddress"))
			{
				<div class="g-col-12 g-col-lg-3">
					<div class="form-floating">
						<input type="text" class="form-control" placeholder="@regionLabel (@Translate("optional"))" id="UserManagement_Form_State" name="State" value="@GetString("UserManagement:User.UserAddress.State.Value")" />
						<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.State.Input.Error")</div>
						<label for="UserManagement_Form_State" class="form-label">@regionLabel (@Translate("optional"))</label>
					</div>
				</div>
			}
			else
			{
				if (currentCountry == "US" || currentCountry == "CA" || currentCountry == "GB")
				{

					if (regions.Count > 0)
					{
						if (currentCountry == "CA")
						{
							regionLabel = Translate("Province");
						}
						else if (currentCountry == "GB")
						{
							regionLabel = Translate("Region");
						}
						else if (currentCountry == "US")
						{
							regionLabel = Translate("State");
						}

						<div class="g-col-12 g-col-lg-3">
							<div class="form-floating">
								@{ string regionCode = GetString("UserManagement:User.UserAddress.State.Value");

									<select class="form-select" id="UserManagement_Form_State" name="State">
										@foreach (var region in regions)
										{
											string selected = region.RegionCode == regionCode ? "selected" : "";
											<option value="@region.RegionCode" @selected>@region.Name</option>
										}
									</select>
								}
								<label for="UserManagement_Form_State">@regionLabel</label>

							</div>
						</div>

					}
					else
					{
						<div class="g-col-12 g-col-lg-3">
							<div class="form-floating">
								<input type="text" class="form-control" placeholder="@regionLabel (@Translate("optional"))" id="UserManagement_Form_State" name="State" value="@GetString("UserManagement:User.UserAddress.State.Value")" />
								<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.State.Input.Error")</div>
								<label for="UserManagement_Form_State" class="form-label">@regionLabel (@Translate("optional"))</label>
							</div>
						</div>
					}
				}
				else
				{
					<div class="g-col-12 g-col-lg-3">
						<div class="form-floating">
							<input type="text" class="form-control" placeholder="@regionLabel (@Translate("optional"))" id="UserManagement_Form_State" name="State" value="@GetString("UserManagement:User.UserAddress.State.Value")" />
							<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.State.Input.Error")</div>
							<label for="UserManagement_Form_State" class="form-label">@regionLabel (@Translate("optional"))</label>
						</div>
					</div>
				}
			}

			<div class="g-col-12 g-col-lg-3">
				<div class="form-floating">
					@if (GetBoolean("UserManagement:User.ManageAddresses.AddAddress"))
					{
						<select class="form-select" id="UserManagement_Form_CountryCode" name="CountryCode">
							<option selected>@Translate("Select country")</option>
							@foreach (LoopItem country in GetLoop("UserManagement.CountryList"))
							{
								<option value="@country.GetString("Country.Code2")">@country.GetString("Country.Name")</option>
							}
						</select>
					}
					else
					{
						<select class="form-select" id="UserManagement_Form_CountryCode" name="CountryCode" onchange="submitForm()">
							@foreach (LoopItem country in GetLoop("UserManagement.CountryList"))
							{
								string selected = country.GetString("Country.Code2") == currentCountry ? "selected" : "";
								<option value="@country.GetString("Country.Code2")" @selected>@country.GetString("Country.Name")</option>
							}
						</select>}
					<label for="UserManagement_Form_CountryCode" class="form-label">@Translate("Country")</label>
				</div>
			</div>

			<div class="g-col-12 g-col-lg-6">
				<div class="form-floating">
					<input type="email" class="form-control @invalidEmail" placeholder="@Translate("Email")" id="UserManagement_Form_Email" name="Email" value="@GetString("UserManagement:User.UserAddress.Email.Value")" required />
					<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.Email.Input.Error")</div>
					<label for="UserManagement_Form_Email" class="form-label">@Translate("Email address")</label>
				</div>
			</div>

			<div class="g-col-12 g-col-lg-6">
				<div class="form-floating">
					<input type="text" class="form-control" placeholder="@Translate("Phone")" id="UserManagement_Form_Phone" name="Phone" value="@GetString("UserManagement:User.UserAddress.Phone.Value")" required />
					<div class="invalid-feedback">@GetString("UserManagement:User.UserAddress.Phone.Input.Error")</div>
					<label for="UserManagement_Form_Phone" class="form-label">@Translate("Phone number")</label>
				</div>
			</div>

			<div class="g-col-12">
				<div class="form-check">
					@if (GetBoolean("UserManagement:User.UserAddress.Default.Value"))
					{
						<input class="form-check-input" type="checkbox" id="Default" name="Default" checked="checked">
					}
					else
					{
						<input class="form-check-input" type="checkbox" id="Default" name="Default">
					}
					<label class="form-check-label" for="Default">
						@Translate("Set this address as your default address")
					</label>
				</div>
			</div>

			<div class="g-col-12">
				@if (GetBoolean("UserManagement:User.ManageAddresses.AddAddress"))
				{
					<button type="submit" id="submitter" class="btn btn-primary">@Translate("Save")</button>
				}
				else
				{
					<button type="submit" id="submit1" class="btn btn-secondary">@Translate("Update")</button>
				}
				<a href="@GetString("UserManagement:User.ManageAddresses.DetailUrl")" class="btn btn-link" id="AddressCancelButton">@Translate("Cancel")</a>
			</div>

		</div>
	</div>
	@GetString("UserManagement:User.ManageAddresses.FormEnd")
}

<script>
	function submitForm() {
		var form = document.querySelector("#AddressForm");
		form.requestSubmit();
	}
</script>

<script defer src="https://maps.googleapis.com/maps/api/js?key=@(apiKey)&libraries=places"></script>

<script type="module">
	const input = document.getElementById("FindLocationField");
	const options = {
		componentRestrictions: { country: "@currentCountry" },
		fields: ["address_components"],
		strictBounds: false,
		types: ["address"]
	};
	const autocomplete = new google.maps.places.Autocomplete(input, options);
	autocomplete.addListener("place_changed", fillInAddress);

	function fillInAddress() {
		// Get the place details from the autocomplete object.
		const place = autocomplete.getPlace();

		// Get each component of the address from the place details,
		// and then fill-in the corresponding field on the form.
		// place.address_components are google.maps.GeocoderAddressComponent objects
		// which are documented at http://goo.gle/3l5i5Mr

		if (place.address_components != undefined) {
			var locality = "";
			var sublocality = "";

			for (const component of place.address_components) {
				const componentType = component.types[0];

				switch (componentType) {
					case "route": {
						document.querySelector("#UserManagement_Form_Address").value = component.long_name;
						break;
					}

					case "postal_code": {
						document.querySelector("#UserManagement_Form_Zip").value = component.long_name;
						break;
					}

					case "postal_town": {
						locality = locality == "" ? component.long_name : locality;
						break;
					}

					case "locality": {
						locality = locality == "" ? component.long_name : locality;
						break;
					}

					case "sublocality_level_1": {
						sublocality = component.long_name;
						break;
					}

					case "administrative_area_level_1": {
						document.querySelector("#UserManagement_Form_Region").value = component.short_name;
						break;
					}

					case "country":
						document.querySelector("#UserManagement_Form_CountryCode").value = component.short_name;
						break;
				}
			}

			document.querySelector("#UserManagement_Form_City").value = sublocality != "" ? sublocality : locality;
			document.querySelector("#UserManagement_Form_Description").focus();
		}
	}
</script>
