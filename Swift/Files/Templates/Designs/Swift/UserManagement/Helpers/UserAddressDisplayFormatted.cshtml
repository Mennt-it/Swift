@using System.Linq
@using Dynamicweb.Security.UserManagement
@using System.Text.RegularExpressions
@using Dynamicweb.Ecommerce.International

@helper RenderUserAddressInline(User user)
{
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(user.CountryCode);
	
	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'First Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Last Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", user.Company, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", user.Address, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", user.Address, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", user.Address2, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", user.Zip, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", user.City, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", user.State, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", user.Region.Name, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", user.CountryCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", Dynamicweb.Ecommerce.Services.Countries.GetCountry(user.CountryCode).GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID), RegexOptions.IgnoreCase);
			
			@* Remove any bad placeholders the user may have submitted *@
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase); 
			addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			@completeLine<br/>
		}
	}
}

@helper RenderUserAddressInline(LoopItem address)
{
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(address.GetString("UserManagement:User.UserAddress.CountryCode.Value"));
	string regionCode = address.GetString("UserManagement:User.UserAddress.State.Value"); //GetRegionCode(address.GetString("UserManagement:User.UserAddress.CountryCode"), address.GetString("UserManagement:User.UserAddress.State.Value")); 
	string regionName = GetRegionName(address.GetString("UserManagement:User.UserAddress.CountryCode"), address.GetString("UserManagement:User.UserAddress.State.Value")); 
	
	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'First Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Last Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", address.GetString("UserManagement:User.UserAddress.Company.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", address.GetString("UserManagement:User.UserAddress.Address.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", address.GetString("UserManagement:User.UserAddress.Address.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", address.GetString("UserManagement:User.UserAddress.Address2.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", address.GetString("UserManagement:User.UserAddress.Zip.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", address.GetString("UserManagement:User.UserAddress.City.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", regionCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", address.GetString("UserManagement:User.UserAddress.Culture.CountryCode"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", address.GetString("UserManagement:User.UserAddress.Culture.CountryName"), RegexOptions.IgnoreCase);
			
			@* Remove any bad placeholders the user may have submitted *@
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase); 
			addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			@completeLine<br/>
		}
	}
		
	// Render email field - Not officially part of the Address format
	if (!string.IsNullOrWhiteSpace(address.GetString("UserManagement:User.UserAddress.Email.Value")))
	{
		@address.GetString("UserManagement:User.UserAddress.Email.Value")<br/>
	}
}

@helper RenderUserAddressBlock()
{
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(GetString("UserManagement:User.CountryCode"));
	string regionCode = GetRegionCode(GetString("UserManagement:User.CountryCode"), GetString("UserManagement:User.State")); 
	string regionName = GetRegionName(GetString("UserManagement:User.CountryCode"), GetString("UserManagement:User.State"));
	
	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'First Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Last Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", GetString("UserManagement:User.Company"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", GetString("UserManagement:User.Address"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", GetString("UserManagement:User.Address"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", GetString("UserManagement:User.Address2"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", GetString("UserManagement:User.Zip"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", GetString("UserManagement:User.City"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", regionCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", GetString("UserManagement:User.CountryCode"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", GetString("UserManagement:User.Culture.CountryName"), RegexOptions.IgnoreCase);
			
			@* Remove any bad placeholders the user may have submitted *@
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase); 
			addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			<div>@completeLine</div>
		}
	}
}

@helper RenderUserAddressBlock(User user)
{
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(user.CountryCode);
	
	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'First Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Last Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", user.Company, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", user.Address, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", user.Address, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", user.Address2, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", user.Zip, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", user.City, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", user.State, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", user.Region.Name, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", user.CountryCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", Dynamicweb.Ecommerce.Services.Countries.GetCountry(user.CountryCode).GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID), RegexOptions.IgnoreCase);
			
			@* Remove any bad placeholders the user may have submitted *@
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase); 
			addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			<div>@completeLine</div>
		}
	}
}

@helper RenderUserAddressBlock(LoopItem address)
{
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(address.GetString("UserManagement:User.UserAddress.CountryCode.Value"));
	string regionCode = GetRegionCode(address.GetString("UserManagement:User.UserAddress.CountryCode"), address.GetString("UserManagement:User.UserAddress.State.Value")); 
	string regionName = GetRegionName(address.GetString("UserManagement:User.UserAddress.CountryCode"), address.GetString("UserManagement:User.UserAddress.State.Value"));
	
	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'First Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", "", RegexOptions.IgnoreCase); @* This needs tobe empty because there is no 'Last Name' property on the user Address object, but the format from the UI will/could have it *@
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", address.GetString("UserManagement:User.UserAddress.Company.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", address.GetString("UserManagement:User.UserAddress.Address.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", address.GetString("UserManagement:User.UserAddress.Address.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", address.GetString("UserManagement:User.UserAddress.Address2.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", address.GetString("UserManagement:User.UserAddress.Zip.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", address.GetString("UserManagement:User.UserAddress.City.Value"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", regionCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", address.GetString("UserManagement:User.UserAddress.Culture.CountryCode"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", address.GetString("UserManagement:User.UserAddress.Culture.CountryName"), RegexOptions.IgnoreCase);
			
			@* Remove any bad placeholders the user may have submitted *@
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase); 
			addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			<div>@completeLine</div>
		}
	}
}

@functions {

	public string GetRegionName(string countryCode, string regionValue)
	{
		return GetRegionNameOrCode(countryCode, regionValue);
	}

	public string GetRegionCode(string countryCode, string regionValue)
	{
		return GetRegionNameOrCode(countryCode, regionValue, "code");
	}

	public string GetRegionNameOrCode(string countryCode, string regionValue, string nameOrCode = "name")
	{
		CountryCollection allCountryRegions = Dynamicweb.Ecommerce.Services.Countries.GetRegions(countryCode);
		Country matchedRegion = allCountryRegions.FirstOrDefault(r => r.RegionCode == regionValue || r.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) == regionValue);

		if (matchedRegion == null) return regionValue;
		
		return nameOrCode == "name" ? matchedRegion.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) : matchedRegion.RegionCode;
	}
}
