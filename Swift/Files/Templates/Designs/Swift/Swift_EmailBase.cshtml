@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Page = Dynamicweb.Content.Page

@functions
{
	private Page GetBrandingPage()
	{
		int brandingPageId = Model.Area.Item.GetLink("BrandingPage") != null ? Model.Area.Item.GetLink("BrandingPage").PageId : 0;
		return brandingPageId > 0 ? Dynamicweb.Services.Pages?.GetPage(brandingPageId) : null;
	}

	private string GetFontsToLink()
	{
		Page brandingPage = GetBrandingPage();
		if (brandingPage == null) return "";

		List<string> fonts = new List<string>();
		AddFontFamily(brandingPage, "HeaderFont", fonts);
		AddFontFamily(brandingPage, "DisplayFont", fonts);
		AddFontFamily(brandingPage, "BodyFont", fonts);

		var fontsToLink = string.Join("%7C", fonts.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("{0}:100,200,300,400,500,600,700,800,900", x)));
		return fontsToLink;
	}

	private static void AddFontFamily(Page brandingPage, string systemName, List<string> fonts)
	{
		if (brandingPage.Item[systemName] == null) return;
		dynamic font = Dynamicweb.Core.Converter.Deserialize<object>(brandingPage.Item[systemName].ToString());
		if (font != null && font.Family != null)
		{
			fonts.Add(font.Family.ToString());
		}
	}

	private string GetFontStyle(string type)
	{
		Page brandingPage = GetBrandingPage();
		if (brandingPage == null) return "";

		string fontStyle = "";
		dynamic font = Dynamicweb.Core.Converter.Deserialize<object>(brandingPage.Item[type + "Font"].ToString());
		if (font != null)
		{
			fontStyle += $"font-family:{font.Family}, sans-serif;";
			fontStyle += $"font-weight:{font.SelectedVariant};";
		}
		fontStyle += $"line-height:{brandingPage.Item[type + "LineHeight"]};";
		fontStyle += $"letter-spacing:{brandingPage.Item[type + "LetterSpacing"]}rem;";
		return fontStyle;
	}
}
@{
	string swiftVersion = ReadFile("~/Files/Templates/Designs/Swift/swift_version.txt");
	string lang = Pageview.Area.CultureInfo.TwoLetterISOLanguageName;
	string fontsToLink = GetFontsToLink();
	string bodyFontStyle = GetFontStyle("Body");
	string headerFontStyle = GetFontStyle("Header");
	string displayFontStyle = GetFontStyle("Display");
	var backgroundColor = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page.Parent).Item?.GetColor("BackgroundColor");
}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional //EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--[if IE]>
	<html xmlns="http://www.w3.org/1999/xhtml" class="ie" lang="@lang">
<![endif]-->
<!--[if !IE]><!-->
<html style="margin: 0;padding: 0;" xmlns="http://www.w3.org/1999/xhtml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml" lang="@lang">
<!--<![endif]-->
<head>
	<!-- @swiftVersion -->
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta name="x-apple-disable-message-reformatting">

	<!--[if mso]><xml><o:OfficeDocumentSettings><o:PixelsPerInch>96</o:PixelsPerInch><o:AllowPNG/></o:OfficeDocumentSettings></xml><![endif]-->
	@*GOOGLE FONTS*@

	<meta name="robots" content="noindex,nofollow">
	<title>@Model.Item.GetString("Title")</title>
	<meta property="og:title" content="@Model.Item.GetString("Title")">
	<style>
		* {
			box-sizing: border-box;
		}

		body {
			margin: 0;
			padding: 0;
		}

		a {
			color: inherit;
		}

		a[x-apple-data-detectors] {
			color: inherit !important;
			text-decoration: inherit !important;
		}

		#MessageViewBody a {
			color: inherit;
			text-decoration: none;
		}

		p {
			line-height: inherit;
		}

		h1, h2, h3, h4, h5, h6 {
			@headerFontStyle
		}

		h1.display, h2.display, h3.display, h4.display, h5.display, h6.display {
			@displayFontStyle
		}

		.column p:first-of-type,
		.column h1:first-of-type,
		.column h2:first-of-type,
		.column h3:first-of-type {
			margin-top: 0;
		}

		.column p:last-of-type {
			margin-bottom: 0;
		}

		@@media (max-width:660px) {
			.icons-inner {
				text-align: center;
			}

				.icons-inner td {
					margin: 0 auto;
				}

			.row-content {
				width: 100% !important;
			}

			.stack .column {
				width: 100%;
				display: block;
			}
		}

		@@media all {
			.ExternalClass {
				width: 100%;
			}

				.ExternalClass,
				.ExternalClass p,
				.ExternalClass span,
				.ExternalClass font,
				.ExternalClass td,
				.ExternalClass div {
					line-height: 100%;
				}

			.apple-link a {
				color: inherit !important;
				font-family: inherit !important;
				font-size: inherit !important;
				font-weight: inherit !important;
				line-height: inherit !important;
				text-decoration: none !important;
			}
		}
	</style>
	<!--[if !mso]><!-->
	<style type="text/css">
      @@import url(https://fonts.googleapis.com/css?family=@fontsToLink);
	</style>
	<link href="https://fonts.googleapis.com/css?family=@fontsToLink" rel="stylesheet" type="text/css">
	<!--<![endif]-->
</head>
<body style="font-family: Helvetica, sans-serif; font-size: 14px; margin: 0; padding: 0; -webkit-font-smoothing: antialiased; -webkit-text-size-adjust: none; text-size-adjust: none;">
	<table border="0" cellpadding="0" cellspacing="0" role="presentation" style="mso-table-lspace: 0pt; mso-table-rspace: 0pt; @bodyFontStyle;" width="100%">
		<tbody>
			<tr>
				<td>
					@ContentPlaceholder()
				</td>
			</tr>
		</tbody>
	</table>
</body>
</html>
