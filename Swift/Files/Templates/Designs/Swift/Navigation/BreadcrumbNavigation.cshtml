@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>

@if (!Pageview.IsVisualEditorMode)
{
	string menuId = Model.Parameters.ContainsKey("menu-id") ? $"menu_{Model.Parameters["menu-id"].ToString().ToLower()}" : string.Empty;
	bool showProductInBreadcrumb = Model.Parameters.ContainsKey("showProductInBreadcrumb") ? Dynamicweb.Core.Converter.ToBoolean(Model.Parameters["showProductInBreadcrumb"]) : false; 

	<ol class="breadcrumb small mb-0 @menuId">
		@{@RenderNodes(Model.Nodes)}
		@if (showProductInBreadcrumb && !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString["ProductID"]))
		{
			string productid = Dynamicweb.Context.Current.Request.QueryString["ProductID"];
			string variantid = Dynamicweb.Context.Current.Request.QueryString["VariantID"];
			var product = Dynamicweb.Ecommerce.Services.Products.GetProductById(productid, variantid, Dynamicweb.Ecommerce.Common.Context.LanguageID);
			if (product != null)
			{
				<li class="breadcrumb-item">
					@product.Name
				</li>
			}
		}
	</ol>
}
else if (Model.Nodes.Count() < 2)
{
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("Breadcrumb navigation: The navigation will be shown here, if any")</span>
	</div>
}

@helper RenderNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{
	foreach (var node in nodes)
	{
		if (node.ShowInBreadcrumb)
		{
			if (!string.IsNullOrEmpty(node.Link))
			{
				<li class="breadcrumb-item">
					<a href="@node.Link">
						@node.Name
					</a>
				</li>
			}
			else
			{
				<li class="breadcrumb-item">
					@node.Name
				</li>
			}

		}

		{@RenderNodes(node.Nodes)}
}
}
