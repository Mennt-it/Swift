@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using Dynamicweb.Frontend
@using System.IO

@{ 
	string theme = Model.Parameters["theme"].ToString();
	string navAlignment = Model.Parameters["NavAlignment"].ToString();
	string linkFontWeight = Model.Parameters["LinkFontWeight"].ToString();
	string linkCasing = Model.Parameters["LinkCasing"].ToString();
	string linkFontSize = Model.Parameters["LinkFontSize"].ToString();
}

<nav class="navbar navbar-expand d-none d-lg-flex mx-n2 position-static megamenu-wrapper py-0 @navAlignment">
	@RenderFirstLevelNodes(Model.Nodes, theme, linkFontWeight, linkCasing, linkFontSize)
</nav>

<nav class="navbar navbar-expand d-flex d-lg-none mx-n2 py-0 @navAlignment">
	@RenderFirstLevelNodesMobile(Model.Nodes, linkFontWeight, linkCasing, linkFontSize, navAlignment)
</nav>

@helper RenderFirstLevelNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, string theme, string linkFontWeight, string linkCasing, string linkFontSize)
{
	string dropdownAlignment = Model.Parameters["DropdownAlignment"].ToString();
	string dropdownLinkHeaderFontWeight = Model.Parameters["DropdownLinkHeaderFontWeight"].ToString();
	string dropdownLinkHeaderCasing = Model.Parameters["DropdownLinkHeaderCasing"].ToString();
	string dropdownLinkHeaderFontSize = Model.Parameters["DropdownLinkHeaderFontSize"].ToString();
	string dropdownLinkFontWeight = Model.Parameters["DropdownLinkFontWeight"].ToString();
	string dropdownLinkCasing = Model.Parameters["DropdownLinkCasing"].ToString();
	string dropdownLinkFontSize = Model.Parameters["DropdownLinkFontSize"].ToString();

	<ul class="navbar-nav">
		@foreach (var node in nodes)
		{
			var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
			var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page);
			string submenuType = pageViewModel.PropertyItem.GetRawValueString("SubmenuType", "auto");

			var hasChildren = node.Nodes.Count() > 0;
			string dropdownAttributes = hasChildren ? " role=\"button\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"" : "";

			bool hasManyChildren = false;
			foreach (var subnode in node.Nodes)
			{
				if (subnode.Nodes.Any())
				{
					hasManyChildren = true;
				}
			}

			submenuType = submenuType == "auto" && hasManyChildren ? "megamenu" : submenuType;
			submenuType = submenuType == "auto" && !hasManyChildren ? "dropdown" : submenuType;
			string submenuTypeCss = submenuType == "dropdown" ? " dropdown" : "";
			submenuTypeCss = submenuType == "megamenu" ? " dropdown has-megamenu" : submenuTypeCss;

			<li class="nav-item@(node.IsActive ? " active" : "")@submenuTypeCss HELLO @pageViewModel.PropertyItem.GetRawValueString("SubmenuType", "auto")">
				@if (node.IsClickable)
				{
					<a class="nav-link nav-link-clean nav-link-underline @linkFontWeight @linkCasing @linkFontSize@(node.IsActive ? " active" : "")@(hasChildren ? " dropdown-toggle" : "")" href="@(hasChildren ? "#" : node.Link)" @dropdownAttributes>
						@RenderNavigationItem(node, pageViewModel)
					</a>
				}
				else
				{
					<span class="nav-link nav-link-clean @linkFontWeight @linkCasing @linkFontSize" @dropdownAlignment>
						@RenderNavigationItem(node, pageViewModel)
					</span>
				}

				@if (hasChildren)
				{
					if (submenuType == "megamenu")
					{
						<div class="dropdown-menu megamenu px-3 py-4@(theme)" id="NavGroup@(node.PageId)">
							<div class="container-xl">
								<div class="d-flex flex-row flex-wrap mx-n2 @dropdownAlignment">
									@foreach (var subnode in node.Nodes)
									{
										<div class="col-2">
											<a href="@subnode.Link" class="nav-link nav-link-underline">
												<h6 class="m-0 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
											</a>
											@if (subnode.Nodes.Any())
											{
												foreach (var subsubnode in subnode.Nodes)
												{
													<a class="nav-link nav-link-underline" href="@subsubnode.Link" @(subnode.IsActive ? " aria-current='page'" : "")>
														<span class="@dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
													</a>
												}
											}
										</div>
									}
								</div>
							</div>
						</div> 
						}
					else
					{
						string pageType = page.ItemType;

						<ul class="dropdown-menu@(theme)">
							@if (pageType == "Swift_SignIn")
							{
								if (Pageview.User == null)
								{
									<li>
										<a href="@node.Link" class="dropdown-item nav-link-underline  @linkFontWeight @linkCasing @linkFontSize" @(node.IsActive ? " aria-current='page'" : "")>@node.Name</a>
									</li>
								}
							}

							@foreach (var subnode in node.Nodes)
							{
								<li>
									<a class="dropdown-item nav-link-underline  @linkFontWeight @linkCasing @linkFontSize" href="@subnode.Link" @(node.IsActive ? " aria-current='page'" : "")>@subnode.Name</a>
								</li>
							}

							@if (pageType == "Swift_SignIn")
							{
								if (Pageview.User != null)
								{
									string link = "/Admin/Public/ExtranetLogoff.aspx?redirect=no";
						
									<li><hr class="dropdown-divider"></li>

									if (Pageview.User.CurrentSecondaryUser != null)
									{
										<li>
											<a href="Default.aspx?ID=@(Pageview.ID)&DwExtranetRemoveSecondaryUser=1" class="dropdown-item nav-link-underline @linkFontWeight @linkCasing @linkFontSize" @(node.IsActive ? " aria-current='page'" : "")  >@Translate("Sign out as a customer")</a>
										</li>
									}
									<li>
										<a href="@link" class="dropdown-item nav-link-underline @linkFontWeight @linkCasing @linkFontSize" @(node.IsActive ? " aria-current='page'" : "")>@Translate("Sign out")</a>
									</li>
								}

							}
						</ul>
					}
				}
			</li>
		}
	</ul>
}

@helper RenderFirstLevelNodesMobile(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, string linkFontWeight, string linkCasing, string linkFontSize, string navAlignment)
{
	<div class="navbar-nav">
		@foreach (var node in nodes)
		{
			var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
			var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page);
			var hasChildren = node.Nodes.Count() > 0;

			if (node.IsClickable)
			{
				<a class="nav-link nav-link-clean text-nowrap @linkFontWeight @linkCasing @linkFontSize @(node.IsActive ? " active" : "")" href="@node.Link">
					@RenderNavigationItem(node, pageViewModel)
				</a>
			}
			else
			{
				<span class="nav-link nav-link-clean text-nowrap @linkFontWeight @linkCasing @linkFontSize">
					@RenderNavigationItem(node, pageViewModel)
				</span>
			}
		}
	</div>
}

@helper RenderNavigationItem(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node, PageInfoViewModel pageViewModel)
{
	string pageType = pageViewModel.Item.SystemName;
	string linkFontSize = Model.Parameters["LinkFontSize"].ToString();
	string layout = Model?.Parameters["Layout"].ToString();
	string icon = pageViewModel.PropertyItem.GetRawValueString("Icon", "");
	string iconSize = "icon-3";

	if (linkFontSize == "fs-7")
	{
		iconSize = "icon-2";
	}
	if (linkFontSize == "fs-5")
	{
		iconSize = "icon-4";
	}

	if (pageType == "Swift_Cart")
	{
		double totalProducts = 0;

		if (Dynamicweb.Ecommerce.Common.Context.Cart != null)
		{
			totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentProductLineQuantityCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
		}

		switch (layout)
		{
			case "linksOnly":
				<span class="align-middle">@node.Name</span>
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
			break;
		case "iconsOnly":
			@RenderIcon(icon, iconSize)
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				break;
			case "iconsAndLinks":
				@RenderIcon(icon, iconSize)
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				<span class="align-middle">@node.Name</span>
				break;
			case "linksAndIcons":
				<span class="align-middle">@node.Name</span>
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				@RenderIcon(icon, iconSize)
				break;
		}
	}
	else
	{
		switch (layout)
		{
			case "linksOnly":
				<span class="align-middle">@node.Name</span>
				break;

			case "iconsOnly":
				@RenderIcon(icon, iconSize)
				break;
			case "iconsAndLinks":
				@RenderIcon(icon, iconSize)
				<span class="align-middle">@node.Name</span>
				break;
			case "linksAndIcons":
				<span class="align-middle">@node.Name</span>
				@RenderIcon(icon, iconSize)
				break;
		}
	}
}

@helper RenderIcon(string icon, string iconSize)
{
	if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none"))
	{
		string iconPath = Dynamicweb.Context.Current.Server.MapPath(icon);

		<span class="@iconSize">
			@ReadFile(iconPath)
		</span>
	}
}
