@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using Dynamicweb.Frontend
@using System.IO
@using Dynamicweb.Ecommerce.ProductCatalog


@RenderFirstLevelNodes(Model.Nodes)


@helper RenderFirstLevelNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{
	string linkFontWeight = Model.Parameters["LinkFontWeight"] != null ? Model.Parameters["LinkFontWeight"].ToString() : string.Empty;
	string linkCasing = Model.Parameters["LinkCasing"] != null ? Model.Parameters["LinkCasing"].ToString() : string.Empty;
	string linkFontSize = Model.Parameters["LinkFontSize"] != null ? Model.Parameters["LinkFontSize"].ToString() : string.Empty;		
	string dropdownLinkHeaderFontWeight = Model.Parameters["DropdownLinkHeaderFontWeight"] != null ? Model.Parameters["DropdownLinkHeaderFontWeight"].ToString() : string.Empty;
	string dropdownLinkHeaderCasing = Model.Parameters["DropdownLinkHeaderCasing"] != null ? Model.Parameters["DropdownLinkHeaderCasing"].ToString() : string.Empty;
	string dropdownLinkHeaderFontSize = Model.Parameters["DropdownLinkHeaderFontSize"] != null ? Model.Parameters["DropdownLinkHeaderFontSize"].ToString() : string.Empty;
	string dropdownLinkFontWeight = Model.Parameters["DropdownLinkFontWeight"] != null ? Model.Parameters["DropdownLinkFontWeight"].ToString() : string.Empty;
	string dropdownLinkCasing = Model.Parameters["DropdownLinkCasing"] != null ? Model.Parameters["DropdownLinkCasing"].ToString() : string.Empty;
	string dropdownLinkFontSize = Model.Parameters["DropdownLinkFontSize"] != null ? Model.Parameters["DropdownLinkFontSize"].ToString() : string.Empty;

	string nodeId = "";
	string dataType = "";

	<div class="d-flex flex-wrap mx-n2">
		@foreach (var subnode in nodes)
		{
			nodeId = !string.IsNullOrEmpty(subnode.GroupId) ? subnode.GroupId : "Page_" + subnode.PageId.ToString();
			dataType = !string.IsNullOrEmpty(subnode.GroupId) ? "group" : "page";

			<div class="col-4 col-xxl-3 col-xxxl-2">
				<a id="@(nodeId)" data-type="@dataType" href="@subnode.Link" class="nav-link nav-link-underline lh-sm text-break">
					<h6 class="m-0 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
				</a>
				@if (subnode.Nodes.Any())
				{
					foreach (var subsubnode in subnode.Nodes)
					{
						nodeId = !string.IsNullOrEmpty(subsubnode.GroupId) ? subsubnode.GroupId : "Page_" + subsubnode.PageId.ToString();
						dataType = !string.IsNullOrEmpty(subsubnode.GroupId) ? "group" : "page";

						<a id="@(nodeId)" data-type="@dataType" class="nav-link nav-link-underline lh-sm text-break" href="@subsubnode.Link" @(subnode.IsActive ? " aria-current='page'" : "")>
							<span class="@dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
						</a>
					}
				}
			</div>
		}
	</div>	
}
