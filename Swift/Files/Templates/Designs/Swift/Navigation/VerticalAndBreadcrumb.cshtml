@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using System.IO

@{
	string menuId = Model.Parameters.ContainsKey("menu-id") ? $"menu_{Model.Parameters["menu-id"].ToString().ToLower()}" : string.Empty;

	string breadcrumbNavigation = RenderNodesForBreadcrumb(Model.Nodes).ToString();
	bool isRoot = string.IsNullOrEmpty(breadcrumbNavigation);

	string contentPadding = Model.Parameters.ContainsKey("ContentPadding") ? Model.Parameters["ContentPadding"].ToString().ToLower() : "";
}

<div class="@menuId @contentPadding">
	@if (!string.IsNullOrEmpty(breadcrumbNavigation))
	{
		<div class="navbar ms-n3 mb-3">
			<ul class="navbar-nav">
				@breadcrumbNavigation
			</ul>
		</div>
	}

	<div class="navbar">
		<ul class="navbar-nav">
			@RenderNodesForNavigation(Model.Nodes, false, isRoot)
		</ul>
	</div>
</div>

@helper RenderNodesForNavigation(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, bool parentIsActive, bool isRoot)
{
	foreach (var node in nodes)
	{
		var hasChildren = node.Nodes.Count() > 0;
		bool endLevel = node.IsActive && !hasChildren;

		if (!endLevel) //Handle the layout on all levels, except the end level
		{
			if ((node.IsActive || parentIsActive))
			{
				if (isRoot && node.IsActive) //Handle the special layout at the root level
				{
					<li class="nav-item">
						<h2 class="h6 mb-3 py-1">@Translate("Categories")</h2>
					</li>

					@RenderNodesForNavigation(node.Nodes, node.IsActive, isRoot)
				}
				else
				{
					<li class="nav-item">
						<a class="nav-link text-reset py-1" @(node.IsActive ? "aria-current='page'" : "") href="@node.Link">
							@if (node.IsActive) 
							{
								<h2 class="h6">@node.Name</h2>
							}
							else
							{ 
								@node.Name
							}
						</a>

						@if (hasChildren)
						{
							<ul class="navbar-nav ps-3">
								@RenderNodesForNavigation(node.Nodes, node.IsActive, isRoot)
							</ul>
						}
					</li>
				}
			}
			else if (hasChildren)
			{
				@RenderNodesForNavigation(node.Nodes, node.IsActive, isRoot)
			}
		}
		else //Handle the special layout at the end level
		{
			foreach (var endNode in nodes)
			{
				<li class="nav-item@(endNode.IsActive ? " active" : "")">
					<a class="nav-link text-reset py-1" @(endNode.IsActive ? "aria-current='page'" : "") href="@endNode.Link">
						<span class="@(endNode.IsActive ? "fw-bold" : "")">@endNode.Name</span>
					</a>
				</li>
			}
		}

	}
}

@helper RenderNodesForBreadcrumb(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	foreach (var node in nodes)
	{
		var hasChildren = node.Nodes.Count() > 0;

		if (node.InPath && !node.IsActive)
		{
			<li class="nav-item">
				<a class="nav-link text-reset text-uppercase d-flex align-items-center py-1" @(node.IsActive ? "aria-current='page'" : "") href="@node.Link">
					<span class="icon-4">@ReadFile(iconPath + "chevron-left.svg")</span><span class="fw-bold">@node.Name</span>
				</a>
			</li>
		}

		if (hasChildren)
		{
			@RenderNodesForBreadcrumb(node.Nodes)
		}
	}
}
