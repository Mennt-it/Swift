@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using System.IO
@using System.Web
@using System.Text.RegularExpressions

@{
	string navType = Model?.Parameters["NavType"] != null ? Model.Parameters["NavType"].ToString() : "first-nav";
}

<div class="nav @navType flex-column h-auto w-100 left-0 top-0">
	@RenderNodes(Model.Nodes)
</div>


@helper RenderNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{
	string groupId = HttpContext.Current.Request["GroupID"] != null ? HttpContext.Current.Request["GroupID"].ToString() : "";
	string productId = HttpContext.Current.Request["ProductID"] != null ? HttpContext.Current.Request["ProductID"].ToString() : "";
	string variantId = HttpContext.Current.Request["VariantID"] != null ? HttpContext.Current.Request["VariantID"].ToString() : "";
	Regex reg = new Regex(@"\(([^\)]+)\)");

	foreach (var node in nodes)
	{
		var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
		string pageType = page.ItemType;

		var hasChildren = node.Nodes.Count() > 0;
		var nodeId = !string.IsNullOrEmpty(node.GroupId) ? node.GroupId : node.PageId.ToString();
		var inPathChecked = node.InPath ? "checked" : "";
		var inPathClass = node.InPath ? "in-path" : "";
		var activeClass = node.IsActive ? "active fw-bold" : "";

		<div class="nav-item d-flex align-items-center w-100 py-1">
			@if (pageType != "Swift_Preferences") { 
				<a class="nav-link position-relative flex-fill @activeClass @inPathClass" @(node.IsActive ? "aria-current='page'" : "") href="@node.Link">@node.Name</a>
				if (hasChildren) {
					<label class="nav-link position-relative" for="nav_@nodeId">
						@RenderStaticIcon("arrow-right")
					</label>
					<input type="checkbox" class="visually-hidden sub-nav-check" id="nav_@nodeId" @inPathChecked>
					<div class="nav sub-nav position-absolute h-100 opacity-0 pe-none invisible w-100 left-0 top-0">
						<div class="h-100 w-100 overflow-y-auto overflow-x-hidden">
							<div class="nav-header position-relative d-flex align-items-center py-1">
								<label class="nav-link position-relative" for="nav_@nodeId">
									@RenderStaticIcon("arrow-left")
								</label>
								<div class="nav-link position-relative ps-0 flex-fill"><span>@node.Name</span></div>
							</div>

							@RenderNodes(node.Nodes)
						</div>
					</div>
				}
			} else {
				bool countrySelector = page.Item["CountrySelector"] != null ? Convert.ToBoolean(page.Item["CountrySelector"].ToString()) : false;
				bool languageSelector = page.Item["LanguageSelector"] != null ? Convert.ToBoolean(page.Item["LanguageSelector"].ToString()) : false;
				bool currencySelector = page.Item["CurrencySelector"] != null ? Convert.ToBoolean(page.Item["CurrencySelector"].ToString()) : false;
				string name = Translate("Preferences");
				string icon = "";

				if (languageSelector) {
					bool hideIcon = page.Item["HideIcon"] != null ? Convert.ToBoolean(page.Item["HideIcon"].ToString()) : false;

					if (!hideIcon) {
						string iconFolder = "/Files/FlagIcons/";
						icon = iconFolder + Pageview.Area.CultureInfo.Name.ToLower() + ".svg";
					}

					name = reg.Replace(Pageview.Area.CultureInfo.DisplayName, "");
				} 

				<form action="/Default.aspx?ID=@node.PageId" data-response-target-element="PreferencesModalContent" data-layout-template="Swift_Preferences.cshtml" data-preloader="inline" class="w-100">
					<input type="hidden" name="Layout" value="modal" />
					<input type="hidden" name="CurrentPageID" value="@Pageview.ID" />
					<input type="hidden" name="GroupID" value="@groupId" />
					<input type="hidden" name="ProductID" value="@productId" />
					<input type="hidden" name="VariantID" value="@variantId" />
					<a href="#" role="button" onclick="swift.PageUpdater.Update(event)" class="nav-link position-relative flex-fill @activeClass @inPathClass" @(node.IsActive ? "aria-current='page'" : "") data-bs-toggle="modal" data-bs-target="#PreferencesModal">
						@if (icon != "") { 
							if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none")) {
								string iconPath = Dynamicweb.Context.Current.Server.MapPath(icon);

								<span class="icon-2">
									@ReadFile(iconPath)
								</span>
							}
						}
						<span class="align-middle">@name</span>
					</a>
				</form>
			}
		</div>
	}
}


@helper RenderStaticIcon(string icon)
{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/" + icon + ".svg";

	if (!iconPath.ToLower().Contains("none") && iconPath != "")
	{
		iconPath = Dynamicweb.Context.Current.Server.MapPath(iconPath);

		<span class="pe-none">
			@ReadFile(iconPath)
		</span>
	}
}
