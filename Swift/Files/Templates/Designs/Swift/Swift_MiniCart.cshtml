@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>

@{ 
	bool renderOrderlineCountInsteadOfProductCount = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("RenderOrderlineCountInsteadOfProductCount")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form.Get("RenderOrderlineCountInsteadOfProductCount")) : false;
	bool getReservedAmount = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("GetReservedAmount")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form.Get("GetReservedAmount")) : false;
}

@if (getReservedAmount) {
	string productId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ProductId")) ? Dynamicweb.Context.Current.Request.Form.Get("ProductId") : null;
	string variantId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("VariantId")) ? Dynamicweb.Context.Current.Request.Form.Get("VariantId") : null;
	string unitId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("UnitId")) ? Dynamicweb.Context.Current.Request.Form.Get("UnitId") : null;

	@Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.GetReservedAmount(productId, variantId, 0, unitId);
}
else
{
	if (!renderOrderlineCountInsteadOfProductCount) {
		@Model.Cart.TotalProductsCount
	} else { 
		@Model.Cart.OrderlinesCount
	}
}


