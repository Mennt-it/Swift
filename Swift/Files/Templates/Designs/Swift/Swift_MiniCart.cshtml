@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>

@{ 
	bool renderOrderlineCountInsteadOfProductCount = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("RenderOrderlineCountInsteadOfProductCount")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form.Get("RenderOrderlineCountInsteadOfProductCount")) : false;
	bool getReservedAmount = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("GetReservedAmount")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form.Get("GetReservedAmount")) : false;
}

@if (getReservedAmount) {
	double quantity = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Quantity")) ? Convert.ToDouble(Dynamicweb.Context.Current.Request.Form.Get("Quantity")) : 0.0;
	string productId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ProductId")) ? Dynamicweb.Context.Current.Request.Form.Get("ProductId") : null;
	string variantId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("VariantId")) ? Dynamicweb.Context.Current.Request.Form.Get("VariantId") : null;
	string unitId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("UnitId")) ? Dynamicweb.Context.Current.Request.Form.Get("UnitId") : null;

	var reserveMode = Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.Mode;
	double? reservedAmount = quantity;
	if (reserveMode == Dynamicweb.Ecommerce.Frontend.Cart.ProductReserveMode.AddToCart)
	{
		reservedAmount = Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.GetReservedAmount(productId, variantId, 0, unitId);
	}

	@reservedAmount;
}
else
{
int orderlinesCount = 0;
	if (!renderOrderlineCountInsteadOfProductCount && Model?.Cart?.TotalProductsCount != null) {
		@Model.Cart.TotalProductsCount
	} else if (Model?.Cart?.CartOrderlines != null) {
		
		foreach (var orderline in Model.Cart.CartOrderlines) {
			if (orderline.IsProduct) {
				orderlinesCount++;
			}
		}

		@orderlinesCount
	} else {
		@orderlinesCount
	}
}


