@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb.Core
@using System
@using System.Web
@using System.Collections.Generic

@using Dynamicweb
@{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
}

<div class="bg-light order-first order-lg-last p-3 p-lg-5 mb-lg-4 mb-lg-4">
	<header>
		<h4 class="fs-6 fw-normal mb-2">@Translate("Add voucher") <span class="opacity-85">(@Translate("Optional"))</span></h4>
	</header>
	
	<div>
		<form method="post">
			<input type="hidden" name="">
			<div class="input-group">
				<input type="text" class="form-control" name="voucherCode" placeholder="@Translate("Add voucher here")" id="voucherInput" aria-label="@Translate("Voucher input")" aria-describedby="voucherSubmit">
				<button class="btn btn-sm btn-primary" type="submit" id="voucherSubmit" style="min-width: 100px;">
					<span>@Translate("Apply")</span>
					<span class="icon-2 ms-1">
						@ReadFile(iconPath+"tag.svg")
					</span>
				</button>
			</div>
		</form>
	</div>
</div>

@* <div class="form__field-combi">
	@Render(new TextField { Placeholder = Translate("Enter voucher code"), Name = "EcomOrderVoucherCode", Id = "EcomOrderVoucherCode", OnKeyUp = "checkEmpty();", Value = GetString("Ecom:Order.Customer.VoucherCode"), CssClass = "u-full-width" })
	@Render(new Button { ButtonType = ButtonType.Submit, Id = "EcomOrderVoucherApply", Title = Translate("Apply"), CssClass = "btn--condensed u-no-margin" })
</div>

var errors = new List<string>();
string voucherCode = GetString("Ecom:Order.Customer.VoucherCode");

if (!string.IsNullOrWhiteSpace(voucherCode))
{
	Order order = new OrderService().GetOrder(GetString("Ecom:Order.ID"));

	IEnumerable<string> codes = new List<string>();
	bool vouchersAppliedAsDiscounts = false;

	if (order.VoucherUseType.HasFlag(VoucherUseCategoryType.Discount))
	{
		codes = voucherCode.Split(new string[] { ",", ";", " " }, StringSplitOptions.RemoveEmptyEntries);
		vouchersAppliedAsDiscounts = true;
	}
	else
	{
		codes = new string[] { voucherCode.Trim() };
	}

	if (vouchersAppliedAsDiscounts && codes.Count() == 1)
	{
		@Render(new NotificationMessage { MessageType = NotificationMessageType.Success, Message = "<span class=\"u-bold\">" + voucherCode + "</span> " + Translate("applied to order") })
	}
	else
	{
		foreach (string code in codes)
		{
			Voucher vouch = Voucher.GetVoucherByCode(code);
			if (vouch == null)
			{
				errors.Add(Translate("Voucher") + " <span class=u-bold>" + code + "</span> " + Translate("not found"));
				continue;
			}
			if (vouch.DateUsed.HasValue)
			{
				errors.Add(Translate("Voucher") + " <span class=u-bold>" + code + "</span> " + Translate("already used"));
				continue;
			}
			VoucherList voucherList = VoucherList.GetListById(vouch.ListId);
			if (!voucherList.ListActive)
			{
				errors.Add(Translate("Voucher") + " <span class=u-bold>" + code + "</span> " + Translate("is not active"));
				continue;
			}
			@Render(new NotificationMessage { MessageType = NotificationMessageType.Success, Message = Translate("Voucher") + " <span class=\"u-bold\">" + code + "</span> " + Translate("applied to order") })
		}
	}

	foreach (string error in errors)
	{
		@Render(new NotificationMessage { MessageType = NotificationMessageType.Error, Message = error })
	}

} *@
