@helper RenderAddressBillingAnonymous() {
	string apiKey = !string.IsNullOrEmpty(Pageview.AreaSettings.GetString("Google_APIKey")) ? Pageview.AreaSettings.GetString("Google_APIKey") : "";

	string deliveryAddressString = GetString("Ecom:Order.Delivery.Company") + GetString("Ecom:Order.Delivery.Address") + GetString("Ecom:Order.Delivery.Zip") + GetString("Ecom:Order.Delivery.City") + GetString("Ecom:Order.Delivery.Phone");
	string billingAddressString = GetString("Ecom:Order.Customer.Company") + GetString("Ecom:Order.Customer.Address") + GetString("Ecom:Order.Customer.Zip") + GetString("Ecom:Order.Customer.City") + GetString("Ecom:Order.Customer.Phone");
	string disabled = (deliveryAddressString != billingAddressString) && billingAddressString != "" ? "" : "disabled";
	bool enableFindLocation = Pageview.CurrentParagraph.Item["EnableFindLocation"] != null ? (Boolean)Pageview.CurrentParagraph.Item["EnableFindLocation"] : false;

	string currentCountry = Pageview.Area.EcomCountryCode;
	string countrySelectorColumnSize = "g-col-6";
	string customerRegionLabel = "State";

	<div class="mt-0 checkout_swift_billing-anonymous">

		<div class="grid">
			<div class="g-col-12">
				<div class="form-floating">
					<input @disabled type="text" class="form-control" name="EcomOrderCustomerCompany" id="EcomOrderCustomerCompany" value="@GetString("Ecom:Order.Customer.Company")" placeholder="@Translate("Company")">
					<label for="EcomOrderCustomerCompany">@Translate("Company (Optional)")</label>
				</div>
			</div>

			<div class="g-col-12">
				<div class="form-floating">
					<input @disabled type="text" class="form-control" name="EcomOrderCustomerName" id="EcomOrderCustomerName" value="@GetString("Ecom:Order.Customer.Name")" placeholder="@Translate("Name")">
					<label for="EcomOrderCustomerName">@Translate("Name")</label>
				</div>
			</div>

			<div class="g-col-12">
				<div class="form-floating">
					<input @disabled type="text" class="form-control" name="EcomOrderCustomerAddress" id="EcomOrderCustomerAddress" value="@GetString("Ecom:Order.Customer.Address")" placeholder="@Translate("Street & Number")" form="nosubmit">
					<label for="EcomOrderCustomerAddress">@Translate("Street & Number")</label>
				</div>
			</div>

			<div class="g-col-12">

				<div class="grid">

					<div class="g-col-3">
						<div class="form-floating">
							<input @disabled type="text" class="form-control" name="EcomOrderCustomerZip" id="EcomOrderCustomerZip" value="@GetString("Ecom:Order.Customer.Zip")" placeholder="@Translate("Zip code")">
							<label for="EcomOrderCustomerZip">@Translate("Zip code")</label>
						</div>
					</div>

					@if(currentCountry == "US" || currentCountry == "CA" || currentCountry == "GB"){
						if (GetLoop("CustomerRegions").Count > 0) {
							countrySelectorColumnSize = "g-col-3";
						}
					}

					<div class="@countrySelectorColumnSize">
						<div class="form-floating">
							<input @disabled type="text" class="form-control" name="EcomOrderCustomerCity" id="EcomOrderCustomerCity" value="@GetString("Ecom:Order.Customer.City")" placeholder="@Translate("Town / City")">
							<label for="EcomOrderCustomerCity">@Translate("Town / City")</label>
						</div>
					</div>

					@if(currentCountry == "US" || currentCountry == "CA" || currentCountry == "GB"){
						if (GetLoop("CustomerRegions").Count > 0) {
							if (currentCountry == "CA")
							{
								customerRegionLabel = Translate("Province");
							}
							else if (currentCountry == "GB")
							{
								customerRegionLabel = Translate("Region");
							}
							else if (currentCountry == "US")
							{
								customerRegionLabel = Translate("State");
							}

							<div class="g-col-3">
								<div class="form-floating">
									<select class="form-select" name="EcomOrderCustomerRegion" id="EcomOrderCustomerRegion" onchange="submitForm()">
										@foreach (LoopItem region in GetLoop("CustomerRegions")) {
											if (region.GetString("Ecom:CustomerRegion.IsCustomerRegion") == "true") {
												<option value="@region.GetString("Ecom:CustomerRegion.RegionCode")" selected>@region.GetString("Ecom:CustomerRegion.Name")</option>
											} else {
												<option value="@region.GetString("Ecom:CustomerRegion.RegionCode")">@region.GetString("Ecom:CustomerRegion.Name")</option>
                                            }
										}
									</select>
									<label for="EcomOrderCustomerRegion">@customerRegionLabel</label>
								</div>
							</div>
                        }
					}

					<div class="g-col-12 g-col-md-3">
						<div class="form-floating">
							<select @disabled class="form-control" name="EcomOrderCustomerCountry" id="EcomOrderCustomerCountry" onchange="submitForm()">
							@foreach (LoopItem country in GetLoop("Countries")) {
								if (country.GetString("Ecom:Country.IsCustomerCountryOrDefault") == "true") {
									<option value="@country.GetString("Ecom:Country.Code2")" selected>@country.GetString("Ecom:Country.Name")</option>
								} else {
									<option value="@country.GetString("Ecom:Country.Code2")">@country.GetString("Ecom:Country.Name")</option>
								}
							}
							</select>
							<label for="EcomOrderCustomerCountry">@Translate("Country")</label>
						</div>
					</div>

				</div>

			</div>

			<div class="g-col-12">
				<div class="form-floating">
					<input @disabled type="tel" class="form-control" name="EcomOrderCustomerPhone" id="EcomOrderCustomerPhone" value="@GetString("Ecom:Order.Customer.Phone")" placeholder="@Translate("Phone number")">
					<label for="EcomOrderCustomerPhone">@Translate("Phone number")</label>
				</div>
			</div>
		</div>

	</div>

	if (enableFindLocation && !string.IsNullOrEmpty(apiKey)) { 
		<script defer src="https://maps.googleapis.com/maps/api/js?key=@(apiKey)&libraries=places"></script>

		<script type="module">
			const input = document.getElementById("EcomOrderCustomerAddress");
			const options = {
				componentRestrictions: { country: "@currentCountry" },
				fields: ["address_components"],
				strictBounds: false,
				types: ["address"]
			};
			const autocomplete = new google.maps.places.Autocomplete(input, options);
			autocomplete.addListener("place_changed", fillInAddress);

			function fillInAddress() {
				// Get the place details from the autocomplete object.
				const place = autocomplete.getPlace();

				// Get each component of the address from the place details,
				// and then fill-in the corresponding field on the form.
				// place.address_components are google.maps.GeocoderAddressComponent objects
				// which are documented at http://goo.gle/3l5i5Mr

				if (place.address_components != undefined) {
					var locality = "";
					var sublocality = "";

					for (const component of place.address_components) {
						const componentType = component.types[0];

						switch (componentType) {
							case "route": {
								document.querySelector("#EcomOrderCustomerAddress").value = component.long_name;
								break;
							}

							case "postal_code": {
								document.querySelector("#EcomOrderCustomerZip").value = component.long_name;
								break;
							}

							case "postal_town": {
								locality = locality == "" ? component.long_name : locality;
								break;
							}

							case "locality": {
								locality = locality == "" ? component.long_name : locality;
								break;
							}

							case "sublocality_level_1": {
								sublocality = component.long_name;
								break;
							}

							case "administrative_area_level_1": {
								document.querySelector("#EcomOrderCustomerRegion").value = component.short_name;
								break;
							}

							case "country":
								document.querySelector("#EcomOrderCustomerCountry").value = component.short_name;
								break;
						}
					}

					document.querySelector("#EcomOrderCustomerCity").value = sublocality != "" ? sublocality : locality;
					document.querySelector("#EcomOrderCustomerAddress").focus();
				}
			}
		</script>
	}
}
