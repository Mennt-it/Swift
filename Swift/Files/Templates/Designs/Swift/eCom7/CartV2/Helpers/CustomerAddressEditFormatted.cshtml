@using System
@using System.Collections.Generic
@using System.Linq
@using System.Text
@using System.Text.RegularExpressions
@using Dynamicweb.Rendering

@helper RenderCustomerAddressEdit(bool enableAdditionalAddress = false)
{
	string currentCountry = Pageview.Area?.EcomCountryCode != null ? Pageview.Area.EcomCountryCode : "dk";
	foreach (var countryLoopItem in GetLoop("Countries"))
	{
		if (countryLoopItem.GetString("Ecom:Country.IsCustomerCountryOrDefault") == "true")
		{
			currentCountry = countryLoopItem.GetString("Ecom:Country.Code2");
		}
	}
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetEditAddress(currentCountry);

	foreach (var addressLine in addressFormat)
	{
		string columnSize = GetBootstrapColumnSizeForCustomerAddress(addressLine, enableAdditionalAddress);
		
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{name}", "EcomOrderCustomerName", GetString("Ecom:Order.Customer.Name"), Translate("Name"), columnSize);
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{firstName}", "EcomOrderCustomerFirsName", GetString("Ecom:Order.Customer.FirstName"), Translate("First Name"), columnSize);
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{lastName}", "EcomOrderCustomerSurname", GetString("Ecom:Order.Customer.Surname"), Translate("Last Name"), columnSize);
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{company}", "EcomOrderCustomerCompany", GetString("Ecom:Order.Customer.Company"), Translate("Company"), columnSize, false);
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{address}", "EcomOrderCustomerAddress", GetString("Ecom:Order.Customer.Address"), Translate("Street & Number"), columnSize);
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{address1}", "EcomOrderCustomerAddress", GetString("Ecom:Order.Customer.Address"), Translate("Street & Number"), columnSize);
			if (enableAdditionalAddress)
			{
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{address2}", "EcomOrderCustomerAddress2", GetString("Ecom:Order.Customer.Address2"), Translate("Additional address"), columnSize, false);
			}
			else
			{
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{address2}", "");
			}
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{zip}", "EcomOrderCustomerZip", GetString("Ecom:Order.Customer.Zip"), Translate("Zip code"), columnSize);
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{city}", "EcomOrderCustomerCity", GetString("Ecom:Order.Customer.City"), Translate("Town / City"), columnSize);
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{regionCode}", RenderCustomerAddressRegionField(columnSize).ToString());
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{region}", RenderCustomerAddressRegionField(columnSize).ToString());
			addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{country}", (string)RenderCustomerAddressCountryField(columnSize).ToString());
						
			@* Remove any bad placeholders the user may have submitted *@
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase); 
			addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
		}
		@(string.Join(string.Empty, addressLine.ToArray()))
	}
}

@helper RenderCustomerAddressRegionField(string wrapperClass)
{
	if (GetLoop("CustomerRegions").Any())
	{
		string currentCountry = GetString("Ecom:Order.Customer.Country");
		string regionLabel = currentCountry == "CA" ? Translate("Province") : currentCountry == "US" ? Translate("State") : Translate("Region");
		
		<div class="@wrapperClass">
			<div class="form-floating">
				<select class="form-select" name="EcomOrderCustomerRegion" id="EcomOrderCustomerRegion" onchange="submitForm()">
					@foreach (var region in GetLoop("CustomerRegions"))
					{
						if (region.GetString("Ecom:CustomerRegion.IsCustomerRegion") == "true")
						{
							<option value="@region.GetString("Ecom:CustomerRegion.RegionCode")" selected>@region.GetString("Ecom:CustomerRegion.Name")</option>
						}
						else
						{
							<option value="@region.GetString("Ecom:CustomerRegion.RegionCode")">@region.GetString("Ecom:CustomerRegion.Name")</option>
						}
					}
				</select>
				<label for="EcomOrderCustomerRegion">@regionLabel</label>
			</div>
		</div>
	}
}

@helper RenderCustomerAddressCountryField(string wrapperClass)
{
	<div class="@wrapperClass">
		<div class="form-floating">
			<select class="form-select" name="EcomOrderCustomerCountry" id="EcomOrderCustomerCountry" onchange="submitForm()">
				@foreach (var country in GetLoop("Countries"))
				{
					if (country.GetString("Ecom:Country.IsCustomerCountryOrDefault") == "true")
					{
						<option value="@country.GetString("Ecom:Country.Code2")" selected>@country.GetString("Ecom:Country.Name")</option>
					}
					else
					{
						<option value="@country.GetString("Ecom:Country.Code2")">@country.GetString("Ecom:Country.Name")</option>
					}
				}
			</select>
			<label for="EcomOrderCustomerCountry">@Translate("Country")</label>
		</div>
	</div>
}

@functions
{
	public string GetBootstrapColumnSizeForCustomerAddress(List<string> addressLineArray, bool enableAdditionalAddress)
	{
		string combinedLine = string.Join(",", addressLineArray);
		string prefix = "g-col-12 g-col-lg-";

		int addressLinePlaceholderCount = combinedLine.Count(s => s.Equals('{'));
		if (!enableAdditionalAddress && combinedLine.IndexOf("address2", StringComparison.OrdinalIgnoreCase) >= 0) addressLinePlaceholderCount -= 1;
		if (!GetLoop("CustomerRegions").Any() && combinedLine.IndexOf("region", StringComparison.OrdinalIgnoreCase) >= 0) addressLinePlaceholderCount -= 1;
		if (addressLinePlaceholderCount <= 0) return prefix + "12";
		
		double columnSize = (double)12 / addressLinePlaceholderCount;
		return prefix + Math.Ceiling(columnSize);
	}
	
	public string ReplaceCustomerAddressPlaceholder(string addressLine, string pattern, string replacement)
	{
		return Regex.Replace(addressLine, pattern, replacement, RegexOptions.IgnoreCase);
	}
	
	public string ReplaceCustomerAddressPlaceholder(string addressLine, string placeholder, string fieldName, string fieldValue, string fieldLabel, string wrapperClass, bool required = true, string fieldType = "text")
	{
		if (addressLine.IndexOf(placeholder, StringComparison.OrdinalIgnoreCase) < 0) return addressLine;
		
		string fieldHtml = RenderCustomerAddressField(fieldName, fieldValue, fieldLabel, wrapperClass, required, fieldType).ToString();
		return Regex.Replace(addressLine, placeholder, fieldHtml, RegexOptions.IgnoreCase);
	}
	
	public string RenderCustomerAddressField(string fieldName, string fieldValue, string fieldLabel, string wrapperClass, bool isRequired = true, string fieldType = "text")
	{
		string markup = "";
    	fieldType = string.IsNullOrEmpty(fieldType) ? "text" : fieldType;
		string required = isRequired ? "required=\"required\"" : "";

		markup += $"<div class=\"{wrapperClass}\">";
		markup += $"<div class=\"form-floating\">";
		markup += $"<input type=\"{fieldType}\" class=\"form-control\" name=\"{fieldName}\" id=\"{fieldName}\" value=\"{fieldValue}\" placeholder=\"{fieldLabel}\" {required}>";
		markup += $"<label for=\"{fieldName}\">{fieldLabel}</label>";
		markup += $"</div>";
		markup += $"</div>";

		return markup;
	}
}
