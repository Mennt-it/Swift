@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Content.Items

@{
	string sectionClass = "py-2";
	string containerClass = "container-xl";

	string spaceBetweenRows = Model.Item.GetRawValueString("SpaceBetweenRows", "").ToLower();
	if (spaceBetweenRows != "spacing")
	{
		sectionClass = "";
	}
	if (spaceBetweenRows == "spacing-large")
	{
		sectionClass = "py-4 py-lg-6";
	}
	if (spaceBetweenRows == "spacing-top")
	{
		sectionClass = "pt-4 pt-lg-6";
	}
	if (spaceBetweenRows == "spacing-bottom")
	{
		sectionClass = "pb-4 pb-6";
	}

	string width = Model.Item.GetRawValueString("Width", "").ToLower();
	if (width == "stretch")
	{
		containerClass = "container-fluid";
	}
	if (width == "none")
	{
		containerClass = "";
	}
	if (width == "compressed")
	{
		containerClass = " container-compressed";
	}

	string rowClass = "gap-3";
	string spaceBetweenColumns = Model.Item.GetRawValueString("SpaceBetweenColumns", "").ToLower();
	if (spaceBetweenColumns == "stick")
	{
		rowClass = "gap-0";
	}
	if (spaceBetweenColumns == "spacing-medium")
	{
		rowClass = "gap-lg-4";
	}
	if (spaceBetweenColumns == "spacing-large")
	{
		rowClass = "gap-1 gap-md-4 gap-lg-5";
	}

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string animationOnScrollCol1 = Model.Item.GetRawValueString("AnimationOnScrollCol1", "no-animation");
	animationOnScrollCol1 = animationOnScrollCol1 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol1 + "'" : "";
	string animationOnScrollCol2 = Model.Item.GetRawValueString("AnimationOnScrollCol2", "no-animation");
	animationOnScrollCol2 = animationOnScrollCol2 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol2 + "'" : "";
	string animationOnScrollCol3 = Model.Item.GetRawValueString("AnimationOnScrollCol3", "no-animation");
	animationOnScrollCol3 = animationOnScrollCol3 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol3 + "'" : "";
	string animationOnScrollCol4 = Model.Item.GetRawValueString("AnimationOnScrollCol4", "no-animation");
	animationOnScrollCol4 = animationOnScrollCol4 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol4 + "'" : "";
	string animationOnScrollCol5 = Model.Item.GetRawValueString("AnimationOnScrollCol5", "no-animation");
	animationOnScrollCol5 = animationOnScrollCol4 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol5 + "'" : "";
	string animationOnScrollCol6 = Model.Item.GetRawValueString("AnimationOnScrollCol6", "no-animation");
	animationOnScrollCol6 = animationOnScrollCol6 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol6 + "'" : "";

	string hideOverflow = " overflow-hidden";
	hideOverflow =
				animationOnScrollCol1 != "" ||
				animationOnScrollCol2 != "" ||
				animationOnScrollCol3 != "" ||
				animationOnScrollCol4 != "" ||
				animationOnScrollCol5 != "" ||
				animationOnScrollCol6 != ""
				? hideOverflow : "";
}

<div class="@(sectionClass)@(theme)">
	<div class="@containerClass@(hideOverflow)">
		<div class="grid @rowClass">
			<div class="g-col-12 g-col-lg-2" data-col-size="2" @animationOnScrollCol1>
				@Model.Column(1).Output()
			</div>
			<div class="g-col-12 g-col-lg-2" data-col-size="3" @animationOnScrollCol2>
				@Model.Column(2).Output()
			</div>
			<div class="g-col-12 g-col-lg-2" data-col-size="3" @animationOnScrollCol3>
				@Model.Column(3).Output()
			</div>
			<div class="g-col-12 g-col-lg-2" data-col-size="3" @animationOnScrollCol4>
				@Model.Column(4).Output()
			</div>
			<div class="g-col-12 g-col-lg-2" data-col-size="3" @animationOnScrollCol5>
				@Model.Column(5).Output()
			</div>
			<div class="g-col-12 g-col-lg-2" data-col-size="3" @animationOnScrollCol6>
				@Model.Column(6).Output()
			</div>
		</div>
	</div>
</div>
