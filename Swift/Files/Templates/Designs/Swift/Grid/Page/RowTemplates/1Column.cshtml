@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>

@{
	string sectionClass = "py-2";
	string containerClass = "container-xl";

	string spaceBetweenRows = Model.Item.GetRawValueString("SpaceBetweenRows", "spacing");
	if (spaceBetweenRows != "spacing")
	{
		sectionClass = "";
	}
	if (spaceBetweenRows == "spacing-large")
	{
		sectionClass = "py-4 py-lg-6";
	}
	if (spaceBetweenRows == "spacing-top")
	{
		sectionClass = "pt-4 pt-lg-6";
	}
	if (spaceBetweenRows == "spacing-bottom")
	{
		sectionClass = "pb-4 pb-6";
	}

	string width = Model.Item.GetRawValueString("Width");
	if (width == "stretch")
	{
		containerClass = "container-fluid";
	}
	if (width == "none")
	{
		containerClass = "";
	}
	if (width == "compressed")
	{
		containerClass = " container-compressed";
	}

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string rowDesign = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("RowDesign")) ? " row-design " + Model.Item.GetRawValueString("RowDesign").Replace(" ", "").Trim().ToLower() : "";

	string animationOnScrollCol1 = Model.Item.GetRawValueString("AnimationOnScroll", "no-animation");
	animationOnScrollCol1 = animationOnScrollCol1 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol1 + "'" : "";

	string hideOverflow = " overflow-hidden";
	hideOverflow = animationOnScrollCol1 != "" ? hideOverflow : "";

	string backgroundStyle = string.Empty;

	Dynamicweb.Frontend.FileViewModel backgroundImage = Model.Item.GetFile("BackgroundImage");
	string backgroundImagePath = backgroundImage?.Path ?? string.Empty;
	string imagePath = $"/Admin/Public/GetImage.ashx?image={backgroundImagePath}&width=960&format=webp";
	backgroundImagePath = Dynamicweb.Context.Current.Server.UrlEncode(backgroundImagePath);
	string backgroundRepeat = Model.Item.GetRawValueString("BackgroundImageRepeat", "no-repeat");
	string backgroundImageSize = Model.Item.GetRawValueString("BackgroundImageSize", "cover");
	int xPos = backgroundImage?.FocalPositionFromLeft ?? 50;
	int yPos = backgroundImage?.FocalPositionFromTop ?? 50;
	string cssPosition = $"{xPos}% {yPos}%";
	string linearGradient = Model.Item.GetRawValueString("LinearGradient", string.Empty);
	string liearGradientString = "linear-gradient(" + linearGradient + "deg,rgb(var(--swift-background-color-rgb)),rgba(var(--swift-foreground-color-rgb),0.5))";
	string backgroundImageString = "url(" + imagePath + ");";
	string backgroundImagePositionString = "background-position:" + cssPosition + ";";
	string backgroundRepeatString = "background-repeat:" + backgroundRepeat + ";";
	string backgroundImageSizeString = "background-size:" + backgroundImageSize + ";";
	string styleString = string.Empty;

	if (!string.IsNullOrEmpty(linearGradient) && string.IsNullOrEmpty(backgroundImagePath))
	{
		styleString += "style=\"background-image:" + liearGradientString + ";\"";
	}
	else if (!string.IsNullOrEmpty(linearGradient) && !string.IsNullOrEmpty(backgroundImagePath))
	{
		styleString += "style=\"background-image:" + liearGradientString + "," + backgroundImageString + backgroundImagePositionString + backgroundRepeatString + backgroundImageSizeString + "\"";
	}
	else if (string.IsNullOrEmpty(linearGradient) && !string.IsNullOrEmpty(backgroundImagePath))
	{
		styleString += "style=\"background-image:" + backgroundImageString + backgroundImagePositionString + backgroundRepeatString + backgroundImageSizeString + ";\"";
	}
}


<div class="@(sectionClass)@(theme)@(rowDesign)" @styleString>
	<div class="@containerClass@(hideOverflow)">
		<div class="grid">
			<div class="g-col-12" data-col-size="12" @animationOnScrollCol1>
				@Model.Column(1).Output()
			</div>
		</div>
	</div>
</div>
