@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Content.Items

@{
	bool isVisualEdit = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	string sectionClass = "py-2";
	string containerClass = "container-xl";

	string spaceBetweenRows = Model.Item.GetRawValueString("SpaceBetweenRows", "").ToLower();
	if (spaceBetweenRows != "spacing")
	{
		sectionClass = "";
	}
	if (spaceBetweenRows == "spacing-large")
	{
		sectionClass = "py-4 py-lg-6";
	}
	if (spaceBetweenRows == "spacing-top")
	{
		sectionClass = "pt-4 pt-lg-6";
	}
	if (spaceBetweenRows == "spacing-bottom")
	{
		sectionClass = "pb-4 pb-6";
	}

	string width = Model.Item.GetRawValueString("Width", "").ToLower();
	if (width == "stretch")
	{
		containerClass = "container-fluid";
	}
	if (width == "none")
	{
		containerClass = "";
	}
	if (width == "compressed")
	{
		containerClass = " container-compressed";
	}

	string rowClass = "gap-3";
	string spaceBetweenColumns = Model.Item.GetRawValueString("SpaceBetweenColumns", "").ToLower();
	if (spaceBetweenColumns == "stick")
	{
		rowClass = "gap-0";
	}
	if (spaceBetweenColumns == "spacing-large")
	{
		rowClass = "gap-1 gap-md-4 gap-lg-5";
	}

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string column1 = Model.Column(1).Output();
	string column2 = Model.Column(2).Output();
	string column3 = Model.Column(3).Output();
	string column4 = Model.Column(4).Output();
	string column5 = Model.Column(5).Output();
	string column6 = Model.Column(6).Output();
	string column7 = Model.Column(7).Output();
	string column8 = Model.Column(8).Output();
	string column9 = Model.Column(9).Output();
	string column10 = Model.Column(10).Output();
	string column11 = Model.Column(11).Output();
}

<div class="@(sectionClass)@(theme)">
	<div class="@containerClass">
		<div class="grid @rowClass">
			<div class="g-col-12 g-col-lg-4" data-col-size="4">
				<div class="d-flex flex-column gap-3">
					@if (!string.IsNullOrEmpty(column1) || isVisualEdit) { 
						<div>@column1</div>
					}
					@if (!string.IsNullOrEmpty(column2) || isVisualEdit) { 
						<div>@column2</div>
					}
					@if (!string.IsNullOrEmpty(column3) || isVisualEdit) { 
						<div>@column3</div>
					}
					@if (!string.IsNullOrEmpty(column4) || isVisualEdit) { 
						<div>@column4</div>
					}
					@if (!string.IsNullOrEmpty(column5) || isVisualEdit) { 
						<div>@column5</div>
					}
					@if (!string.IsNullOrEmpty(column6) || isVisualEdit) { 
						<div>@column6</div>
					}
					@if (!string.IsNullOrEmpty(column7) || isVisualEdit) { 
						<div>@column7</div>
					}
					@if (!string.IsNullOrEmpty(column8) || isVisualEdit) { 
						<div>@column8</div>
					}
					@if (!string.IsNullOrEmpty(column9) || isVisualEdit) { 
						<div>@column9</div>
					}
					@if (!string.IsNullOrEmpty(column10) || isVisualEdit) { 
						<div>@column10</div>
					}
				</div>
			</div>
		</div>
		<div class="g-col-12 g-col-lg-8" data-col-size="8">
			@column11
		</div>
	</div>
</div>
