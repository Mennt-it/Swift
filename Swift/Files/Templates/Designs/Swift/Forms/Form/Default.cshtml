@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>


@{
    @GetString("Form.FormStart") 
    <div class="item-inner">
        @GetString("Form.SystemFields")

        @foreach (LoopItem field in GetLoop("Fields"))
        {
            string fieldType = field.GetString("Field.Type");
            string inputType = fieldType.ToLower().Replace("textinput", "text");
            bool required = field.GetBoolean("Field.Required");
            string systemName = field.GetString("Field.SystemName");
            string value = field.GetString("Field.ValueFromAutoOrDefault");
            string placeholder = Translate(field.GetString("Field.Placeholder"));
            string label = Translate(field.GetString("Field.Name"));
            string description = Translate(field.GetString("Field.Description"));
            string control = field.GetString("Field.Control");
            string name = field.GetString("Field.Name");
	        string cssClass = field.GetString("Field.CssClass");
	        int textAreaHeight = field.GetInteger("Field.TextareaHeight");

            <div class="mb-3">
                @switch (fieldType)
                {
                    case "TextInput":
                    case "Email":
                    case "Password":
                    case "Tel":
                    case "Number":
                    <div class="form-floating @cssClass">
                        <input id="@systemName" class="form-control" type="@inputType" name="@systemName" placeholder="@placeholder" value="@value" required="@required" aria-required="@required"/>
                        <label for="@systemName" class="form-label">@label@(required ? $" ({Translate("required")})" : "")</label>
                        </div>
                        break;

                    case "Week":
                    case "Time":
                    case "Color":
                        // BUG: comes out as "TextInput"
                        break;

                    case "Month":
                    case "Search":
                    case "Url":
                    case "Range":
                        // Missing Component
                        break;

                    case "Textarea":
                    <div class="form-floating @cssClass">
                        <textarea id="@systemName" class="form-control" name="@systemName" placeholder="@placeholder" required="@required" aria-required="@required" rows="@textAreaHeight">@value</textarea>
                        <label for="@systemName" class="form-label">@label@(required ? $" ({Translate("required")})" : "")</label>
                        </div>
                        break;

                    case "Hidden":
                        <input type="@inputType" id="@systemName" name="@systemName" value="@value" />
						break;

					case "File":
							<label for="@systemName" class="form-label">@name@(required ? $" ({Translate("required")})" : "")</label>
							<input class="form-control" type="@inputType" id="@systemName" name="@systemName" placeholder="@placeholder" required="@required" aria-required="@required">
                        break;

                    case "Date":
                        //Missing component
                        break;

                    case "Datetime":
                    case "Datetime-Local":
                        //Missing component
                        break;

                    case "CheckBox":
                        string isChecked = value.ToLower() == "true" ? "checked" : ""; 
                        <div class="form-check @cssClass">
                            <input class="form-check-input" type="@inputType" id="@systemName" name="@systemName" required="@required" aria-required="@required" @isChecked>
                            <label class="form-check-label" for="@systemName">@label@(required ? $" ({Translate("required")})" : "")</label>
                        </div>
                        break;

                    case "Radio":
                    case "CheckBoxList":
                        string type = fieldType.ToLower() == "radio" ? "radio" : "checkbox";
                        <label for="@systemName" class="form-label d-block">@label@(required ? $" ({Translate("required")})" : "")</label>
                        foreach (LoopItem option in field.GetLoop("Options"))
                        {
                            string optionChecked = option.GetBoolean("Option.DefaultSelected") ? "checked" : "";
                            string id = systemName + option.GetString("Option.ID");
                            string optionValue = option.GetString("Option.Value");
                            string optionText = Translate(option.GetString("Option.Text"));

                            <div class="form-check @cssClass">
                                <input class="form-check-input" type="@type" id="@id" name="@systemName" value="@optionValue" required="@required" aria-required="@required" @optionChecked>
                                <label class="form-check-label" for="@id">@optionText</label>
                            </div>
                        }
                        break;

                    case "Select":
                        <div class="form-floating @cssClass">
                            <select class="form-select" name="@systemName" required="@required" aria-required="@required">
                                @foreach (var option in field.GetLoop("Options"))
                                {
                                    string optionSelected = option.GetBoolean("Option.DefaultSelected") == true ? "selected" : "";
                                    string id = systemName + option.GetString("Option.ID");
                                    string optionValue = option.GetString("Option.Value");
                                    string optionText = Translate(option.GetString("Option.Text"));

                                    <option @optionSelected value="@optionValue" id="@id" >@optionText</option>
                                }
                            </select>
                            <label for="@systemName" class="form-label">@label@(required ? $" ({Translate("required")})" : "")</label>
                        </div>
                        break;

                    case "Submit":
                        <button class="btn btn-primary @cssClass" type="submit" onclick="Buttons.LockButton(event)" id="@systemName">@label</button>
                        break;

                    case "Reset":
                        <button class="btn btn-secondary @cssClass" type="reset" onclick="Buttons.LockButton(event)" id="@systemName">@label</button>
                        break;
                    case "Text":
                        <div class="form-text">@control</div>
                        break;

                    case "Image":
                        string imagePath = field.GetString("Field.Image");
                        if (!string.IsNullOrEmpty(imagePath))
                        {
                            <img class="img-fluid @cssClass" src="@imagePath" />
                        }
                        break;

                    case "PageShift":
                         <label for="@systemName">@label</label><span class="formPageShift"></span>
                        break;
                }
                @if (!string.IsNullOrEmpty(description)) {
                    <div class="form-text">@description</div>
                }
            </div>
        }
    </div>

    @GetString("Form.FormEnd")
}


