@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb

@{ 
	string searchTerm = string.Empty;
	if (!string.IsNullOrEmpty(Dynamicweb.Context.Current.Request["userquery"]))
	{
		searchTerm = Dynamicweb.Context.Current.Request["userquery"];

	}
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	var queryItems = GetLoop("QueryResultItem");

}

<header class="p-3 border-bottom">
	<div class="grid grid-1 grid-lg-2 align-items-lg-center">
		@if (!string.IsNullOrEmpty(searchTerm))
		{
			<h1 class="h5 mb-0">@Translate("You have searched for") "@searchTerm"</h1>
		}
		else
        {
			<h1 class="h5 mb-0">@Translate("Select the customer you want to sign in as")</h1>
        }
		<div class="position-relative type-ahead-dropdown">
			<form method="get" class="suggest-form">
				<label for="userQuery_@Pageview.CurrentParagraph.ID" class="visually-hidden">@Translate("Search for customer name or number")</label>
				<span class="position-absolute top-0 icon-2 px-3 d-flex align-items-center h-100 search-icon">
					@ReadFile(iconPath + "search.svg")
				</span>
				<input id="userQuery_@Pageview.CurrentParagraph.ID"
					   type="search"
					   class="form-control rounded-pill type-ahead-field py-2 ps-5 pe-3"
					   placeholder="@Translate("Search for customer name or number")"
					   aria-label="@Translate("Search for customer name or number")"
					   aria-describedby="userQuery_@Pageview.CurrentParagraph.ID"
					   name="userquery"
					   value="@searchTerm"
					   data-original="@searchTerm">

				<button type="button"
						onclick="var f = document.getElementById('userQuery_@Pageview.CurrentParagraph.ID'); f.value = ''; f.focus();"
						class="btn h-100 icon-2 reset-search"
						aria-label="@Translate("Clear search")"
						style="opacity: 0; position: absolute; top: 0; right: 0; visibility: hidden;">
					@ReadFile(iconPath + "x.svg")
				</button>
			</form>
		</div>
	</div>
</header>

@if (queryItems.Count() != 0) {

	@* Bootstrap only support horizontally scrolled tables. Thus, we need to have separate designs for large and small screens.  *@

	<table class="table d-none d-lg-table table-striped table-hover align-middle mb-0">
		<thead>
			<tr>
				<th>
					<span>
						@Translate("ID")
					</span>
				</th>
				<th>
					<span>
						@Translate("Customer")
					</span>
				</th>
				<th>
					<span>
						@Translate("Address")
					</span>
				</th>
				<th aria-hidden="true">
					<span>
						&nbsp;
					</span>
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var result in queryItems)
			{
				string UserLink = $"/Default.aspx?ID={Pageview.Page.ID}&amp;DWExtranetSecondaryUserSelector={result.GetInteger("UserID")}";

				<tr class="position-relative">
					<td>
						@if (!string.IsNullOrWhiteSpace(result.GetString("UserID")))
						{
							<span>
								@result.GetInteger("UserID")
							</span>
						}
					</td>
					<td>
						@if (!string.IsNullOrWhiteSpace(result.GetString("UserName")))
						{
							<span>
								@result.GetString("UserName")
							</span>
						}
					</td>
					<td>
						@if (!string.IsNullOrWhiteSpace(result.GetString("Address")))
						{
							<span>
								@result.GetString("Address")
							</span>
						}
					</td>
					<td class="text-end">
						<a href="@UserLink" class="d-block text-decoration-none">
							<span class="btn btn-sm btn-secondary stretched-link">
								@Translate("Sign in")
							</span>
						</a>
					</td>
				</tr>
			}	
		</tbody>
	</table>

	@* Bootstrap only support horizontally scrolled tables. Thus, we need to have separate designs for large and small screens.  *@

	<table class="table d-table d-lg-none table-borderless table-clean align-middle mb-0">
		@foreach (var result in queryItems)
		{
			<tbody class="border-bottom">
				<tr>
					<th class="fs-8">
						<span>
							@Translate("ID")
						</span>
					</th>
					<td class="text-end">
						@if (!string.IsNullOrWhiteSpace(result.GetString("UserID")))
						{
							<span>
								@result.GetInteger("UserID")
							</span>
						}
					</td>
				</tr>
				<tr>
					<th class="fs-8">
						<span>
							@Translate("Customer")
						</span>
					</th>
					<td class="text-end">
						@if (!string.IsNullOrWhiteSpace(result.GetString("UserName")))
						{
							<span>
								@result.GetString("UserName")
							</span>
						}
					</td>
				</tr>
				<tr>
					<th class="fs-8">
						<span>
							@Translate("Address")
						</span>
					</th>
					<td class="text-end">
						@if (!string.IsNullOrWhiteSpace(result.GetString("Address")))
						{
							<span>
								@result.GetString("Address")
							</span>
						}
					</td>
				</tr>
				<tr>
					<td colspan="2">
						<a class="d-block text-decoration-none">
							<div class="d-grid">
								<span class="btn btn-sm btn-secondary">
									@Translate("Sign in")
								</span>
							</div>
						</a>
					</td>
				</tr>
			</tbody>
		}
	</table>
	if(GetInteger("DwPaging.PageCount") > 1) {
		<div class="p-3 mt-3">
			<ul class="pagination m-0">
				@for (int i = 1; i <= GetInteger("DwPaging.PageCount"); i++)
				{
					var css = (i == GetInteger("DwPaging.CurrentPage")) ? "page-item active" : "page-item";

					<li class="@css">
						@string.Format("<a class=\"page-link\" href=\"javascript:goToPage({0});\">{0}</a>", i)
					</li>
				}
			</ul>
		</div>
	}
}
else 
{
	if (!string.IsNullOrEmpty(searchTerm)){
		<div class="alert alert-info text-center" role="alert">
			@Translate("Your search ") <strong> "@searchTerm" </strong>@Translate("did not return any customers that match your search")

		</div>
	}
	else { 
	<div class="alert alert-info text-center" role="alert">
		@Translate("You have no customer you can sign in as")
	</div>
	}

}

<script>
	function goToPage(page){
		let url = new URL(document.location.href);
		url.searchParams.set('PageNum', page);
		document.location.href = url;
	}
</script>
