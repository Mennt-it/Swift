@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb
@using Dynamicweb.Core.Encoders

@functions {
	public string[] supportedImageFormats { get; set; }
	public string[] supportedDocumentFormats { get; set; }
	public string[] allSupportedFormats { get; set; }
}

@{ 
	var assetsList = GetLoop("QueryResultItem");
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	@* Supported formats *@
	supportedImageFormats = new string[] { ".jpg", ".jpeg", ".webp", ".png", ".gif", ".bmp", ".tiff" };
	supportedDocumentFormats = new string[] { ".pdf", ".docx", ".xlsx", ".ppt", "pptx" };
	allSupportedFormats = supportedImageFormats.Concat(supportedDocumentFormats).ToArray();
}


<div class="p-4">
	@foreach (var asset in assetsList)
	{
		foreach (string format in allSupportedFormats)
		{
			string fileName = asset.GetString("FileName");
			bool imageFound = false;

			if (fileName.Contains(format))
			{
				<div class="d-flex flex-row gap-4 mb-3">
					<div style="width: 120px">
						<div class="ratio" style="--bs-aspect-ratio: 100%">
							@foreach (string imageFormat in supportedImageFormats)
							{
								if (fileName.Contains(imageFormat))
								{
									string imagePath = !string.IsNullOrEmpty(asset.GetString("DirectoryRelativePath")) ? "/Admin/Public/GetImage.ashx?image=/Files" + asset.GetString("DirectoryRelativePath") + "/" + fileName + "&width=120&format=webp" : "";
									<img src="@imagePath" loading="lazy" style="object-fit: cover" />

									imageFound = true;
								}
							}

							@if (imageFound == false)
							{
								<div class="position-absolute bg-black bg-opacity-10 w-100 h-100"></div>
								<div class="d-flex align-items-center justify-content-center">
									<span class="icon-4">@ReadFile(iconPath + "file.svg")</span>
								</div>
							}
						</div>
					</div>
					<div class="flex-fill">
						<h3 class="h6 flex-fill" style="word-break: break-all">@fileName</h3>
						<div class="fs-6 opacity-50">
							@(asset.GetString("FileSize"))kb
						</div>
					</div>
				</div>

				<dl>
					@if (imageFound) {
						System.Drawing.Image img = System.Drawing.Image.FromFile(asset.GetString("FileFullName"));

						<div class="d-flex flex-row">
							<dt class="flex-fill">@Translate("Dimensions")</dt>
							<dd>@(img.Width) x @(img.Height)px</dd>
						</div>
					}
					<div class="d-flex flex-row">
						<dt class="flex-fill">@Translate("Filetype")</dt>
						<dd>@asset.GetString("Extension")</dd>
					</div>
					<div class="d-flex flex-row">
						<dt class="flex-fill">@Translate("Updated")</dt>
						<dd>@asset.GetString("LastWriteTime")</dd>
					</div>
				</dl>
			}
		}
	}
</div>

