@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb

@{
	string contentPadding = Pageview.CurrentParagraph.Item["ContentPadding"] != null ? Pageview.CurrentParagraph.Item["ContentPadding"].ToString() : "";
	contentPadding = contentPadding == "none" ? "px-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;
	var themeRaw = Pageview.CurrentParagraph.Item["Theme"]?.ToString();
	string theme = !string.IsNullOrEmpty(themeRaw) ? " h-100 theme " + themeRaw.Replace(" ", "").Trim().ToLower() : "";
	string searchTerm = string.Empty;
	if (!string.IsNullOrEmpty(Dynamicweb.Context.Current.Request["userquery"]))
	{
		searchTerm = Dynamicweb.Context.Current.Request["userquery"];

	}
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	var queryItems = GetLoop("QueryResultItem");
}

<div class="@(contentPadding)@(theme)">
	<header class="p-3 py-sm-2 border-bottom">
		<div class="d-flex gap-4 w-100 align-items-center">
			@if (!string.IsNullOrEmpty(searchTerm))
			{
				<div class="d-flex align-items-baseline justify-content-between gap-3">
					<h1 class="h6 mb-0">@Translate("You have searched for") "@searchTerm"</h1>
				</div>
			}
			else
			{
				string heading = Translate("Manage users");
				heading = !string.IsNullOrEmpty(Pageview.User.Name) ? Translate("Manage users") + " - " + Pageview.User.Name : heading;
				heading = !string.IsNullOrEmpty(Pageview.User.Company) ? Translate("Manage users") + " - " + Pageview.User.Name + ", " + Pageview.User.Company : heading;

				<h1 class="h6 mb-0">@heading</h1>
			}
			@if (queryItems.Count() != 0)
			{
				<div class="position-relative type-ahead-dropdown flex-fill">
					<form method="get" class="suggest-form">
						<div class="d-flex align-items-center">
							<label for="userQuery_@Pageview.CurrentParagraph.ID" class="visually-hidden">@Translate("Search here")</label>
							<span class="position-absolute icon-2 reset-search px-3">
								@ReadFile(iconPath + "search.svg")
							</span>
							<input id="userQuery_@Pageview.CurrentParagraph.ID"
								   type="search"
								   class="form-control form-control-sm rounded-pill type-ahead-field py-2 ps-5 pe-5"
								   placeholder="@Translate("Search for users")"
								   aria-label="@Translate("Search for users")"
								   aria-describedby="userQuery_@Pageview.CurrentParagraph.ID"
								   name="userquery"
								   value="@searchTerm"
								   data-original="@searchTerm">

							<button type="button"
									onclick="var f = document.getElementById('userQuery_@Pageview.CurrentParagraph.ID'); f.value = ''; f.focus(); f.closest('form').submit();"
									class="btn position-absolute end-0 icon-2 reset-search"
									aria-label="@Translate("Clear search field")"
									style="opacity: 0; visibility: hidden;">
								@ReadFile(iconPath + "x.svg")
							</button>
						</div>
					</form>
				</div>
			}
			<div class="flex-fill">
				<div class="text-end">
					<button class="btn btn-link" data-bs-toggle="modal" data-bs-target="#inviteUserModal">+ @Translate("Invite user")</button>
				</div>
			</div>
		</div>
	</header>

	@if (queryItems.Count() != 0)
	{

		@* Bootstrap only support horizontally scrolled tables. Thus, we need to have separate designs for large and small screens.  *@

		<table class="table d-none d-lg-table table-striped table-hover align-middle mb-0">
			<thead>
				<tr>
					<th>
						@Translate("Name")
					</th>
					<th>
						@Translate("Email")
					</th>
					<th width="120">
						@Translate("State")
					</th>
					<th>&nbsp;</th>
				</tr>
			</thead>
			<tbody class="border-top-0">
				@foreach (var result in queryItems)
				{
					string badgeColor = result.GetBoolean("Active") ? "bg-success text-white" : "bg-warning text-dark";
					string stateLabel = result.GetBoolean("Active") ? Translate("Active") : Translate("Pending");

					<tr class="position-relative">
						<td>
							@if (!string.IsNullOrWhiteSpace(result.GetString("Name")))
							{
								@result.GetString("Name")
							}
						</td>
						<td>
							@if (!string.IsNullOrWhiteSpace(result.GetString("UserEmail")))
							{
								@result.GetString("UserEmail")
							}
						</td>
						<td>
							<span class="badge @badgeColor w-100">@stateLabel</span>
						</td>
						<td class="text-end">
							@if (!result.GetBoolean("Active")) { 
								<button class="btn btn-link d-inline-block" onclick="setInviteForm('@result.GetString("Name")', '@result.GetString("UserEmail")')" data-bs-toggle="modal" data-bs-target="#inviteUserModal">@Translate("Resend invite")</button>
							}

							<a href="#" class="d-inline-block">
								<div class="icon-2">
									@ReadFile(iconPath + "trash-2.svg")
								</div>
							</a>
						</td>
					</tr>
				}
			</tbody>
		</table>

		@* Bootstrap only support horizontally scrolled tables. Thus, we need to have separate designs for large and small screens.  *@

		<table class="table d-table d-lg-none table-borderless table-clean align-top mb-0">
			@foreach (var result in queryItems)
			{
				<tbody class="border-bottom">
					<tr>
						<th class="fs-8">
							@Translate("ID")
						</th>
						<td class="text-end">
							@if (!string.IsNullOrWhiteSpace(result.GetString("UserID")))
							{
								@result.GetInteger("UserID")
							}
						</td>
					</tr>
					<tr>
						<th class="fs-8">
							@Translate("Customer")
						</th>
						<td class="text-end">
							@if (!string.IsNullOrWhiteSpace(result.GetString("Name")))
							{
								@result.GetString("Name")
							}
						</td>
					</tr>
					<tr>
						<th class="fs-8">
							@Translate("Email")
						</th>
						<td class="text-end text-break">
							@if (!string.IsNullOrWhiteSpace(result.GetString("UserEmail")))
							{
								@result.GetString("UserEmail")
							}
						</td>
					</tr>
					<tr>
						<th class="fs-8">
							@Translate("Address")
						</th>
						<td class="text-end">
							@if (!string.IsNullOrWhiteSpace(result.GetString("Address")))
							{
								<text>
									@result.GetString("Address"),
								</text>
							}
							@if (!string.IsNullOrWhiteSpace(result.GetString("Zip")))
							{
								@result.GetString("Zip")
							}
							@if (!string.IsNullOrWhiteSpace(result.GetString("City")))
							{
								@result.GetString("City")
							}
						</td>
					</tr>
				</tbody>
			}
		</table>

		var pageLoopItem = GetLoop("DwPaging.LoopPageGroup");
		int pageCount = GetInteger("DwPaging.PageCount"),
			currentPage = GetInteger("DwPaging.CurrentPage"),
			prevPage = GetInteger("DwPaging.PreviousPageNumber"),
			nextPage = GetInteger("DwPaging.NextPageNumber"),
			itemsToLoad = 10,
			pageSize = GetInteger("DwPaging.PageSize"),
			totalItems = GetInteger("DwPaging.TotalItems"),
			loadMore = pageSize + itemsToLoad,
			firstPage = 1,
			lastPage = pageCount;

		if (GetBoolean("DwPaging.Pageable") == true)
		{
			string prevDisabled = currentPage == 1 ? "disabled" : "";
			string nextDisabled = currentPage == pageCount ? "disabled" : "";

			<div class="d-none d-lg-block">
				<form id="pagination_@Pageview.CurrentParagraph.ID">
					<div class="p-3 mt-3">
						<ul class="pagination m-0">
							<li class="page-item @(prevDisabled)">
								<button type="submit" class="page-link" onclick="paginationSubmit(event, '@firstPage')">
									<span class="icon-2">
										@ReadFile(iconPath + "chevrons-left.svg")
									</span>
								</button>
							</li>
							<li class="page-item @(prevDisabled)">
								<a class="page-link" href="@prevPage" onclick="paginationSubmit(event, '@prevPage')">
									<span class="icon-2">
										@ReadFile(iconPath + "chevron-left.svg")
									</span>
								</a>
							</li>
							@foreach (var pages in pageLoopItem)
							{
								var css = pages.GetBoolean("PageGroup.ActivePage") ? "page-item active" : "page-item";

								<li class="@css">
									<a href="@pages.GetString("PageGroup.PageLink")" class="page-link" onclick="paginationSubmit(event, '@pages.GetInteger("PageGroup.PageNumber")')">@pages.GetInteger("PageGroup.PageNumber")</a>
								</li>
							}
							<li class="page-item @(nextDisabled)">
								<a class="page-link" href="@nextPage" onclick="paginationSubmit(event, '@nextPage')">
									<span class="icon-2">
										@ReadFile(iconPath + "chevron-right.svg")
									</span>
								</a>
							</li>
							<li class="page-item @(nextDisabled)">
								<button type="submit" class="page-link" onclick="paginationSubmit(event, '@lastPage')">
									<span class="icon-2">
										@ReadFile(iconPath + "chevrons-right.svg")
									</span>
								</button>
							</li>
						</ul>
					</div>
					<input type="hidden" name="pagenum" id="pageNumber_@Pageview.CurrentParagraph.ID" />
				</form>
				<script>
					paginationSubmit = function (event, pageNumber) {
						event.preventDefault();
						document.querySelector('#pageNumber_@Pageview.CurrentParagraph.ID').value = pageNumber;
						swift.PageUpdater.Update(document.querySelector("#pagination_@Pageview.CurrentParagraph.ID"));
					}
				</script>
			</div>
			<div class="d-block d-lg-none position-sticky bottom-0">
				<form id="loadMore_@Pageview.CurrentParagraph.ID">
					<input type="hidden" name="pagesize" id="pageSize_@Pageview.CurrentParagraph.ID" />
					<div class="gap-2 grid grid-1 mx-3 pb-2 theme">
						<button class="btn btn-primary w-100" type="submit" onclick="loadMore(event, '@loadMore')">
							@Translate("Show more")
						</button>
						<div class="text-center fs-8">Showing @pageSize/@totalItems</div>
					</div>
				</form>
				<script>
					loadMore = function (event, pageSize) {
						event.preventDefault();
						document.querySelector('#pageSize_@Pageview.CurrentParagraph.ID').value = pageSize;
						swift.PageUpdater.Update(document.querySelector("#loadMore_@Pageview.CurrentParagraph.ID"));
					}
				</script>
			</div>
		}
	}
	else
	{
		if (!string.IsNullOrEmpty(searchTerm))
		{
			<div class="alert alert-info text-center mt-3" role="alert">
				@Translate("Your search ") <strong> "@searchTerm" </strong>@Translate("did not return any users that match your search")
			</div>
		}
		else
		{
			<div class="alert alert-info text-center mt-3" role="alert">
				@Translate("No users available")
			</div>
		}
	}

	<script>
		function goToPage(page) {
			let url = new URL(document.location.href);
			url.searchParams.set('PageNum', page);
			document.location.href = url;
		}

		function setInviteForm(name, email) {
			document.querySelector("#UserManagement_Form_Name").value = name;
			document.querySelector("#UserManagement_Form_Email").value = email;
		}
	</script>
</div>




