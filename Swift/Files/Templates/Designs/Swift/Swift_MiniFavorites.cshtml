@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites

@{ 
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	IEnumerable<FavoriteList> favoriteLists = Pageview.User.GetFavoriteLists();
	string productId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ProductId")) ? Dynamicweb.Context.Current.Request.Form.Get("ProductId") : "";
	string variantId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("VariantId")) ? Dynamicweb.Context.Current.Request.Form.Get("VariantId") : "";
	string productName = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ProductName")) ? Dynamicweb.Context.Current.Request.Form.Get("ProductName") : "";
	string productImage = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ProductImage")) ? Dynamicweb.Context.Current.Request.Form.Get("ProductImage") : "";

	string favoriteListsLink = Model.Item.GetLink("FavoriteListsPage") != null ? Model.Item.GetLink("FavoriteListsPage").PageId.ToString() : "";
	favoriteListsLink = favoriteListsLink == "" && GetPageIdByNavigationTag("FavoriteListPage") != 0 ? GetPageIdByNavigationTag("FavoriteListPage").ToString() : favoriteListsLink;

	string theme = "";
	if (Model.PropertyItem != null)
	{
		theme = !string.IsNullOrWhiteSpace(Model.PropertyItem.GetRawValueString("Theme")) ? " theme " + Model.PropertyItem.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	}
}

<div class="offcanvas-header@(theme)">
	<h5 class="offcanvas-title fs-6" id="DynamicOffcanvasLabel">@Translate("Save") @productName @Translate("for later")</h5>
	<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
</div>
<div class="offcanvas-body@(theme)">
	<form method="post" action="@Pageview.SearchFriendlyUrl" class="d-flex flex-column h-100">
		<input type="hidden" name="ReloadPage" value="false" />
		<input type="hidden" name="FavoriteCmd" value="" />
		<input type="hidden" name="FavoriteListId" value=""/>
		<input type="hidden" name="UserId" value="@Pageview.User.ID" />
		<input type="hidden" name="ProductId" value="@productId" />
		<input type="hidden" name="VariantId" value="@variantId" />
		<input type="hidden" name="ProductName" value="@productName" />
		@if (!string.IsNullOrEmpty(productImage)) {
			<input type="hidden" name="Thumbnail" value="/Admin/Public/GetImage.ashx?image=@(productImage)&width=80&format=webp" /> 
		}
		<div class="flex-fill overflow-auto">
			<ul class="list-group">
				@foreach (FavoriteList list in favoriteLists) {
					string listName = !string.IsNullOrEmpty(list.Name) ? list.Name : Translate("My favorites");
					bool isInThisFavoriteList = Pageview.User.IsProductInFavoriteList(list.ListId, productId, variantId);
					string defaultCommand = isInThisFavoriteList ? "remove" : "add";
					string filledFavoriteIcon = isInThisFavoriteList ? "" : "d-none";
					string outlineFavoriteIcon = isInThisFavoriteList ? "d-none" : "";

					<li class="list-group-item">
						<button type="button" class="btn text-start d-flex align-items-center w-100" data-bs-dismiss="offcanvas" data-list-id="@list.ListId" data-product-id="@productId" data-variant-id="@variantId" data-command="@defaultCommand" onclick="swift.Favorites.Update(event)">
							<span class="flex-fill me-2">@listName</span>
							<span class="icon-2 js-filled-favorite-icon @filledFavoriteIcon">
								@ReadFile(iconPath + "heart-filled.svg")
							</span>
							<span class="icon-2 js-outline-favorite-icon @outlineFavoriteIcon">
								@ReadFile(iconPath + "heart.svg")
							</span>
						</button>
					</li>
				}
			</ul>
		</div>

		@if (!string.IsNullOrEmpty(favoriteListsLink)) {
			<a href="/Default.aspx?ID=@favoriteListsLink" class="btn btn-primary w-100"><span class="me-2">@ReadFile(iconPath + "clipboard.svg") </span> @Translate("Create a new favorite list")</a>
        }
	</form>
</div>
