@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@foreach (LoopItem item in GetLoop("ItemPublisher:Items.List"))
{
	string title = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Title")) ? item.GetString("ItemPublisher:Item.Title") : "";
	string coverTitle = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverTitle")) ? item.GetString("ItemPublisher:Item.CoverTitle") : "";
	string coverImagePath = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverImage")) ? item.GetString("ItemPublisher:Item.CoverImage") : "";
	string coverImage = !string.IsNullOrEmpty(coverImagePath) ? $"/Admin/Public/GetImage.ashx?image={coverImagePath}&width=320&Crop=0&Quality=75&format=webp" : "";
	string summary = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Summary")) ? item.GetString("ItemPublisher:Item.Summary") : "";
	string tags = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Tags")) ? item.GetString("ItemPublisher:Item.Tags") : "";
	string ArticlePublishDate = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.ArticlePublishDate")) ? item.GetDate("ItemPublisher:Item.ArticlePublishDate").ToShortDateString() : item.GetDate("ItemPublisher:Item.ActiveFrom").ToShortDateString();
	string link = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Url")) ? item.GetString("ItemPublisher:Item.Url") : "";
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	string listStyle = Pageview.CurrentParagraph.Item["ListStyle"].ToString();
	string itemStyleStacked = Pageview.CurrentParagraph.Item["ItemStyleStacked"].ToString();
	string itemStyleSideBySide = Pageview.CurrentParagraph.Item["ItemStyleSideBySide"].ToString();
	string listStyleClass = string.Empty;
	string theme = Pageview.CurrentParagraph.Item["Theme"].ToString();
	string themeClass = theme != "" ? " theme " + theme : "";
	string themePadding = string.Empty;
	string itemStyleStackedRatioCssClass = listStyle == "stacked" && itemStyleStacked != "" ? " ratio" : " h-100";
	string itemStyleStackedRatioVariable = listStyle == "stacked" && itemStyleStacked != "" ? "style=\"--bs-aspect-ratio: " + itemStyleStacked + "\"" : "";
	string itemStyleStackedFill = listStyle == "side-by-side" ? "w-100 h-100" : "img-fluid";

	if (listStyle == "side-by-side")
	{
		listStyleClass = "d-flex";

		if (itemStyleSideBySide == "image-right")
		{
			listStyleClass += " flex-row-reverse";
		}
	}
	else {
		listStyleClass = "d-flex flex-column";
	}

	if (themeClass != "")
	{
		if (listStyle == "stacked")
		{
			themePadding = "p-3";
		}

		if (listStyle == "side-by-side")
		{
			themePadding = "p-3";
		}
	}
	else
	{
		if (listStyle == "stacked")
		{
			themePadding = "pt-3";
		}

		if (listStyle == "side-by-side")
		{
			themePadding = "px-3";
		}
	}

	<article class="@(listStyleClass)@(themeClass)">

		@if (!string.IsNullOrEmpty(coverImage)) { 
			<a class="text-decoration-none w-100" title="@title" href="@link">
				<figure class="m-0@(itemStyleStackedRatioCssClass)" @itemStyleStackedRatioVariable>
					<img class="@itemStyleStackedFill" src="@coverImage" loading="lazy" alt="@title" style="object-fit: cover;">
				</figure>
			</a>
		}
		<div class="d-flex flex-column flex-fill gap-3 @themePadding">

			@if (item.GetInteger("ItemPublisher:Item.Author") != 0)
			{
				int authorID = item.GetInteger("ItemPublisher:Item.Author");
				var author = Dynamicweb.Security.UserManagement.User.GetUserByID(authorID);
				string authorImage = !string.IsNullOrEmpty(author.Image) ? author.Image : "";
				string authorImagePath = !string.IsNullOrEmpty(author.Image) ? $"/Admin/Public/GetImage.ashx?image={author.Image}&width=48&height=48&Crop=0&Quality=100&format=webp" : "";
				string authorName = !string.IsNullOrEmpty(author.Name) ? authorName = author.Name : "";
				string authorJobTitle = !string.IsNullOrEmpty(author.JobTitle) ? authorJobTitle = author.JobTitle : "";
				
				<div class="d-flex gap-2 align-items-start">
					@if (!string.IsNullOrEmpty(authorImage))
                    {
					<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" alt="@authorName" width="32" height="32" />
					}
					else
                    {
						<div class="d-flex align-items-center justify-content-center rounded-circle" style="width: 32px; height: 32px; background-color: rgba(var(--swift-foreground-color-rgb),.25) ">
							<div class="icon-2">
									@ReadFile(iconPath + "user.svg")
							</div>
						</div>
                    }
					<div class="d-flex flex-column flex-fill fs-8 opacity-75">
						<div class="flex-fill">
							@if (!string.IsNullOrEmpty(authorName))
							{
								<span>@authorName</span>
							}
							@if (!string.IsNullOrEmpty(authorJobTitle))
							{
								<span>@authorJobTitle</span>
							}
						</div>
						@if (!string.IsNullOrEmpty(ArticlePublishDate))
						{ 
							<div class="d-flex align-items-center gap-1">
								<div class="icon-1">
									@ReadFile(iconPath + "calendar.svg")
								</div>
								<span>@ArticlePublishDate</span>
							</div>
						}
						@if (!string.IsNullOrEmpty(tags))
						{
							<div>@tags</div>
						}
					</div>
				</div>
			}
			<div class="d-flex flex-column flex-fill">
				@if (!string.IsNullOrEmpty(title))
                {
					<h3 class="h5 m-0">@title</h3>
                }
				@if (!string.IsNullOrEmpty(title))
                {
					<p class="m-0">@summary</p>
                }
			</div>
			<div class="pt-3">
				<a href="@link" class="btn btn-primary p-2">
					<div class="icon-3">
						@ReadFile(iconPath + "arrow-right.svg")
					</div>
				</a>
			</div>
		</div>
	</article>
}
