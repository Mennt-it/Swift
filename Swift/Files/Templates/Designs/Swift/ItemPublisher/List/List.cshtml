@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@foreach (LoopItem item in GetLoop("ItemPublisher:Items.List"))
{
	string title = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Title")) ? item.GetString("ItemPublisher:Item.Title") : string.Empty;
	string coverTitle = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverTitle")) ? item.GetString("ItemPublisher:Item.CoverTitle") : string.Empty;
	string coverImagePath = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverImage")) ? item.GetString("ItemPublisher:Item.CoverImage") : string.Empty;
	string coverImage = !string.IsNullOrEmpty(coverImagePath) ? $"/Admin/Public/GetImage.ashx?image={coverImagePath}&Width=960&Quality=75&format=webp" : string.Empty;
	string summary = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Summary")) ? item.GetString("ItemPublisher:Item.Summary") : string.Empty;
	string tags = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Tags")) ? item.GetString("ItemPublisher:Item.Tags") : string.Empty;
	List<string> tagList = tags.Split(new[] {','}, StringSplitOptions.RemoveEmptyEntries).Select(c=>c.Trim()).ToList();
	string alterntivPublishedDate = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.AlterntivPublishedDate")) ? item.GetDate("ItemPublisher:Item.AlterntivPublishedDate").ToShortDateString() : item.GetDate("ItemPublisher:Item.ActiveFrom").ToShortDateString();
	string link = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Url")) ? item.GetString("ItemPublisher:Item.Url") : string.Empty;

	string buttonLabel = Pageview.CurrentParagraph.Item["ButtonLabel"].ToString();

	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	string layout = Pageview.CurrentParagraph.Item["Layout"].ToString();
	string orderReverseClass = layout == "image-right" ? "order-last" : string.Empty;
	layout = layout == "image-top" ? "grid grid-1" : layout;
	layout = layout == "image-left" ? "grid grid-2" : layout;
	layout = layout == "image-right" ? "grid grid-2" : layout;

	string ratio = Pageview.CurrentParagraph.Item["ImageAspectRatio"].ToString();
	ratio = ratio != string.Empty ? ratio : ratio;
	string ratioCssClass = ratio != string.Empty ? "ratio" : string.Empty;
	string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;

	string theme = Pageview.CurrentParagraph.Item["Theme"].ToString();
	string coverTheme = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverTheme")) ? item.GetString("ItemPublisher:Item.CoverTheme") : string.Empty;
	string themePadding = string.Empty;

	if (!string.IsNullOrEmpty(coverTheme))
	{
		theme = coverTheme;
	}
	string themeClass = " theme " + theme;

	if (theme != string.Empty)
	{
		themePadding = "p-3";
	}

	<article class="@(layout)@(themeClass)">

		@if (!string.IsNullOrEmpty(coverImage)) { 
			<a class="text-decoration-none w-100 @orderReverseClass" title="@title" href="@link">
				@if (layout == "grid grid-1")
				{ 
				<figure class="m-0 @ratioCssClass" @ratioVariable>
					<img class="img-fluid" src="@coverImage" loading="lazy" alt="@title" style="object-fit: cover;">
				</figure>
				}
				else
				{ 
					<img class="w-100 h-100" src="@coverImage" loading="lazy" alt="@title" style="object-fit: cover;">
				}
			</a>
		}
		<div class="d-flex flex-column flex-fill gap-3 @themePadding">

			@if (item.GetInteger("ItemPublisher:Item.Author") != 0)
			{
				int authorID = item.GetInteger("ItemPublisher:Item.Author");
				var author = Dynamicweb.Security.UserManagement.User.GetUserByID(authorID);
				string authorImage = !string.IsNullOrEmpty(author.Image) ? author.Image : string.Empty;
				string authorImagePath = !string.IsNullOrEmpty(author.Image) ? $"/Admin/Public/GetImage.ashx?image={author.Image}&width=48&height=48&Crop=0&Quality=100&format=webp" : string.Empty;
				string authorName = !string.IsNullOrEmpty(author.Name) ? authorName = author.Name : string.Empty;
				string authorJobTitle = !string.IsNullOrEmpty(author.JobTitle) ? authorJobTitle = author.JobTitle : string.Empty;
				
				<div class="d-flex gap-2 align-items-start">

					@if (!string.IsNullOrEmpty(authorImage))
					{
					<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" alt="@authorName" width="32" height="32" />
					}
					else
					{
						<div class="d-flex align-items-center justify-content-center rounded-circle" style="width: 32px; height: 32px; background-color: rgba(var(--swift-foreground-color-rgb),.25)">
							<div class="icon-2">
									@ReadFile(iconPath + "user.svg")
							</div>
						</div>
					}
					<div class="d-flex flex-column flex-fill fs-8 opacity-75">
						<div class="flex-fill">
							@if (!string.IsNullOrEmpty(authorName))
							{
								<span>@authorName</span>
							}
							@if (!string.IsNullOrEmpty(authorJobTitle))
							{
								<span>@authorJobTitle</span>
							}
						</div>
						@if (!string.IsNullOrEmpty(alterntivPublishedDate))
						{ 
							<div class="d-flex align-items-center gap-1">
								<div class="icon-1">
									@ReadFile(iconPath + "calendar.svg")
								</div>
								<span>@alterntivPublishedDate</span>
							</div>
						}
					</div>
				</div>
			}
			
			@if (!string.IsNullOrEmpty(tags)) 
			{ 
				<div class="d-flex flex-wrap gap-2 mt-1 fs-8">
					@foreach(var tag in tagList)
					{
						<span class="p-1 lh-1 rounded" style="background-color: rgba(var(--swift-foreground-color-rgb),.25)">@tag</span>
					}
				</div>
			}
			
			<div class="d-flex flex-column flex-fill">
				@if (!string.IsNullOrEmpty(title))
                {

					<h3 class="h5"><a class="text-decoration-none" href="@link">@title</a></h3>
                }
				@if (!string.IsNullOrEmpty(summary))
                {
					<p class="m-0">@summary</p>
                }
			</div>
			<div class="pt-3">
				@if (!string.IsNullOrEmpty(buttonLabel))
				{
					<a href="@link" class="btn btn-primary">
						@buttonLabel
					</a>
				}
				else 
				{
					<a href="@link" class="btn btn-primary p-2" title="@Translate("Go to:") @title">
						<div class="icon-3">
							@ReadFile(iconPath + "arrow-right.svg")
						</div>
					</a>
				}
			</div>
		</div>
	</article>
}
