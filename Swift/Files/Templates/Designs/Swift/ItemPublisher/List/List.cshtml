@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@foreach (LoopItem item in GetLoop("ItemPublisher:Items.List"))
{
	string title = item.GetString("ItemPublisher:Item.Title");
	string coverImagePath = item.GetString("ItemPublisher:Item.CoverImage");
	string coverImage = $"/Admin/Public/GetImage.ashx?image={coverImagePath}&width=320&Crop=0&Quality=75&format=webp";
	string summary = item.GetString("ItemPublisher:Item.Summary");
	string tags = item.GetString("ItemPublisher:Item.Tags");
	int authorID = item.GetInteger("ItemPublisher:Item.Author");
	var author = Dynamicweb.Security.UserManagement.User.GetUserByID(authorID);
	string authorImage = $"/Admin/Public/GetImage.ashx?image={author.Image}&Height=48&width=48&Crop=0&Quality=100&format=webp";
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	string link = item.GetString("ItemPublisher:Item.Url");

	string theme = Pageview.CurrentParagraph.Item["Theme"].ToString();
	string themeClass = " theme " + theme + " p-3 ";

	string ratioDesktop = Pageview.CurrentParagraph.Item["ImageAspectRatioDesktop"].ToString();
	ratioDesktop = ratioDesktop != "0" ? ratioDesktop : "";
	string desktopFillClass = ratioDesktop == "fill" && ratioDesktop != "0" ? " h-100" : "";
	string desktopRatioCssClass = ratioDesktop != "" && ratioDesktop != "fill" ? " ratio" : "h-100";
	string desktopRatioVariable = ratioDesktop != "" && ratioDesktop != "fill" ? "style=\"--bs-aspect-ratio: " + ratioDesktop + "\"" : "";

	string ratioMobile = Pageview.CurrentParagraph.Item["ImageAspectRatioMobile"].ToString();
	ratioMobile = ratioMobile != "0" ? ratioMobile : "";
	string mobileFillClass = ratioMobile == "fill" && ratioMobile != "0" ? " h-100" : "";
	string mobileRatioCssClass = ratioMobile != "" && ratioMobile != "fill" ? " ratio" : "h-100";
	string mobileRatioVariable = ratioMobile != "" && ratioMobile != "fill" ? "style=\"--bs-aspect-ratio: " + ratioMobile + "\"" : "";

	string layoutDesktop = Pageview.CurrentParagraph.Item["LayoutDesktop"].ToString();
	string layoutMobile = Pageview.CurrentParagraph.Item["LayoutMobile"].ToString();

	string articleClassDesktop = layoutDesktop == "grid" ? " d-inline-lg-flex" : "";
	string articleClassMobile = layoutMobile == "grid" ? " d-inline-flex" : "";

	string imagePositionDesktop = Pageview.CurrentParagraph.Item["ImagePositionDesktop"].ToString();
	string imagePositionMobile = Pageview.CurrentParagraph.Item["ImagePositionMobile"].ToString();
	string imagePositionDesktopClass = string.Empty;
	string imagePositionMobileClass = string.Empty;

	imagePositionDesktopClass = layoutDesktop == "grid" && imagePositionDesktop == "image-top" ? " flex-lg-column" : imagePositionDesktopClass;
	imagePositionDesktopClass = layoutDesktop == "grid" && imagePositionDesktop == "image-left" ? " flex-lg-row" : imagePositionDesktopClass;
	imagePositionDesktopClass = layoutDesktop == "grid" && imagePositionDesktop == "image-right" ? " flex-lg-row-reverse" : imagePositionDesktopClass;
	imagePositionMobileClass = layoutMobile == "grid" && imagePositionMobile == "image-top" ? " flex-column" : imagePositionMobileClass;
	imagePositionMobileClass = layoutMobile == "grid" && imagePositionMobile == "image-left" ? " flex-row" : imagePositionMobileClass;
	imagePositionMobileClass = layoutMobile == "grid" && imagePositionMobile == "image-right" ? " flex-row-reverse" : imagePositionMobileClass;

	<article class="h-100@(articleClassMobile)@(articleClassDesktop)@(imagePositionMobileClass)@(imagePositionDesktopClass)">
		<a class="text-decoration-none w-100" title="@title" href="@link">
			@* Cover image for mobile *@
			<div class="d-lg-none">
				<figure class="m-0 @(mobileRatioCssClass)" @mobileRatioVariable>
					<img class="img-fluid@(desktopFillClass)" src="@coverImage" loading="lazy" alt="@title" style="object-fit: cover;">
				</figure>
			</div>
			@* Cover image for desktop *@
			<div class="d-none d-lg-block">
				<figure class="m-0 @(desktopRatioCssClass)" @desktopRatioVariable>
					<img class="img-fluid@(desktopFillClass)" src="@coverImage" loading="lazy" alt="@title" style="object-fit: cover;">
				</figure>
			</div>
		</a>
		<div class="d-flex flex-column flex-fill gap-3@(themeClass)pt-3">
			<div class="d-flex gap-2 align-items-center">
				<img class="img-fluid rounded-circle" src="@authorImage" loading="lazy" alt="@author.Name" width="32" height="32" />
				<div class="d-flex flex-column flex-fill fs-8 opacity-75">
					<div class="flex-fill">
						<span>@author.Name, </span>
						<span>@author.JobTitle</span>
					</div>
					<div class="d-flex align-items-center gap-1">
						<div class="icon-1">
							@ReadFile(iconPath + "calendar.svg")
						</div>
						<span>@item.GetDate("ItemPublisher:Item.ActiveFrom").ToShortDateString()</span>
					</div>
				</div>
			</div>
			<div class="d-flex flex-column flex-fill">
				<h5 class="m-0">@title</h5>
				<p class="m-0">@summary</p>
			</div>
			<div class="pt-3">
				<a href="@link" class="btn btn-primary p-2">
					<div class="icon-3">
						@ReadFile(iconPath + "arrow-right.svg")
					</div>
				</a>
			</div>
		</div>
	</article>
}


<div class="swiffy-slider">
	<ul class="slider-container">
		<li><img src="https://source.unsplash.com/49b9l_29ceA/1600x900" style="max-width: 100%;height: auto;"></li>
		<li><img src="https://source.unsplash.com/nKAglN6HBH8/1600x900" style="max-width: 100%;height: auto;"></li>
		<li><img src="https://source.unsplash.com/E9ZwWcMGzj8/1600x900" style="max-width: 100%;height: auto;"></li>
	</ul>

	<button type="button" class="slider-nav"></button>
	<button type="button" class="slider-nav slider-nav-next"></button>

	<div class="slider-indicators">
		<button class="active"></button>
		<button></button>
		<button></button>
	</div>
</div>
