@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.IO

@foreach (LoopItem item in GetLoop("ItemPublisher:Items.List"))
{
	string title = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Title")) ? item.GetString("ItemPublisher:Item.Title") : string.Empty;
	string coverTitle = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverTitle")) ? item.GetString("ItemPublisher:Item.CoverTitle") : string.Empty;
	string coverImagePath = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverImage")) ? item.GetString("ItemPublisher:Item.CoverImage") : string.Empty;
	string coverImage = !string.IsNullOrEmpty(coverImagePath) ? $"/Admin/Public/GetImage.ashx?image={coverImagePath}&Width=960&Quality=75&format=webp" : string.Empty;
	int xPos = item.GetInteger("ItemPublisher:Item.CoverImage.FocalX");
	int yPos = item.GetInteger("ItemPublisher:Item.CoverImage.FocalY");
	string cssPosition = $"{xPos}% {yPos}%";
	string summary = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Summary")) ? item.GetString("ItemPublisher:Item.Summary") : string.Empty;
	string publishedDate = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.PublishedDate")) ? item.GetDate("ItemPublisher:Item.PublishedDate").ToShortDateString() : string.Empty;
	string link = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Url")) ? item.GetString("ItemPublisher:Item.Url") : string.Empty;
	bool showButton = Pageview.CurrentParagraph.Item["ShowButton"] != null ? (Boolean)Pageview.CurrentParagraph.Item["ShowButton"] : false;
	string buttonLabel = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.ButtonLabel")) ? item.GetString("ItemPublisher:Item.ButtonLabel") : string.Empty;
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	string layout = Pageview.CurrentParagraph.Item["Layout"] != null ? Pageview.CurrentParagraph.Item["Layout"].ToString() : string.Empty;
	string listLayout = Pageview.CurrentParagraph.Item["ListLayout"] != null ? Pageview.CurrentParagraph.Item["ListLayout"].ToString() : string.Empty;
	string titleFontSize = Pageview.CurrentParagraph.Item["TitleFontSize"] != null ? Pageview.CurrentParagraph.Item["TitleFontSize"].ToString() : string.Empty;
	string layoutClass = string.Empty;
	bool renderContentWrapper = true;

	switch (layout)
	{
		case "image-top":
			layoutClass = "d-flex flex-column";
			break;
		case "image-left":
		case "image-right":
			layoutClass = !string.IsNullOrEmpty(coverImage) ? "d-flex flex-column grid d-md-grid grid-md-1 grid-lg-2" : "grid grid-1";
			break;
	}

	string orderReverseClass = layout == "image-right" ? "order-first order-lg-last" : string.Empty;

	string ratio = Pageview.CurrentParagraph.Item["ImageAspectRatio"] != null ? Pageview.CurrentParagraph.Item["ImageAspectRatio"].ToString() : string.Empty;
	ratio = ratio != "0" ? ratio : string.Empty;
	string ratioCssClass = ratio != string.Empty ? " ratio" : string.Empty;
	string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;
	string ImageObjectFit = ratio != string.Empty ? "object-fit: cover;" : "object-fit: contain;";

	string articleCardTheme = Pageview.CurrentParagraph.Item["ArticleCardTheme"] != null ? Pageview.CurrentParagraph.Item["ArticleCardTheme"].ToString() : string.Empty;
	string coverTheme = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverTheme")) ? item.GetString("ItemPublisher:Item.CoverTheme") : string.Empty;
	string themePadding = string.Empty;
	string themeClass = string.Empty;
	string gapClass = " gap-3";
	string articleItemShape = Pageview.CurrentParagraph.Item["ArticleItemShape"] != null ? Pageview.CurrentParagraph.Item["ArticleItemShape"].ToString() : "boxed";
	string shapeClass = string.Empty;

	if (!string.IsNullOrEmpty(coverTheme))
	{
		articleCardTheme = coverTheme;
	}

	if (articleCardTheme != string.Empty)
	{
		themePadding = "p-3 p-md-4";
		themeClass = " theme " + articleCardTheme + " shadow-hover";
		gapClass = " gap-0";
	}

	if (articleItemShape == "rounded")
	{
		shapeClass = " rounded-4 rounded-lg-5 overflow-auto";
	}

	if (item.GetBoolean("ItemPublisher:Item.HideTitle") && string.IsNullOrEmpty(summary) && item.GetInteger("ItemPublisher:Item.Author") == 0 && !showButton)
	{
		renderContentWrapper = false;
	}

	<article class="@layoutClass@(gapClass)@(themeClass)@(shapeClass) lift justify-content-center">

		@if (!string.IsNullOrEmpty(coverImage))
		{
			<a class="@orderReverseClass" title="@title" href="@link" tabindex="-1">

				@if (layout == "image-top")
				{
					if (Path.GetExtension(coverImagePath).ToLower() == ".svg")
					{
						<div class="image-zoom-lg-s-hove overflow-hidden @(ratioCssClass) d-flex justify-content-center align-items-center" @ratioVariable>
							@ReadFile(coverImagePath)
						</div>
					}
					else
					{
						<figure class="overflow-hidden m-0@(ratioCssClass)" @ratioVariable>
							<img class="mw-100 mh-100 image-zoom-lg-s-hover" src="@coverImage" loading="lazy" alt="@title" style="@ImageObjectFit object-position: @cssPosition">
						</figure>
					}
				}
				else
				{
					if (Path.GetExtension(coverImagePath).ToLower() == ".svg")
					{
						<div class="image-zoom-lg-s-hover overflow-hidden d-flex justify-content-center align-items-center">
							@ReadFile(coverImagePath)
						</div>
					}
					else
					{
						<figure class="h-lg-100 overflow-hidden m-0 ratio" style="--bs-aspect-ratio: 75%" ;>
							<img class="mw-100 mh-100 image-zoom-lg-s-hover" src="@coverImage" loading="lazy" alt="@title" style="object-fit: cover; object-position: @cssPosition">
						</figure>
					}
				}
			</a>
		}

		@if (renderContentWrapper)
		{
			<div class="d-flex flex-column flex-fill gap-3 @themePadding">
				@if (!string.IsNullOrEmpty(publishedDate) && !item.GetBoolean("ItemPublisher:Item.HidePublishedDate"))
				{
					<div class="d-flex align-items-center gap-1 fs-8 opacity-75">
						<div class="icon-1">
							@ReadFile(iconPath + "calendar.svg")
						</div>
						<span>@publishedDate</span>
					</div>
				}
				@if (!string.IsNullOrEmpty(title) || !string.IsNullOrEmpty(summary))
				{
					<div class="d-flex flex-column flex-fill gap-3">
						@if (!string.IsNullOrEmpty(title) && !item.GetBoolean("ItemPublisher:Item.HideTitle"))
						{
							<h3 class="@titleFontSize mb-0"><a class="text-decoration-none text-decoration-underline-hover" href="@link">@title</a></h3>
						}
						@if (!string.IsNullOrEmpty(summary))
						{
							<p class="m-0">@summary</p>
						}
					</div>
				}

				@if (showButton || item.GetInteger("ItemPublisher:Item.Author") != 0)
				{
					<div class="d-flex justify-content-between flex-wrap gap-3">

						@if (item.GetInteger("ItemPublisher:Item.Author") != 0)
						{
							int authorID = item.GetInteger("ItemPublisher:Item.Author");
							var author = Dynamicweb.Security.UserManagement.User.GetUserByID(authorID);
							string authorImage = !string.IsNullOrEmpty(author.Image) ? author.Image : string.Empty;
							string authorImagePath = !string.IsNullOrEmpty(author.Image) ? $"/Admin/Public/GetImage.ashx?image={author.Image}&width=48&height=48&Crop=0&Quality=100&format=webp" : string.Empty;
							string authorName = !string.IsNullOrEmpty(author.Name) ? authorName = author.Name : string.Empty;
							string authorJobTitle = !string.IsNullOrEmpty(author.JobTitle) ? authorJobTitle = author.JobTitle : string.Empty;


							<div class="d-flex align-items-center gap-2 fs-8 opacity-75">

								@if (!string.IsNullOrEmpty(authorImage))
								{
									<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" alt="@authorName" width="32" height="32" />
								}
								else
								{
									<div class="d-flex align-items-center justify-content-center rounded-circle" style="width: 32px; height: 32px; background-color: rgba(var(--swift-foreground-color-rgb),.25)">
										<div class="icon-2">
											@ReadFile(iconPath + "user.svg")
										</div>
									</div>
								}

								<div class="d-flex flex-column lh-1 gap-1">
									@if (!string.IsNullOrEmpty(authorName))
									{
										<span>@authorName</span>
									}
									@if (!string.IsNullOrEmpty(authorJobTitle))
									{
										<span class="opacity-75">@authorJobTitle</span>
									}
								</div>
							</div>
						}

						@if (showButton)
						{
							if (!string.IsNullOrEmpty(buttonLabel))
							{
								<a href="@link" class="btn btn-primary w-100">
									@buttonLabel
								</a>
							}
							else
							{
								<div class="ms-auto">
									<a href="@link" class="btn btn-primary p-2 lh-1 ">
										<span class="icon-3">
											@ReadFile(iconPath + "arrow-right.svg")
										</span>
									</a>
								</div>
							}
						}
					</div>
				}
			</div>}
	</article>
}
