@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@foreach (LoopItem item in GetLoop("ItemPublisher:Items.List"))
{
	string title = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Title")) ? item.GetString("ItemPublisher:Item.Title") : string.Empty;
	string coverTitle = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverTitle")) ? item.GetString("ItemPublisher:Item.CoverTitle") : string.Empty;
	string coverImagePath = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverImage")) ? item.GetString("ItemPublisher:Item.CoverImage") : string.Empty;
	string coverImage = !string.IsNullOrEmpty(coverImagePath) ? $"/Admin/Public/GetImage.ashx?image={coverImagePath}&Width=960&Quality=75&format=webp" : string.Empty;
	string summary = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Summary")) ? item.GetString("ItemPublisher:Item.Summary") : string.Empty;
	string publishedDate = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.PublishedDate")) ? item.GetDate("ItemPublisher:Item.PublishedDate").ToShortDateString() : item.GetDate("ItemPublisher:Item.ActiveFrom").ToShortDateString();
	string link = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.Url")) ? item.GetString("ItemPublisher:Item.Url") : string.Empty;
	bool showButton = Pageview.CurrentParagraph.Item["ShowButton"] != null ? (Boolean)Pageview.CurrentParagraph.Item["ShowButton"] : false;
	string buttonLabel = Pageview.CurrentParagraph.Item["ButtonLabel"].ToString();
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	string layout = Pageview.CurrentParagraph.Item["Layout"].ToString();
	string listLayout = Pageview.CurrentParagraph.Item["ListLayout"].ToString();
	string layoutClass = string.Empty;

	switch (layout)
	{
		case "image-top":
			layoutClass = "d-flex flex-column";
			break;
		case "image-left":
		case "image-right":
			layoutClass = !string.IsNullOrEmpty(coverImage) ? "d-flex flex-column grid d-md-grid grid-md-1 grid-lg-2" : "grid grid-1";
			break;
	}

	string orderReverseClass = layout == "image-right" ? "order-first order-lg-last" : string.Empty;
	string ratio = Pageview.CurrentParagraph.Item["ImageAspectRatio"].ToString();
	ratio = ratio != string.Empty ? ratio : ratio;
	string ratioCssClass = ratio != string.Empty ? "ratio" : string.Empty;
	string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;
	string theme = Pageview.CurrentParagraph.Item["Theme"].ToString();
	string coverTheme = !string.IsNullOrEmpty(item.GetString("ItemPublisher:Item.CoverTheme")) ? item.GetString("ItemPublisher:Item.CoverTheme") : string.Empty;
	string themePadding = string.Empty;
	string themeClass = string.Empty;

	if (!string.IsNullOrEmpty(coverTheme))
	{
		theme = coverTheme;
	}

	if (theme != string.Empty)
	{
		themePadding = "p-3 p-md-4";
		themeClass = " gap-0 theme " + theme + " shadow-hover lift";
	}

	<article class="@(layoutClass)@(themeClass)">

		@if (!string.IsNullOrEmpty(coverImage)) { 
			<a class=" @orderReverseClass" title="@title" href="@link" tabindex="-1">
				
				@if (layout == "image-top")
				{ 
					<figure class="h-100 m-0 @ratioCssClass" @ratioVariable>
						<img src="@coverImage" loading="lazy" alt="@title" style="object-fit: cover;">
					</figure>
				}
				else
				{ 
					<figure class="h-lg-100 m-0 ratio" style="--bs-aspect-ratio: 75%";>
						<img class="w-100 h-100" src="@coverImage" loading="lazy" alt="@title" style="object-fit: cover;">
					</figure>
				}
			</a>
		}
		<div class="d-flex flex-column flex-fill gap-3 gap-lg-4 @themePadding">
			<div class="d-flex align-items-center gap-1 fs-8 opacity-75">
				<div class="icon-1">
					@ReadFile(iconPath + "calendar.svg")
				</div>
				<span>@publishedDate</span>
			</div>
			<div class="d-flex flex-column flex-fill gap-2">

				@if (!string.IsNullOrEmpty(title))
                {
					<h3 class="h5 mb-0"><a class="text-decoration-none text-decoration-underline-hover" href="@link">@title</a></h3>
                }

				
				@if (!string.IsNullOrEmpty(summary))
                {
					<p class="m-0">@summary</p>
                }
			</div>

			<div class="d-flex justify-content-between flex-wrap gap-3 gap-lg-4">

				@if (item.GetInteger("ItemPublisher:Item.Author") != 0)
				{
					int authorID = item.GetInteger("ItemPublisher:Item.Author");
					var author = Dynamicweb.Security.UserManagement.User.GetUserByID(authorID);
					string authorImage = !string.IsNullOrEmpty(author.Image) ? author.Image : string.Empty;
					string authorImagePath = !string.IsNullOrEmpty(author.Image) ? $"/Admin/Public/GetImage.ashx?image={author.Image}&width=48&height=48&Crop=0&Quality=100&format=webp" : string.Empty;
					string authorName = !string.IsNullOrEmpty(author.Name) ? authorName = author.Name : string.Empty;
					string authorJobTitle = !string.IsNullOrEmpty(author.JobTitle) ? authorJobTitle = author.JobTitle : string.Empty;
				

					<div class="d-flex align-items-center gap-2 fs-8 opacity-75">
					
						@if (!string.IsNullOrEmpty(authorImage))
						{
						<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" alt="@authorName" width="32" height="32" />
						}
						else
						{
							<div class="d-flex align-items-center justify-content-center rounded-circle" style="width: 32px; height: 32px; background-color: rgba(var(--swift-foreground-color-rgb),.25)">
								<div class="icon-2">
										@ReadFile(iconPath + "user.svg")
								</div>
							</div>
						}
		
						<div class="d-flex flex-column lh-1 gap-1">
							@if (!string.IsNullOrEmpty(authorName))
							{
								<span>@authorName</span>
							}
							@if (!string.IsNullOrEmpty(authorJobTitle))
							{
								<span class="opacity-75">@authorJobTitle</span>
							}
						</div>
					</div>
				}
			
				@if (showButton)
				{
					if (!string.IsNullOrEmpty(buttonLabel))
					{
						<a href="@link" class="btn btn-primary w-100">
							<div class="d-flex align-items-center justify-content-center position-relative">
								<span>@buttonLabel</span>
								<span class="icon-2 ms-1 position-absolute position-md-static end-0">
									@ReadFile(iconPath + "chevron-right.svg")
								</span>
							</div>
						</a>
					}
					else
					{
						<div class="ms-auto">
							<a href="@link" class="btn btn-primary p-2 rounded-circle">
								<span class="icon-3">
									@ReadFile(iconPath + "arrow-right.svg")
								</span>
							</a>
						</div>
					}				
				}
			</div>
		</div>
	</article>
}
