@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	var currentParagraphViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(Pageview.CurrentParagraph);
	FieldValueViewModel availableStickersObject;
	Model.ProductFields.TryGetValue("Stickers", out availableStickersObject);

	string sizeCssClass = GetViewParameter("size") != null ? GetViewParameter("size").ToString() : "";
}


@if (availableStickersObject != null) {
	List<FieldOptionValueViewModel> availableStickers = (List<FieldOptionValueViewModel>)availableStickersObject.Value;
	string selectedStickerNamesRequest = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("SelectedStickerNames")) ? Dynamicweb.Context.Current.Request.Form.Get("SelectedStickerNames") : "";
	string selectedStickerValuesRequest = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("SelectedStickerValues")) ? Dynamicweb.Context.Current.Request.Form.Get("SelectedStickerValues") : "";

	Dictionary<string, string> selectedStickers = new Dictionary<string, string>();

	if (selectedStickerNamesRequest == "") {
		foreach (ListOptionViewModel option in currentParagraphViewModel.Item.GetList("Stickers").SelectedOptions) {
			selectedStickers.Add(option.Name, option.Value);
		}
	} else {
		List<string> selectedStickerNames = selectedStickerNamesRequest.Split(new char[] { ',' }).ToList();
		List<string> selectedStickerValues = selectedStickerValuesRequest.Split(new char[] { ',' }).ToList();

		for (int i = 0; i < selectedStickerNames.Count(); i++) {
			selectedStickers.Add(selectedStickerNames[i], selectedStickerValues[i]);
		}
	}

	foreach (var selectedOption in selectedStickers) {
		foreach (FieldOptionValueViewModel availableOption in availableStickers) {
			if (selectedOption.Key == availableOption.Value)
			{
				Paragraph paragraph = Dynamicweb.Services.Paragraphs.GetParagraph(Convert.ToInt32(selectedOption.Value));
				ParagraphInfoViewModel paragraphViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(paragraph);
				DateTime createdDate = Model.Created.Value;

				string title = availableOption.Name;
				string color = paragraphViewModel.Item.GetColor("ForegroundColor").Hex;
				string backgroundColor = paragraphViewModel.Item.GetColor("BackgroundColor").Hex;
				string type = paragraphViewModel.Item.GetRawValueString("Type", "custom");

				if (type == "sale-amount" && Model.Discount.Price != 0) {
					title = "- " + Model.Discount.PriceFormatted;
				}

				if (type == "sale-percentage" && Model.Discount.Price != 0) {
					double percentage = Math.Ceiling((100 / Model.Price.Price)) * Math.Ceiling(Model.Discount.Price);

					title = "- " + percentage + "%";
				}

				if (type != "new" || (createdDate.AddDays(Convert.ToDouble(paragraphViewModel.Item.GetString("PublicationSpan"))) > DateTime.Now)) {
					if ((type == "sale-amount" || type == "sale-percentage") && Model.Discount.Price != 0) {
						<span class="@sizeCssClass"><span class="badge bg-black" style="background-color: @backgroundColor !important; color: @color">@title</span></span>
					}
					if ((type != "sale-amount" && type != "sale-percentage")) {
						<span class="@sizeCssClass"><span class="badge bg-black" style="background-color: @backgroundColor !important; color: @color">@title</span></span>
					}
				}
			}
		}
	} 
}
