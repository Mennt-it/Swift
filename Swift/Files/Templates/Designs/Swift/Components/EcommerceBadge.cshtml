@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string sizeCssClass = GetViewParameter("size") != null ? GetViewParameter("size").ToString() : "";

	bool saleBadgeEnabled = GetViewParameter("saleBadgeEnabled") != null ? GetViewParameterBoolean("saleBadgeEnabled") : false;
	string saleBadgeType = GetViewParameter("saleBadgeType") != null ? GetViewParameterString("saleBadgeType") : "amount";
	string saleBadgeName = GetViewParameter("saleBadgeName") != null ? GetViewParameterString("saleBadgeName") : Translate("Sale");
	string saleBadgeCssClassName = GetViewParameter("saleBadgeCssClassName") != null ? GetViewParameterString("saleBadgeCssClassName") : "";

	DateTime createdDate = Model.Created.Value;
	bool newBadgeEnabled = GetViewParameter("newBadgeEnabled") != null ? GetViewParameterBoolean("newBadgeEnabled") : false;
	string newBadgeName = GetViewParameter("newBadgeName") != null ? GetViewParameterString("newBadgeName") : Translate("New");
	string newBadgeCssClassName = GetViewParameter("newBadgeCssClassName") != null ? GetViewParameterString("newBadgeCssClassName") : "";
	double newPublicationDays = GetViewParameter("newPublicationDays") != null ? GetViewParameterDouble("newPublicationDays") : 0;

	List<string> campaignBadgesNames = GetViewParameter("campaignBadgesNames") != null ? GetViewParameterString("campaignBadgesNames").Split(new char[] { ',' }).ToList() : new List<string>();
	List<string> campaignBadgesValues = GetViewParameter("campaignBadgesValues") != null ? GetViewParameterString("campaignBadgesValues").Split(new char[] { ',' }).ToList() : new List<string>();
}


@if (saleBadgeEnabled && Model.Discount.Price != 0) {
	string title = saleBadgeType == "amount" ? "-" + Model.Discount.PriceFormatted : saleBadgeName;
	title = saleBadgeType == "percentage" ? "-" + Math.Ceiling((100 / Model.Price.Price)) * Math.Ceiling(Model.Discount.Price) + "%" : title;

	<span class="@sizeCssClass"><span class="badge @saleBadgeCssClassName">@title</span></span>
}

@if (newBadgeEnabled && newPublicationDays == 0) {
	<span class="@sizeCssClass"><span class="badge @newBadgeCssClassName">@newBadgeName</span></span>
} else if (newBadgeEnabled && (createdDate.AddDays(newPublicationDays) > DateTime.Now)) {
	<span class="@sizeCssClass"><span class="badge @newBadgeCssClassName">@newBadgeName</span></span>
}

@for (int i = 0; i < campaignBadgesNames.Count(); i++) {
	if (!string.IsNullOrEmpty(campaignBadgesNames[i])) {
		FieldValueViewModel availableCampaignsObject;
		Model.ProductFields.TryGetValue("Campaign", out availableCampaignsObject);

		if (availableCampaignsObject != null) {
		 	List<FieldOptionValueViewModel> availableCampaigns = (List<FieldOptionValueViewModel>)availableCampaignsObject.Value;

			foreach (FieldOptionValueViewModel availableOption in availableCampaigns) {
				if (campaignBadgesNames[i] == availableOption.Name)
				{
					<span class="@sizeCssClass"><span class="badge @campaignBadgesValues[i]">@campaignBadgesNames[i]</span></span>
				}
			}
		}
    }
}
