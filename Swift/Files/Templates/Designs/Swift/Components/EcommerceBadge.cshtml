@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string sizeCssClass = GetViewParameter("size") != null ? GetViewParameter("size").ToString() : "";

	string saleBadgeType = GetViewParameter("saleBadgeType") != null ? GetViewParameterString("saleBadgeType") : "amount";
	string saleBadgeCssClassName = GetViewParameter("saleBadgeCssClassName") != null ? GetViewParameterString("saleBadgeCssClassName").Trim().ToLower() : "";
	bool saleBadgeEnabled = saleBadgeCssClassName != "" && saleBadgeCssClassName != "none" ? true : false;

	DateTime createdDate = Model.Created.Value;
	string newBadgeCssClassName = GetViewParameter("newBadgeCssClassName") != null ? GetViewParameterString("newBadgeCssClassName").Trim().ToLower() : "";
	bool newBadgeEnabled = newBadgeCssClassName != "" && newBadgeCssClassName != "none" ? true : false;
	double newPublicationDays = GetViewParameter("newPublicationDays") != null ? GetViewParameterDouble("newPublicationDays") : 0;

	List<string> campaignBadgesValues = GetViewParameter("campaignBadgesValues") != null ? GetViewParameterString("campaignBadgesValues").Split(new char[] { ',' }).ToList() : new List<string>();

	var badgesPage =  Pageview.AreaSettings.GetLink("EcommerceBadgesPage") != null ? Pageview.AreaSettings.GetLink("EcommerceBadgesPage").PageId : 0;
	var allBadges = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(badgesPage);
}


@if (saleBadgeEnabled && Model.Discount.Price != 0) {
	string title = saleBadgeType == "amount" ? "-" + Model.Discount.PriceFormatted : Translate("Sale");
	title = saleBadgeType == "percentage" ? "-" + Math.Floor((Model.Discount.Price / Model.PriceBeforeDiscount.Price)*100) + "%" : title;

	<style>
		.@(saleBadgeCssClassName)::before {
			display: none;
		}
	</style>


	<span class="@sizeCssClass"><span class="badge @saleBadgeCssClassName rounded-0">@title</span></span>
}

@if ((newBadgeEnabled && newPublicationDays == 0) || (newBadgeEnabled && (createdDate.AddDays(newPublicationDays) > DateTime.Now))) {
	<span class="@sizeCssClass"><span class="badge @newBadgeCssClassName rounded-0"></span></span>
} 

@foreach (string campaign in campaignBadgesValues) {
	string campaignType = "";

	foreach (Paragraph badge in allBadges) {
		var paragraphviewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(badge);

		if (campaign == paragraphviewModel.Item.GetString("CssClassName")) {
			campaignType = paragraphviewModel.Item.GetRawValueString("CampaignType");
        }
	}

	if (!string.IsNullOrEmpty(campaign)) {
		FieldValueViewModel availableCampaignsObject;
		Model.ProductFields.TryGetValue("Campaign", out availableCampaignsObject);

		if (availableCampaignsObject != null) {
		 	List<FieldOptionValueViewModel> availableCampaigns = (List<FieldOptionValueViewModel>)availableCampaignsObject.Value;

			foreach (FieldOptionValueViewModel availableOption in availableCampaigns) {

				if (campaignType == availableOption.Value)
				{
					<span class="@sizeCssClass"><span class="badge @campaign.Trim().ToLower() rounded-0"></span></span>
				}
			}
		}
    }
}
