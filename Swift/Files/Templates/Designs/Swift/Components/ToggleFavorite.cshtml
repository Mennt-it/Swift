@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	string productId = Model.Id;
	bool isInFavoriteList = Pageview.User.IsProductInAnyFavoriteList(productId);

	IEnumerable<FavoriteList> favoreiteLists = Pageview.User.GetFavoriteLists();
	int favoriteListIdFromUrl = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("FavoriteListId")) ? Convert.ToInt32(Dynamicweb.Context.Current.Request.QueryString.Get("FavoriteListId")) : 0;
	int favoriteListId = favoriteListIdFromUrl;
	bool reloadPage = favoriteListIdFromUrl != 0;
}

<form method="post" action="@Pageview.SearchFriendlyUrl">
	@if (favoreiteLists.Count() < 2) {
		if (favoreiteLists.Count() == 1) {
			foreach (FavoriteList list in favoreiteLists) {
				favoriteListId = list.ListId;
			}
		}
	}

	<input type="hidden" name="ReloadPage" value="@reloadPage.ToString()" />
	<input type="hidden" name="FavoriteCmd" value="" />
	<input type="hidden" name="FavoriteListId" value="@favoriteListId"/>
	<input type="hidden" name="UserId" value="@Pageview.User.ID" />
	<input type="hidden" name="ProductId" value="@Model.Id" />
	<input type="hidden" name="VariantId" value="@Model.VariantId" />
	<input type="hidden" name="ProductName" value="@Model.Name" />
	@if (!string.IsNullOrEmpty(Model.DefaultImage.Value)) {
		<input type="hidden" name="Thumbnail" value="/Admin/Public/GetImage.ashx?image=@(Model.DefaultImage.Value)&width=80&format=webp" /> 
    }

	@if (favoreiteLists.Count() < 2) {
		isInFavoriteList = Pageview.User.IsProductInFavoriteList(favoriteListId, productId);
		string defaultCommand = isInFavoriteList ? "remove" : "add";
		string filledFavoriteIcon = isInFavoriteList ? "" : "d-none";
		string outlineFavoriteIcon = isInFavoriteList ? "d-none" : "";

		<button type="button" class="btn btn-secondary rounded-0 h-100" data-list-id="@favoriteListId" data-command="@defaultCommand" onclick="swift.Favorites.Update(event)">
			<span class="icon-2 js-filled-favorite-icon @filledFavoriteIcon">
				@ReadFile(iconPath + "heart-filled.svg")
			</span>
			<span class="icon-2 js-outline-favorite-icon @outlineFavoriteIcon">
				@ReadFile(iconPath + "heart.svg")
			</span>
		</button>
	} else {
		string anyFilledFavoriteIcon = isInFavoriteList ? "" : "d-none";
		string anyOutlineFavoriteIcon = isInFavoriteList ? "d-none" : "";

		<style>
			.dropdown-toggle-no-arrow::after {
				display: none;
			}
		</style>

		<button type="button" class="btn btn-secondary rounded-0 dropdown-toggle dropdown-toggle-no-arrow" data-bs-toggle="dropdown" aria-expanded="false">
			<span class="icon-2 js-any-filled-favorite-icon @anyFilledFavoriteIcon">
				@ReadFile(iconPath + "heart-filled.svg")
			</span>
			<span class="icon-2 js-any-outline-favorite-icon @anyOutlineFavoriteIcon">
				@ReadFile(iconPath + "heart.svg")
			</span>
		</button>

		<ul class="dropdown-menu dropdown-menu-end">
			@foreach (FavoriteList list in favoreiteLists) {
				string listName = !string.IsNullOrEmpty(list.Name) ? list.Name : Translate("My favorites");
				bool isInThisFavoriteList = Pageview.User.IsProductInFavoriteList(list.ListId, productId);
				string defaultCommand = isInThisFavoriteList ? "remove" : "add";
				string filledFavoriteIcon = isInThisFavoriteList ? "" : "d-none";
				string outlineFavoriteIcon = isInThisFavoriteList ? "d-none" : "";

				<li>
					<button type="button" class="btn dropdown-item d-flex align-items-center h-100" data-list-id="@list.ListId" data-command="@defaultCommand" onclick="swift.Favorites.Update(event)">
						<span class="flex-fill me-2">@listName</span>
						<span class="icon-2 js-filled-favorite-icon @filledFavoriteIcon">
							@ReadFile(iconPath + "heart-filled.svg")
						</span>
						<span class="icon-2 js-outline-favorite-icon @outlineFavoriteIcon">
							@ReadFile(iconPath + "heart.svg")
						</span>
					</button>
				</li>
			}
		</ul>
	}
</form>

