@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Ecommerce.ProductCatalog
@using System.Collections.Generic


@functions {

	string GetFieldsFormatted(List<FieldValueViewModel> fields, bool hideLabels)
	{
		List<string> fieldsToRender = new List<string>();

		foreach (var field in fields)
		{

			if (!hideLabels)
			{
				fieldsToRender.Add($"<span>{field.Name}: </span class=\"opacity: 75\"> <span>{RenderPartial("Components/Specifications/Shared/FieldValue.cshtml", field)}</span>");
			}
			else
			{
				fieldsToRender.Add($"<span>{RenderPartial("Components/Specifications/Shared/FieldValue.cshtml", field)}</span>");
			}

		}
		string fieldsString = (string.Join(", ", fieldsToRender.Select(x => x.ToString()).ToArray()));
		return fieldsString;
	}
}

@{
	var groups = GetViewParameter("Groups") as List<FieldGroupViewModel>;

	string title = Model.Item.GetString("Title");
	bool hideGroupHeaders = Model.Item.GetBoolean("HideGroupHeaders");
	bool hideLabels = Model.Item.GetBoolean("HideFieldLabels");
	bool hideTitle = Model.Item.GetBoolean("HideTitle");
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");

	string size = Model.Item.GetRawValueString("Size", "full");
	string gapCss = size == "full" ? " gap-4" : " gap-2";
	string tableSizeCss = size == "full" ? "" : " table-sm";

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? string.Empty : contentPadding;
	contentPadding = contentPadding == "small" ? " p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? " p-4 p-md-5" : contentPadding;

	if (!hideTitle)
	{
		<h2 class="g-col-12 @titleFontSize">@title</h2>
	}

	foreach (var group in groups)
	{
		string groupName = group.Name;
		var fields = group.Fields;
		string fieldsFormatted = GetFieldsFormatted(fields, hideLabels);

		<div class="g-col-12 opacity-75 fs-7 @(gapCss)">
			@if (!hideGroupHeaders)
			{
				<h3>@groupName</h3>
			}

			@fieldsFormatted
		</div>
	}
}
