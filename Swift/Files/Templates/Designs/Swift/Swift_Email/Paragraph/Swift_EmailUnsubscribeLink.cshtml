@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	var settings = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page.Parent).Item;
	var blockId = Model.ID;
	string blockType = "unsubscribeLink_block";
	var block = Model.Item;
	var blockThemeId = block.GetRawValueString("Theme");
	var blockThemeParagraph = blockThemeId != null && blockThemeId != string.Empty ? Dynamicweb.Services.Paragraphs.GetParagraph(Convert.ToInt32(blockThemeId)) : null;
	var blockTheme = blockThemeParagraph != null && Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(blockThemeParagraph).Item.GetString("CssClassName") != string.Empty ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(blockThemeParagraph)?.Item : null;
	var emailTextColor = settings.GetColor("TextColor") != null ? settings.GetColor("TextColor").ToString() : "inherit";
	string backgroundColor = blockTheme != null ? "background-color: " + blockTheme.GetString("BackgroundColor") + ";" : string.Empty;
	string foregroundColor = blockTheme != null ? "color:" + blockTheme.GetString("ForegroundColor", "inherit") + ";" : "color:" + emailTextColor + ";";
	string borderColor = blockTheme != null ? "border-color: " + blockTheme.GetString("BorderColor", "transparent") + ";" : string.Empty;
	string borders = block.GetRawValueString("Borders", "none");
	string borderThicknes = block.GetRawValueString("BorderThicknes", "0") + "px;";
	string borderClass = string.Empty;

	switch (borders)
	{
		case "top":
			borderClass = "border-top:" + borderThicknes + "border-top-style:solid;";
			break;
		case "bottom":
			borderClass = "border-bottom:" + borderThicknes + "border-bottom-style:solid;";
			break;
		case "top-bottom":
			borderClass = "border-top:" + borderThicknes + "border-bottom:" + borderThicknes + "border-style:solid; border-left:0; border-right: 0;";
			break;
		case "all":
			borderClass = "border:" + borderThicknes + "border-style:solid;";
			break;
	}

	string padding = "padding:" + block.GetRawValueString("Padding", "0") + "px;";
	string align = block.GetRawValueString("Align", "left");
	string linkText = Model.Item.GetString("LinkText", string.Empty);
	string leadingText = Model.Item.GetString("LeadingText", string.Empty);
	string lineHeight = "line-height:" + block.GetRawValueString("LineHeight", "1.5") + ";";
}

<table id="@blockId" class="@blockType" align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="mso-table-lspace: 0pt; mso-table-rspace: 0pt; color: inherit; width: 100%;">
	<tbody>
		<tr>
			<td style="mso-line-height-rule:exactly;mso-text-raise:11px;mso-table-lspace:0pt;mso-table-rspace:0pt;font-weight:400;text-align:@align;@(backgroundColor)@(foregroundColor)@(padding)@(borderClass)@(borderColor)@(lineHeight)" width="100%">
				@leadingText
				<a style="@(foregroundColor)" href="{{EmailMarketing:Email.UnsubscribeLink.Clean}}">@linkText</a>
		</tr>
	</tbody>
</table>
