@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	var blockId = Model.ID;
	string blockType = "image_block";
	var block = Model.Item;
	string padding = block.GetRawValueString("Padding", "0");
	var link = new Dynamicweb.Frontend.LinkViewModel();
	string linkType = block.GetRawValueString("LinkType", "page");

	if (linkType == "page" && block.GetLink("PageLink") != null)
	{
		link = block.GetLink("PageLink");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = block.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds)
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = block.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds)
		};
	}
}

<table id="@blockId" class="@blockType" align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;color:inherit;width:100%;">
	<tbody>
		<tr>
			<td class="column" style="mso-table-lspace:0pt;mso-table-rspace:0pt;text-align:left;padding:@(padding)px;vertical-align:top;border:0px;" width="100%">
				<div align="center">
					@if (link is object)
					{
						<a href="@link" target="_blank">
							@RenderImage(padding)
						</a>
					}
					else
					{
						@RenderImage(padding)
					}
				</div>
			</td>
		</tr>
	</tbody>
</table>

@helper RenderImage(string padding)
{
	var parms = new Dictionary<string, object>();
	parms.Add("alt", Model.Item.GetString("ImageAltText"));
	parms.Add("columns", Model.GridRowColumnCount);
	parms.Add("padding", padding);

	@RenderPartial("Swift_Email/Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
}
