@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	var settings = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page.Parent)?.Item ?? null;
	var blockId = Model.ID;
	string blockType = "heading_block";
	var block = Model.Item;
	var blockThemeId = block.GetRawValueString("Theme");
	var blockThemeParagraph = blockThemeId != null && blockThemeId != string.Empty ? Dynamicweb.Services.Paragraphs.GetParagraph(Convert.ToInt32(blockThemeId)) : null;
	var blockTheme = blockThemeParagraph != null && Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(blockThemeParagraph).Item.GetString("CssClassName") != string.Empty ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(blockThemeParagraph)?.Item : null;
	string backgroundColor = blockTheme != null ? "background-color: " + blockTheme.GetString("BackgroundColor") + ";" : string.Empty;
	string foregroundColor = blockTheme != null ? "color: " + blockTheme.GetString("ForegroundColor") + ";" : string.Empty;
	string borderColor = blockTheme != null ? "border-color: " + blockTheme.GetString("BorderColor", "transparent") + ";" : string.Empty;
	string borders = !string.IsNullOrEmpty(block.GetRawValueString("Borders")) ? block.GetRawValueString("Borders") : string.Empty;
	string borderThicknes = !string.IsNullOrEmpty(block.GetRawValueString("BorderThicknes")) ? block.GetString("BorderThicknes") + "px;" : string.Empty;
	string align = block.GetRawValueString("Align", "left");
	string borderClass = string.Empty;
	switch (borders)
	{
		case "top":
			borderClass = "border-top:" + borderThicknes + "border-top-style:solid;";
			break;
		case "bottom":
			borderClass = "border-bottom:" + borderThicknes + "border-bottom-style:solid;";
			break;
		case "top-bottom":
			borderClass = "border-top:" + borderThicknes + "border-bottom:" + borderThicknes + "border-style:solid; border-left:0; border-right: 0;";
			break;
		case "all":
			borderClass = "border:" + borderThicknes + "border-style:solid;";
			break;
	}

	string padding = "padding: " + Model.Item.GetString("Padding", "0") + "px;";
}

<table id="@blockId" class="@blockType" align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="mso-table-lspace: 0pt; mso-table-rspace: 0pt; color: inherit; width: 100%;">
	<tbody>
		<tr>
			<td style="mso-table-lspace: 0pt; mso-table-rspace: 0pt; mso-line-height-rule: exactly; mso-text-raise: 11px; font-weight: 400; text-align: @align; @(backgroundColor)@(foregroundColor)@(padding)@(borderClass)@(borderColor)" width="100%">
				@RenderHeading(block, settings)
			</td>
		</tr>
	</tbody>
</table>

@helper RenderHeading(Dynamicweb.Frontend.ItemViewModel block, Dynamicweb.Frontend.ItemViewModel settings)
{
	string title = block.GetString("Title", string.Empty);
	string heading = block.GetRawValueString("Heading", "h2");
	string fontStyle = block.GetRawValueString("FontStyle", "header");
	string fontSize = !string.IsNullOrEmpty(block.GetRawValueString("FontSize")) ? "font-size:" + block.GetRawValueString("FontSize") + "px;" : string.Empty;
	string lineHeight = "line-height:" + block.GetRawValueString("LineHeight", "1.5") + ";";

	<@heading class="@(fontStyle)" style="margin: 0px; @(fontSize)@(lineHeight)">
		@title
	</@heading> 
}
