@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@functions {
	private string GetTableReset()
	{
		return "border:0;margin:0;outline:0;padding:0;";
	}

	private Dynamicweb.Frontend.ColorViewModel GetMutedColor(string hex, int percent, double threshold = 0.5)
	{
		/// <summary>
		/// Return a color in either lighter or darker contrast based on the original color luminance.
		/// </summary>
		/// <param name="percent">The percent (1-100) to darken or light the color with - higher percentage will give higher contrast</param>
		/// <param name="threshold">The luminance threshold (0-1). Default is 0.5. 0 is black, 1 is white. Luminance threshold is used to decide wether the returned contrast color should be darker or lighter than the base color</param>
		/// <returns>A new color viewmodel with the contrasted color in either darker or lighter luminance compared to base color</returns>
		/// 
		if (threshold > 1)
			threshold = 1;
		if (threshold < 0)
			threshold = 0;

		var color = Dynamicweb.Imaging.Colors.Color.FromHex(hex);
		var luminance = (0.2126 * color.BaseColor.R) + (0.7152 * color.BaseColor.G) + (0.0722 * color.BaseColor.B);
		/// == luminance = 0 is black, luminance = 1 is white == //
		luminance = color.Brightness / 255;
		return luminance < threshold ? new Dynamicweb.Frontend.ColorViewModel() { Hex = color.Lighten(percent).ToHex() } : new Dynamicweb.Frontend.ColorViewModel() { Hex = color.Darken(percent).ToHex() };
	}
	
	private static double GetImageHeight(string imageRatio, double imageWidth)
	{
		string[] ratioValues = imageRatio.Split('-');
		double ratio = ratioValues.Length == 2 ? Dynamicweb.Core.Converter.ToDouble(ratioValues[1]) / Dynamicweb.Core.Converter.ToDouble(ratioValues[0]) : 1;
		return imageWidth * ratio;
	}
}

@{
	var page = Dynamicweb.Services.Pages.GetPage(Pageview.ID);
	var settings = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page?.Parent).Item;
	var block = Pageview.CurrentParagraph.Item;

	var emailContentThemeId = settings.GetRawValueString("EmailContentTheme");
	var emailContentThemeParagraph = emailContentThemeId != null && emailContentThemeId != string.Empty ? Dynamicweb.Services.Paragraphs.GetParagraph(Dynamicweb.Core.Converter.ToInt32(emailContentThemeId)) : null;
	var emailContentTheme = emailContentThemeParagraph != null && Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(emailContentThemeParagraph).Item.GetString("CssClassName") != string.Empty ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(emailContentThemeParagraph)?.Item : null;

	var rowId = Pageview.CurrentParagraph.GridRowId;
	var row = Dynamicweb.Services.Grids.GetGridRowById(rowId);
	var rowItem = Dynamicweb.Services.Items.GetItem(row.ItemType, row.ItemId);
	var rowThemeId = Dynamicweb.Core.Converter.ToString(rowItem["ColumnBackground"]);
	var rowThemeParagraph = rowThemeId != null && rowThemeId != string.Empty ? Dynamicweb.Services.Paragraphs.GetParagraph(Dynamicweb.Core.Converter.ToInt32(rowThemeId)) : null;
	var rowTheme = rowThemeParagraph != null && Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(rowThemeParagraph).Item.GetString("CssClassName") != string.Empty ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(rowThemeParagraph)?.Item : null;

	var blockThemeId = block["Theme"].ToString();
	var blockThemeParagraph = blockThemeId != null && blockThemeId != string.Empty ? Dynamicweb.Services.Paragraphs.GetParagraph(Dynamicweb.Core.Converter.ToInt32(blockThemeId)) : null;
	var blockTheme = blockThemeParagraph != null && Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(blockThemeParagraph).Item.GetString("CssClassName") != string.Empty ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(blockThemeParagraph)?.Item : rowTheme is object ? rowTheme : emailContentTheme;
	
	int cellSpacing = 8;
	string align = block["Align"].ToString();
	var layoutColumns = Dynamicweb.Core.Converter.ToInt32(block["Layout"].ToString());

	IList<LoopItem> products = GetLoop("Products");
}

@if (products.Any())
{
	@:<tr style="@GetTableReset()">

	int index = 1;
	int totalProducts = products.Count();
	foreach (var product in products)
	{
		<td valign="top" style="@GetTableReset()">
			@RenderProduct(product, blockTheme, align)
		</td>

		if (index % layoutColumns == 0 && !(index == totalProducts))
		{
		@:</tr>
		@:<tr style="@GetTableReset()">
			@:<td style="@GetTableReset()" colspan="100%" height="@(cellSpacing * 4)">&nbsp;</td>
		@:</tr>
		@:<tr style="@GetTableReset()">
		}
		else
		{
			if(!(index == totalProducts))
			{ 
				@:<td width="@(cellSpacing)" style="@GetTableReset()">&nbsp;</td>
			}
		}

		index++;
	}
	@:</tr>
}

@helper RenderProduct(LoopItem product, Dynamicweb.Frontend.ItemViewModel theme, string align)
{
	var item = Pageview.CurrentParagraph.Item;
	
	var foregroundColor = theme?.GetColor("ForegroundColor");

	string variantId = product.GetString("Ecom:Product.VariantID");
	string defaultVariantId = product.GetString("Ecom:Product.DefaultVariantComboID");

	string variantIdForLink = !string.IsNullOrEmpty(variantId) ? $"&VariantID={variantId}" : "";
	variantIdForLink = string.IsNullOrEmpty(variantIdForLink) && !string.IsNullOrEmpty(defaultVariantId) ? $"&VariantID={defaultVariantId}" : variantIdForLink;

	string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
	link += $"&GroupID={product.GetString("Ecom:Product.PrimaryGroupID")}";
	link += $"&ProductID={product.GetString("Ecom:Product.ID")}";
	link += variantIdForLink;
	link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(link);

	bool hideProductNumber = Dynamicweb.Core.Converter.ToBoolean(item["HideProductNumber"].ToString());

	<table style="border-collapse:collapse;table-layout:fixed;@GetTableReset()" cellpadding="0" cellspacing="0" width="100%" role="presentation">
		<tbody>
			<tr style="@GetTableReset()">
				<td style="@GetTableReset()">

					<div align="center" style="font-size:2px;">
						<a style="text-decoration:none;@GetTableReset()" href="@link" target="_blank">
							@RenderImage(product)
						</a>
					</div>
						
					<table style="border-collapse:collapse;table-layout:fixed;@GetTableReset()" cellpadding="0" cellspacing="0" width="100%" role="presentation">
						<tbody>
							<tr style="@GetTableReset()">
								<td style="@GetTableReset()padding-top:8px;text-align:@align;line-height:18px;font-size:13px;text-decoration:none;color:@foregroundColor;">
									<a style="text-decoration:none;color:@foregroundColor;@GetTableReset()" href="@link" target="_blank">
										@product.GetString("Ecom:Product.Name")
									</a>
								</td>
							</tr>

							@if (!hideProductNumber)
                            {
                            	<tr>
                            		<td style="@GetTableReset()padding-top:8px;line-height:18px;font-size:11px;color:@(GetMutedColor(foregroundColor?.Hex, 20));">
                            			@product.GetString("Ecom:Product.Number")
                            		</td>
                            	</tr>
                            }
						<tr><td height="24" style="padding-top:24px;"></td></tr>
						</tbody>
					</table>
				</td>
			</tr>
		</tbody>
	</table>
}

@helper RenderImage(LoopItem product)
{
	string imagePath = product.GetString("Ecom:Product.PrimaryImage");

	if (!string.IsNullOrEmpty(imagePath))
	{
		var item = Pageview.CurrentParagraph.Item;
		
		imagePath = Dynamicweb.Context.Current.Server.UrlEncode(imagePath);
		int columnCount = Pageview.CurrentParagraph.GridRowColumn;
		int columnWidth = 640;
		bool nested = Pageview.CurrentParagraph.GridRowColumn > 1;
		if(nested)
		{
			int gridColumnCount = Pageview.CurrentParagraph.GridRowColumn;
			columnWidth = columnWidth / gridColumnCount;
		}
		int padding = Convert.ToInt32(item["Padding"].ToString());
		string ratio = item["ImageAspectRatio"].ToString().ToLower();
		string imageHeight = string.Empty;

		var imageWidth = (columnWidth - padding) / columnCount;

		string image = $"/Admin/Public/GetImage.ashx?width={imageWidth}";
		string crop = "7";

		if (ratio != "original")
		{
			if (!string.IsNullOrEmpty(ratio))
			{
				imageHeight = $"height={GetImageHeight(ratio, imageWidth)}";
				image += $"&height={GetImageHeight(ratio, imageWidth)}";
				image += $"&fillcanvas=true";
			}
		}

		image += $"&crop={crop}&image={imagePath}&quality=100&format=webp";
	
		string alt = product.GetString("Ecom:Product.Name");

		<img src="@image" align="center" style="display:block;border-collapse:separate;border-spacing:0;border:0;margin:0;outline:0;padding:0;height:auto;width:100%;max-width:@(imageWidth)px;" alt="@alt" width="@(imageWidth)">
	}
}
