@inherits ViewModelTemplate<ProductListViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog

@{ 
	var productList = Model.Products;

	string url = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	string iconPath = "/Files/icons/";

	string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	string selectedDisplayGroups = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form["SelectedDisplayGroups"]) ? Dynamicweb.Context.Current.Request.Form["SelectedDisplayGroups"].ToString() : "";
	List<string> selectedDisplayGroupsList = selectedDisplayGroups != null ? selectedDisplayGroups.Split(',').ToList() : new List<string>();

	//Collect the titles for all available fields
	List<string> fieldsHeaders = new List<string>();

	foreach (var product in productList)
	{
		foreach (var selection in selectedDisplayGroupsList)
		{
			foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
			{
				if (selection.ToString() == group.Id)
				{
					foreach (var field in group.Fields)
					{
						if (!fieldsHeaders.Contains(field.Value.Name))
						{
							bool noValues = false;
							if (field.Value.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>)) {
								System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
								noValues = values.Count > 0 ? false : true;
							} else if (string.IsNullOrEmpty(field.Value.Value.ToString())) {
								noValues = true;
							}

							if (!noValues)
							{
								fieldsHeaders.Add(field.Value.Name);
							}
						}
					}
				}
			}
		}
	}

	string title = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form["Title"]) ? Dynamicweb.Context.Current.Request.Form["Title"].ToString() : "";
	bool hideTitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form["HideTitle"]) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form["HideTitle"].ToString()) : false;
	bool hideImage = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form["HideImage"]) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form["HideImage"].ToString()) : false;
	bool hideProductNumber = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form["HideProductNumber"]) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form["HideProductNumber"].ToString()) : false;
	bool hideStock = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form["HideStock"]) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form["HideStock"].ToString()) : false;
	bool quantitySelector = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form["QuantitySelector"]) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form["QuantitySelector"].ToString()) : false;
}

@if (productList.Count > 0) {
	if (!string.IsNullOrEmpty(title) && !hideTitle) {
		<h2>@title</h2>
    }

	<div class="table-responsive">
		<table class="table table-striped align-middle text-nowrap">
			<thead>
				<tr class="fw-bold">
					@if (!hideImage) {
						<td scope="col">&nbsp;</td>
                    }
					@if (!hideProductNumber) {
						<td scope="col">#</td>
                    }
					<td scope="col">@Translate("Product")</td>
					@foreach (var header in fieldsHeaders) {
						<td scope="col">@header</td>	
                    }
					@if (!hideStock) {
						<td scope="col">@Translate("Stock")</td>
					}
					<td scope="col" align="right">@Translate("Price")</td>
					<td scope="col" align="right">@Translate("Qty")</td>
				</tr>
			</thead>
		
			<tbody>
				@foreach (var product in productList) {
					string image = product.DefaultImage.Value;
					image = $"/Admin/Public/GetImage.ashx?image={image}&width=60&format=webp"; 

					List<CategoryFieldViewModel> categories = new List<CategoryFieldViewModel>();
					foreach (var selection in selectedDisplayGroupsList)
					{
						foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
						{
							if (selection.ToString() == group.Id)
							{
								categories.Add(group);
							}
						}
					}

					<tr>
						@if (!hideImage) {
							<td width="60" scope="row">
								<img src="@image" />
							</td>
						}
						@if (!hideProductNumber) {
							<td scope="row">@product.Number</td>
						}
						<td scope="row">@product.Name</td>
						@if (categories.Count > 0) {
							foreach (CategoryFieldViewModel category in categories) {
								foreach (var field in category.Fields)
								{
									bool noValues = false;
									if (field.Value.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>)) {
										System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
										noValues = values.Count > 0 ? false : true;
									} else if (string.IsNullOrEmpty(field.Value.Value.ToString())) {
										noValues = true;
									}

									if (!noValues) {
										<td>@RenderFieldValue(field.Value)</td>
                                    }
								}
							}
                        }
						@if (!hideStock) {
							<td>
								@if (@product.StockLevel > 0) {
									<span class="text-success">@Translate("In stock")</span>
								} else {
									<span class="text-danger">@Translate("Out of stock")</span>
								}
							</td>
						}
						<td align="right">
							<div itemprop="offers" itemscope itemtype="https://schema.org/Offer">
								<span itemprop="priceCurrency" content="@product.Price.CurrencyCode" class="d-none"></span>
				
								@if (showPricesWithVat == "false" && !neverShowVat) {
									<span itemprop="price" content="@product.Price.PriceWithoutVat" class="d-none"></span>
									if (product.Price.Price != product.PriceBeforeDiscount.Price) {
										<span class="text-decoration-line-through opacity-75 me-3">
											@product.PriceBeforeDiscount.PriceWithoutVatFormatted
										</span>
									}
								} else {
									<span itemprop="price" content="@product.Price.Price" class="d-none"></span>
									if (product.Price.Price != product.PriceBeforeDiscount.Price) {
										<span class="text-decoration-line-through opacity-75 me-3">
											@product.PriceBeforeDiscount.PriceFormatted
										</span>
									}
								}
			
								@if (showPricesWithVat == "false" && !neverShowVat) {
									<span class="text-price">@product.Price.PriceWithoutVatFormatted</span>
								} else {
									<span class="text-price">@product.Price.PriceFormatted</span>
								}
							</div>
							@if (showPricesWithVat == "false" && !neverShowVat) {
								<small class="opacity-85 fst-normal">@product.Price.PriceWithVatFormatted @Translate("Incl. VAT")</small>
							}
						</td>
						<td width="160" style="min-width: 160px" align="right">
							<form method="post" action="@url">
								<input type="hidden" name="redirect" value="false" />
								<input type="hidden" name="ProductId" value="@product.Id" />
								<input type="hidden" name="cartcmd" value="add" />

								@if (!string.IsNullOrEmpty(product.VariantId)) {
									<input type="hidden" name="VariantId" value="@product.VariantId" />
								}

								@if (quantitySelector) {
									<div class="flex-fill input-group input-primary-button-group d-flex flex-row">
										<input id="Quantity_@(product.Id)_@product.VariantId" name="Quantity" value="1" class="form-control" style="max-width: 100px" type="number">
										<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary flex-fill js-add-to-cart-button" title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)">@ReadFile(iconPath+"shopping-cart.svg")</button>
									</div>
								} else {
									<input id="Quantity_@(product.Id)_@product.VariantId" name="Quantity" value="1" type="hidden">
									<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary flex-fill js-add-to-cart-button" title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)">@ReadFile(iconPath+"shopping-cart.svg")</button>
                                }
							</form>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}


@helper RenderFieldValue(FieldValueViewModel field) { 
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";

	fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
	fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

	bool isColor = false;

	if (field.Value.GetType() == typeof(System.Collections.Generic.List<Dynamicweb.Ecommerce.ProductCatalog.FieldOptionValueViewModel>))
	{
		int valueCount = 0;
		System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
		int totalValues = values.Count;

		foreach (FieldOptionValueViewModel option in values)
		{
			if (option.Value.Substring(0,1) == "#") {
				isColor = true;   
			}

			if (!isColor) {
				@option.Name
			} else {
				<span class="colorbox-sm" style="background-color: @option.Value" title="@option.Value"></span>
			}
			
			if (valueCount != totalValues && valueCount < (totalValues - 1)) {
				if (isColor) {
<text> </text>
				} else {
<text>, </text>
				}
			}
			valueCount++;
		}
	}
	else if (fieldValue != "")
	{
		if (fieldValue.Substring(0,1) == "#") {
			isColor = true;   
		}

		if (!isColor) {
			@fieldValue
		} else {
			<span class="colorbox-sm" style="background-color: @fieldValue" title="@fieldValue"></span>
		}
	}
}
