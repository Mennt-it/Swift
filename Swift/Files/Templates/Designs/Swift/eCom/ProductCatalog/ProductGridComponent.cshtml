@inherits ViewModelTemplate<ProductListViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Environment

@functions {
	public ProductViewModel GetDummyProduct()
	{
		ProductViewModel product = new ProductViewModel();

		ProductViewModelSettings productSetting = new ProductViewModelSettings
		{
			LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
			CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
			CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
			ShopId = Pageview.Area.EcomShopId
		};

		if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
		{
			product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
		}
		else
		{
			product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetLastActiveProducts(1, Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
		}

		return product;
	}
}

@{
	string googleAnalyticsTrackingID = Pageview.AreaSettings.GetString("GoogleAnalyticsTrackingID");
	string googleAnalyticsMeasurementID = Pageview.AreaSettings.GetString("GoogleAnalyticsMeasurementID");
	var cookieOptInLevel = CookieManager.GetCookieOptInLevel();
	bool allowTracking = cookieOptInLevel == CookieOptInLevel.All || (cookieOptInLevel == CookieOptInLevel.Functional && CookieManager.GetCookieOptInCategories().Contains("Statistical"));

	int paragraphId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ParagraphId")) ? Convert.ToInt32(Dynamicweb.Context.Current.Request.Form.Get("ParagraphId")) : 0;
	var paragraph = Dynamicweb.Services.Paragraphs?.GetParagraph(paragraphId) ?? null;
	ParagraphInfoViewModel paragraphViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(paragraph);

	string contentPadding = paragraphViewModel.Item.GetRawValueString("ContentPadding");

	int listItemSourcePageId = paragraphViewModel.Item.GetInt32("ListComponentSource");
	var page = listItemSourcePageId != 0 ? Dynamicweb.Services.Pages.GetPage(listItemSourcePageId) : null;
}


@if (paragraphViewModel != null && page != null)
{
	if (Model.Products.Any() || Pageview.IsVisualEditorMode)
	{
		string gridColumnSize = paragraphViewModel.Item.GetRawValueString("GridLayout", "3");
		gridColumnSize = gridColumnSize == "2" ? "g-col-lg-6" : gridColumnSize;
		gridColumnSize = gridColumnSize == "3" ? "g-col-lg-4" : gridColumnSize;
		gridColumnSize = gridColumnSize == "4" ? "g-col-lg-3" : gridColumnSize;
		gridColumnSize = gridColumnSize == "5" ? "g-col-lg-2" : gridColumnSize;
		gridColumnSize = gridColumnSize == "1" ? "g-col-lg-12" : gridColumnSize;

		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page);
		string listItemTheme = " theme " + pageViewModel.Item.GetRawValueString("Theme", string.Empty).Replace(" ", "").Trim().ToLower();
		string listItemPadding = pageViewModel.Item.GetRawValueString("ContentPadding", string.Empty);
		string listItemPaddingClass = string.Empty;

		switch (listItemPadding)
		{
			case "small":
				listItemPaddingClass = " p-2 p-xl-3";
				break;
			case "large":
				listItemPaddingClass = " p-3 p-xl-4";
				break;
			case "small-x":
				listItemPaddingClass = " px-2 px-md-3";
				break;
			case "large-x":
				listItemPaddingClass = " px-3 px-md-4";
				break;
		}

		<div class="grid gap-3 @contentPadding">
			@foreach (ProductViewModel product in Model.Products)
			{
				string detailsPageLink = !string.IsNullOrEmpty(GetPageIdByNavigationTag("Shop").ToString()) ? GetPageIdByNavigationTag("Shop").ToString() : string.Empty;
				string selectedDetailPage = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(product.PrimaryOrDefaultGroup.Id)?.Meta.PrimaryPage ?? string.Empty;
				string detailsPageId = detailsPageLink != string.Empty ? detailsPageLink.Substring(detailsPageLink.LastIndexOf('=') + 1) : string.Empty;
				string selectedDetailPageId = selectedDetailPage != string.Empty ? selectedDetailPage.Substring(selectedDetailPage.LastIndexOf('=') + 1) : string.Empty;
				detailsPageId = string.IsNullOrEmpty(selectedDetailPage) ? detailsPageId : selectedDetailPageId;

				string variantIdForLink = !string.IsNullOrEmpty(product.VariantId) ? $"&VariantID={product.VariantId}" : "";
				variantIdForLink = string.IsNullOrEmpty(variantIdForLink) && !string.IsNullOrEmpty(product.DefaultVariantId) ? $"&VariantID={product.DefaultVariantId}" : variantIdForLink;

				string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
				link += $"&GroupID={product.PrimaryOrDefaultGroup.Id}";
				link += $"&ProductID={product.Id}";
				link += variantIdForLink;
				link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(link);

				string clickProductLink = string.Empty;
				if (!string.IsNullOrWhiteSpace(googleAnalyticsMeasurementID) && allowTracking)
				{
					clickProductLink = "onclick=\"return clickProductLink('" + @product.Id + "', '" + @product.Name + "', '" + @product.VariantName + "', '" + @product.Price.CurrencyCode + "', '" + @product.Price.Price + "')\"";
				}

				if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
				{
					Dynamicweb.Context.Current.Items["ProductDetails"] = product;
				}
				else
				{
					Dynamicweb.Context.Current.Items.Add("ProductDetails", product);
				}

				<div class="d-flex flex-column g-col-6 @gridColumnSize @listItemTheme @listItemPaddingClass position-relative">
					<a href="@link" class="stretched-link" @clickProductLink>
						<span class="visually-hidden">@product.Name</span>
					</a>
					@{
						@RenderGrid(listItemSourcePageId)
					}
				</div>
			}

			@if (!Model.Products.Any() || Pageview.IsVisualEditorMode)
			{
				if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
				{
					Dynamicweb.Context.Current.Items["ProductDetails"] = GetDummyProduct();
				}
				else
				{
					Dynamicweb.Context.Current.Items.Add("ProductDetails", GetDummyProduct());
				}

				for (int i = 0; i < 4; i++)
				{
					<div class="d-flex flex-column g-col-6 @gridColumnSize @listItemTheme @listItemPaddingClass position-relative">
						@{
							@RenderGrid(listItemSourcePageId)
						}
					</div>
				}
			}
		</div>
	}
}
else if (Pageview.IsVisualEditorMode == true)
{
	<div class="alert alert-dark" role="alert">
		<span>@Translate("Product component slider: The slider will be rendered here, if there is anything to show")</span>
	</div>
}

