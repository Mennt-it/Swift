@inherits ViewModelTemplate<ProductListViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Environment

@functions {
	public ProductViewModel GetDummyProduct()
	{
		ProductViewModel product = new ProductViewModel();

		ProductViewModelSettings productSetting = new ProductViewModelSettings
		{
			LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
			CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
			CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
			ShopId = Pageview.Area.EcomShopId
		};

		if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
		{
			product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
		}
		else
		{
			product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetLastActiveProducts(1, Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
		}

		return product;
	}
}

@{
	string googleAnalyticsTrackingID = Pageview.AreaSettings.GetString("GoogleAnalyticsTrackingID");
	string googleAnalyticsMeasurementID = Pageview.AreaSettings.GetString("GoogleAnalyticsMeasurementID");
	var cookieOptInLevel = CookieManager.GetCookieOptInLevel();
	bool allowTracking = cookieOptInLevel == CookieOptInLevel.All || (cookieOptInLevel == CookieOptInLevel.Functional && CookieManager.GetCookieOptInCategories().Contains("Statistical"));

	int paragraphId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ParagraphId")) ? Convert.ToInt32(Dynamicweb.Context.Current.Request.Form.Get("ParagraphId")) : 0;
	var paragraph = Dynamicweb.Services.Paragraphs?.GetParagraph(paragraphId) ?? null;
	ParagraphInfoViewModel paragraphViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(paragraph);

	string theme = !string.IsNullOrWhiteSpace(paragraphViewModel.Item.GetRawValueString("Theme")) ? " theme " + paragraphViewModel.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string contentPadding = paragraphViewModel.Item.GetRawValueString("ContentPadding");

	int listItemSourcePageId = paragraphViewModel.Item.GetInt32("ListComponentSource");
	var page = Dynamicweb.Services.Pages.GetPage(listItemSourcePageId);
}


@if (paragraphViewModel != null && page != null)
{
	if (Model.Products.Any())
	{
		int modelId = paragraphViewModel.ID;

		string navigationStyle = $"{paragraphViewModel.Item.GetRawValueString("NavigationStyle", "slider-nav-round")}";
		string navigationPlacement = $"{paragraphViewModel.Item.GetRawValueString("NavigationPlacement", "slider-nav-on-slides")}";
		string indicatorStyle = $"{paragraphViewModel.Item.GetRawValueString("IndicatorStyle", string.Empty)}";
		string revealSlides = paragraphViewModel.Item.GetRawValueString("RevealSlides", "no-reveal") == "reveal" ? "slider-item-reveal" : string.Empty;
		string sliderItemsGap = paragraphViewModel.Item.GetRawValueString("SliderItemsGap", "slider-item-gap") == "slider-item-nogap" ? "slider-item-nogap" : string.Empty;
		string navigationAlwaysVisible = (paragraphViewModel.Item.GetBoolean("NavigationAlwaysVisible")) ? "slider-nav-visible" : string.Empty;
		string navigationVisibleOnTouch = (paragraphViewModel.Item.GetBoolean("NavigationVisibleOnTouch")) ? "slider-nav-touch" : string.Empty;
		string navigationShowScrollbar = (paragraphViewModel.Item.GetBoolean("NavigationShowScrollbar")) ? "slider-nav-scrollbar" : string.Empty;
		string scrollBarForceMobile = (paragraphViewModel.Item.GetBoolean("NavigationShowScrollbar")) ? "--swiffy-slider-track-height:0.5rem !important;" : string.Empty;
		string navigationSmall = (paragraphViewModel.Item.GetBoolean("NavigationSmall")) ? "slider-nav-sm" : string.Empty;
		string navigationInvertColors = (paragraphViewModel.Item.GetBoolean("NavigationInvertColors")) ? "slider-nav-dark" : string.Empty;
		string navigationSlideEntirePage = (paragraphViewModel.Item.GetBoolean("NavigationSlideEntirePage")) ? "slider-nav-page" : string.Empty;
		string navigationNoLoop = (paragraphViewModel.Item.GetBoolean("NavigationNoLoop")) ? "slider-nav-noloop" : string.Empty;
		string indicatorsOutsideSlider = (paragraphViewModel.Item.GetBoolean("IndicatorsOutsideSlider") && indicatorStyle != string.Empty) ? "slider-indicators-outside" : string.Empty;
		string indicatorsHighlightActive = (paragraphViewModel.Item.GetBoolean("IndicatorsHighlightActive")) ? "slider-indicators-highlight" : string.Empty;
		string indicatorsInvertColors = (paragraphViewModel.Item.GetBoolean("IndicatorsInvertedColors")) ? "slider-indicators-dark" : string.Empty;
		string indicatorsVisibleOnSmallDevices = (paragraphViewModel.Item.GetBoolean("IndicatorsVisibleOnSmallDevices")) ? "slider-indicators-sm" : string.Empty;
		string animation = paragraphViewModel.Item.GetRawValueString("Animation", string.Empty) != string.Empty ? $"slider-nav-animation {paragraphViewModel.Item.GetRawValueString("Animation")}" : string.Empty;
		string autoplay = (paragraphViewModel.Item.GetBoolean("Autoplay")) ? "slider-nav-autoplay" : string.Empty;
		string autoplayInterval = paragraphViewModel.Item.GetRawValueString("AutoplayInterval", string.Empty);
		bool hideSliderNavigation = false;

		string gridColumnSize = paragraphViewModel.Item.GetRawValueString("SliderLayout", "3");
		int itemsShown = Convert.ToInt32(gridColumnSize);

		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page);
		string listItemTheme = " theme " + pageViewModel.Item.GetRawValueString("Theme", string.Empty).Replace(" ", "").Trim().ToLower();
		string listItemPadding = pageViewModel.Item.GetRawValueString("ContentPadding", string.Empty);
		string listItemPaddingClass = string.Empty;

		switch (listItemPadding)
		{
			case "small":
				listItemPaddingClass = " p-2 p-xl-3";
				break;
			case "large":
				listItemPaddingClass = " p-3 p-xl-4";
				break;
			case "small-x":
				listItemPaddingClass = " px-2 px-md-3";
				break;
			case "large-x":
				listItemPaddingClass = " px-3 px-md-4";
				break;
		}

		if (navigationStyle == "slider-nav-none")
		{
			hideSliderNavigation = true;
		}

		<div class="grid gap-0 @theme @contentPadding">
			<div id="slider_@(modelId)" class="g-col-12 swiffy-slider slider-item-show@(itemsShown) @(navigationStyle) @(revealSlides) @(navigationPlacement) @(navigationAlwaysVisible) @(navigationVisibleOnTouch) @(indicatorStyle) @(navigationShowScrollbar) @(navigationSmall) @(navigationInvertColors) @(indicatorsOutsideSlider) @(navigationNoLoop) @(indicatorsHighlightActive) @(indicatorsInvertColors) @(indicatorsVisibleOnSmallDevices) @(navigationSlideEntirePage)" style="--swiffy-slider-nav-light:var(--swift-foreground-color);--swiffy-slider-nav-dark:var(--swift-background-color);@(scrollBarForceMobile)">
				<ul class="slider-container">
					@foreach (ProductViewModel product in Model.Products)
					{
						string detailsPageLink = !string.IsNullOrEmpty(GetPageIdByNavigationTag("Shop").ToString()) ? GetPageIdByNavigationTag("Shop").ToString() : string.Empty;
						string selectedDetailPage = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(product.PrimaryOrDefaultGroup.Id)?.Meta.PrimaryPage ?? string.Empty;
						string detailsPageId = detailsPageLink != string.Empty ? detailsPageLink.Substring(detailsPageLink.LastIndexOf('=') + 1) : string.Empty;
						string selectedDetailPageId = selectedDetailPage != string.Empty ? selectedDetailPage.Substring(selectedDetailPage.LastIndexOf('=') + 1) : string.Empty;
						detailsPageId = string.IsNullOrEmpty(selectedDetailPage) ? detailsPageId : selectedDetailPageId;

						string variantIdForLink = !string.IsNullOrEmpty(product.VariantId) ? $"&VariantID={product.VariantId}" : "";
						variantIdForLink = string.IsNullOrEmpty(variantIdForLink) && !string.IsNullOrEmpty(product.DefaultVariantId) ? $"&VariantID={product.DefaultVariantId}" : variantIdForLink;

						string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
						link += $"&GroupID={product.PrimaryOrDefaultGroup.Id}";
						link += $"&ProductID={product.Id}";
						link += variantIdForLink;
						link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(link);

						string clickProductLink = string.Empty;
						if (!string.IsNullOrWhiteSpace(googleAnalyticsMeasurementID) && allowTracking)
						{
							clickProductLink = "onclick=\"return clickProductLink('" + @product.Id + "', '" + @product.Name + "', '" + @product.VariantName + "', '" + @product.Price.CurrencyCode + "', '" + @product.Price.Price + "')\"";
						}

						if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
						{
							Dynamicweb.Context.Current.Items["ProductDetails"] = product;
						}
						else
						{
							Dynamicweb.Context.Current.Items.Add("ProductDetails", product);
						}

						<li class="d-flex flex-column @listItemTheme @listItemPaddingClass">
							<a href="@link" class="stretched-link" @clickProductLink>
								<span class="visually-hidden">@product.Name</span>
							</a>
							@{
								@RenderGrid(listItemSourcePageId)
							}
						</li>
					}

					@if (!Model.Products.Any() && Pageview.IsVisualEditorMode)
					{
						if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
						{
							Dynamicweb.Context.Current.Items["ProductDetails"] = GetDummyProduct();
						}
						else
						{
							Dynamicweb.Context.Current.Items.Add("ProductDetails", GetDummyProduct());
						}

						for (int i = 0; i < 4; i++)
						{
							<li class="d-flex flex-column @listItemTheme @listItemPaddingClass">
								@{
									@RenderGrid(listItemSourcePageId)
								}
							</li>
						}
					}
				</ul>

				@if (!hideSliderNavigation)
				{
					<button type="button" title="@Translate("Previous slide")" class="slider-nav" style="z-index:2;">
						<span class="visually-hidden">@Translate("Previous slide")</span>
					</button>
					<button type="button" title="@Translate("Next slide")" class="slider-nav slider-nav-next" style="z-index:2;">
						<span class="visually-hidden">@Translate("Next slide")</span>
					</button>
				}

				@if (indicatorStyle != "slider-indicators-hidden")
				{
					bool isActive = true;
					int slideCount = 1;

					<div class="slider-indicators" style="z-index:2;">
						@foreach (var item in Model.Products)
						{
							<button @(isActive ? "class=\"active\"" : string.Empty) type="button" title='@Translate("Go to slide") @slideCount'>
								<span class="visually-hidden">@Translate("Go to slide") @slideCount</span>
							</button>
							{
								slideCount++;
							}
							isActive = false;
						}
					</div>
				}
			</div>
		</div>

		<script type="module">
			swiffyslider.initSlider(document.querySelector('#slider_@(modelId)'));
		</script>
	} else if (Pageview.IsVisualEditorMode) { 
		<div class="alert alert-dark" role="alert">
			<span>@Translate("Product component slider: The slider will be rendered here, if there is anything to show")</span>
		</div>
	}
} 
