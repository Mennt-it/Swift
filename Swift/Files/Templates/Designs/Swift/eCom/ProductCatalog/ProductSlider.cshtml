@inherits ViewModelTemplate<ProductListViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("LinkText")) ? Dynamicweb.Context.Current.Request.Form.Get("LinkText") : "";
	string layout = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Layout")) ? Dynamicweb.Context.Current.Request.Form.Get("Layout") : "";
	bool hideTitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("HideTitle")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form.Get("HideTitle")) : false;

	string headingTitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("HeadingTitle")) ? Dynamicweb.Context.Current.Request.Form.Get("HeadingTitle") : "";
	string headingSubtitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Subtitle")) ? Dynamicweb.Context.Current.Request.Form.Get("Subtitle") : "";

	string generalTheme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("GeneralTheme")) ? Dynamicweb.Context.Current.Request.Form.Get("GeneralTheme") : "";
	string ContentPadding = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ContentPadding")) ? Dynamicweb.Context.Current.Request.Form.Get("ContentPadding") : "";
	string alignMiddle = headingTitle == "" && headingSubtitle == "" ? " justify-content-center" : "";
}

@if (layout == "" || layout == "text-top")
{
	<div class="h-100 @ContentPadding@(generalTheme)">

	@if (headingTitle != "" && !hideTitle)
	{
		<div class="pb-2 pb-lg-4 d-flex">
			<div class="flex-fill">
				@RenderHeader(headingTitle, headingSubtitle)
			</div>
			@RenderDesktopLinkButton(headingTitle, headingSubtitle)
		</div>
	}

	@RenderSlider()
	@RenderMobileLinkButton(headingTitle, headingSubtitle)
	</div>
}

@if (layout == "text-left")
{
	string sliderColSize = "g-col";

	<div class="grid g-0 h-100 @ContentPadding@(generalTheme)" data-slider-layout="left">
		@if ((headingTitle != "" && hideTitle == false) || headingSubtitle != "" || linkText != "")
		{
			sliderColSize = "g-col-12 g-col-lg-8";

			<div class="g-col-12 g-col-lg-4">
				<div class="d-flex flex-row@(alignMiddle) h-100">
					<div class="mb-5 mb-lg-0">
						@RenderHeader(headingTitle, headingSubtitle)
						@RenderDesktopLinkButton(headingTitle, headingSubtitle)
					</div>
				</div>
			</div>
		}
		<div class="@sliderColSize">
			@RenderSlider()
		</div>
	</div>

	@RenderMobileLinkButton(headingTitle, headingSubtitle)
}

@if (layout == "text-right")
{
	string sliderColSize = "g-col";

	<div class="grid g-0 h-100 @ContentPadding@(generalTheme)" data-slider-layout="right">
		@if ((headingTitle != "" && !hideTitle) || headingSubtitle != "" || linkText != "")
		{
			sliderColSize = "g-col-12 g-col-lg-8";

			<div class="g-col-12 g-col-lg-4 order-1 order-lg-2">
				<div class="d-flex flex-row align-items-center@(alignMiddle) h-100">
					<div class="mb-5 mb-lg-0">
						@RenderHeader(headingTitle, headingSubtitle)
						@RenderDesktopLinkButton(headingTitle, headingSubtitle)
					</div>
				</div>
			</div>
		}
		<div class="@sliderColSize order-2 order-lg-1">
			@RenderSlider()
		</div>
	</div>

	@RenderMobileLinkButton(headingTitle, headingSubtitle)
}

@helper RenderSlider()
{

	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;
	bool hidePrice = anonymousUsersLimitations.Contains("price") && anonymousUser;	

	string detailsPageLink = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ProductDetailsPage")) ? Dynamicweb.Context.Current.Request.Form.Get("ProductDetailsPage") : "#";

	string ratio = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ImageAspectRatio")) ? Dynamicweb.Context.Current.Request.Form.Get("ImageAspectRatio") : "";
	string ratioCssClass = ratio != "" ? "ratio" : "";
	string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";

	string generalTheme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("GeneralTheme")) ? Dynamicweb.Context.Current.Request.Form.Get("GeneralTheme") : "";
	string theme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Theme")) ? Dynamicweb.Context.Current.Request.Form.Get("Theme") : "";
	string imageTheme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ImageTheme")) ? Dynamicweb.Context.Current.Request.Form.Get("ImageTheme") : "";
	string ContentPadding = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ContentPadding")) ? Dynamicweb.Context.Current.Request.Form.Get("ContentPadding") : "";

	string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	<div class="js-slider d-flex @generalTheme">
		@foreach (var product in Model.Products)
		{
			string link = "/Default.aspx?ID=" + detailsPageLink + "&amp;ProductID=" + product.Id;
			link += !string.IsNullOrEmpty(product.VariantId) ? "&amp;VariantID=" + product.VariantId : "";

			string imagePath = product?.DefaultImage.Value.ToString() ?? "";
			imagePath = "/Admin/Public/GetImage.ashx?image=" + imagePath + "&width=" + 350 + "&Format=WebP&Quality=70";


			<article>
				<a href="@link" class="text-decoration-none d-block h-100 no-outline">
					<div class="h-100 d-flex flex-column justify-content-between gap-3@(theme)">
						<div class="@(ratioCssClass)@(imageTheme)" style="@ratioVariable">
							<img loading="lazy" decoding="async" src="@imagePath" class="h-100 w-100 @ContentPadding" style="object-fit: contain;" alt="@product.Name" />
						</div>
						<div class="@ContentPadding flex-fill d-flex flex-column justify-content-between">
							<h3 class="h6 opacity-85">@product.Name @product.VariantId</h3>

							@if (!hidePrice) {
								<div>
									<p class="h6 m-0">
										@if (showPricesWithVat == "false" && !neverShowVat) {
											if (product.Price.Price != product.PriceBeforeDiscount.Price) {
												<span class="text-decoration-line-through opacity-75 me-1">
													@product.PriceBeforeDiscount.PriceWithoutVatFormatted
												</span>
											}
										} else {
											if (product.Price.Price != product.PriceBeforeDiscount.Price) {
												<span class="text-decoration-line-through opacity-75 me-1">
													@product.PriceBeforeDiscount.PriceFormatted
												</span>
											}
										}

										@if (showPricesWithVat == "false" && !neverShowVat) {
											<span class="text-price fw-bold">@product.Price.PriceWithoutVatFormatted</span>
										} else {
											<span class="text-price fw-bold">@product.Price.PriceFormatted</span>
										}
									</p>
									@if (showPricesWithVat == "false" && !neverShowVat) {
										<small class="opacity-85 fst-normal">@product.Price.PriceWithVatFormatted @Translate("Incl. VAT")</small>
									}
								</div>
							}
						</div>
					</div>
				</a>
			</article>
		}
	</div>
}

@helper RenderHeader(string headingTitle, string headingSubtitle)
{
	string titleFontSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("TitleFontSize")) ? Dynamicweb.Context.Current.Request.QueryString.Get("TitleFontSize") : "h3";
	string subtitleFontSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("SubtitleFontSize")) ? Dynamicweb.Context.Current.Request.QueryString.Get("SubtitleFontSize") : "fs-5";
	string maxWidth = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("TextReadability")) ? Dynamicweb.Context.Current.Request.QueryString.Get("TextReadability") : "";

	if (!string.IsNullOrEmpty(headingTitle))
	{
		<h2 class="@titleFontSize@(maxWidth)">@headingTitle</h2>
	}
	if (!string.IsNullOrEmpty(headingSubtitle))
	{
		<p class="@subtitleFontSize mb-2 mb-md-3@(maxWidth)">@headingSubtitle</p>
	}
}

@helper RenderDesktopLinkButton(string headingTitle, string headingSubtitle)
{
	string layout = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Layout")) ? Dynamicweb.Context.Current.Request.Form.Get("Layout") : "";
	string buttonStyle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ButtonStyle")) ? Dynamicweb.Context.Current.Request.Form.Get("ButtonStyle") : "btn-primary";
	string link = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Link")) ? Dynamicweb.Context.Current.Request.Form.Get("Link") : "";
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("LinkText")) ? Dynamicweb.Context.Current.Request.Form.Get("LinkText") : "";
	string marginTop = (headingTitle != "" || headingSubtitle != "") && layout != "" && layout != "text-top" ? " mt-4" : "";

	if (!string.IsNullOrEmpty(link) && !string.IsNullOrEmpty(linkText))
	{
		<div class="d-none d-lg-block">
			<a href="@(link)" class="btn @(buttonStyle) @(marginTop) mb-4">@linkText</a>
		</div>
	}
}

@helper RenderMobileLinkButton(string headingTitle, string headingSubtitle)
{
	string buttonStyle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ButtonStyle")) ? Dynamicweb.Context.Current.Request.Form.Get("ButtonStyle") : "btn-primary";
	string link = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Link")) ? Dynamicweb.Context.Current.Request.Form.Get("Link") : "";
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("LinkText")) ? Dynamicweb.Context.Current.Request.Form.Get("LinkText") : "";
	string marginTop = headingTitle != "" || headingSubtitle != "" ? " mt-4" : "";

	if (!string.IsNullOrEmpty(link) && !string.IsNullOrEmpty(linkText))
	{
		<div class="d-block d-lg-none">
			<a href="@(link)" class="btn @(buttonStyle) @(marginTop) mb-4 w-100">@linkText</a>
		</div>
	}
}
