@using Dynamicweb.Ecommerce.Frontend
@using System.Collections.Generic
@using System.Linq
@using System.Text.RegularExpressions
@using Dynamicweb.Ecommerce.International

@helper RenderCustomerAddress(OrderViewModel model) {
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(Model.CustomerCountryCode);
	string regionCode = GetRegionCode(Model.CustomerCountryCode, Model.CustomerRegion); 
	string regionName = GetRegionName(Model.CustomerCountryCode, Model.CustomerRegion);

	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", Model.CustomerName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", Model.CustomerFirstName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", Model.CustomerSurname, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", Model.CustomerCompany, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", Model.CustomerAddress, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", Model.CustomerAddress, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", Model.CustomerAddress2, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", Model.CustomerZip, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", Model.CustomerCity, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", regionCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", Model.CustomerCountryCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", Model.CustomerCountry, RegexOptions.IgnoreCase);
			
			@* Remove any bad placeholders the user may have submitted *@
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase); 
			addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			<div>@completeLine</div>
		}
	}
}

@helper RenderDeliveryAddress(OrderViewModel model) {
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(Model.DeliveryCountryCode);
	string regionCode = GetRegionCode(Model.DeliveryCountryCode, Model.DeliveryRegion); 
	string regionName = GetRegionName(Model.DeliveryCountryCode, Model.DeliveryRegion);

	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", Model.DeliveryName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", Model.DeliveryFirstName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", Model.DeliverySurname, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", Model.DeliveryCompany, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", Model.DeliveryAddress, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", Model.DeliveryAddress, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", Model.DeliveryAddress2, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", Model.DeliveryZip, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", Model.DeliveryCity, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", regionCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", Model.DeliveryCountryCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", Model.DeliveryCountry, RegexOptions.IgnoreCase);
			
			@* Remove any bad placeholders the user may have submitted *@
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase); 
			addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			<div>@completeLine</div>
		}
	}
}

@functions {
	
	public string GetRegionName(string countryCode, string regionValue)
	{
		return GetRegionNameOrCode(countryCode, regionValue);
	}

	public string GetRegionCode(string countryCode, string regionValue)
	{
		return GetRegionNameOrCode(countryCode, regionValue, "code");
	}

	public string GetRegionNameOrCode(string countryCode, string regionValue, string nameOrCode = "name")
	{
		CountryCollection allCountryRegions = Dynamicweb.Ecommerce.Services.Countries.GetRegions(countryCode);
		Country matchedRegion = allCountryRegions.FirstOrDefault(r => r.RegionCode == regionValue || r.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) == regionValue);

		if (matchedRegion == null) return regionValue;
		
		return nameOrCode == "name" ? matchedRegion.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) : matchedRegion.RegionCode;
	}

}
