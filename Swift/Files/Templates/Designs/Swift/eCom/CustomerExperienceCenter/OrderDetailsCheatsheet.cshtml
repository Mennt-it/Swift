@inherits ViewModelTemplate<OrderViewModel>
@using System.Globalization
@using System.Linq
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.Frontend
@using Dynamicweb.Ecommerce.Orders
@using Dynamicweb.Ecommerce.ProductCatalog

<section>
	<h2 class="mt-5">@Translate("Order Details Cheat Sheet")</h2>
	<h5>@Translate("Hover over text for more details")</h5>
	
	<h1 class="mt-5">@Translate("Order ID"): @Model.Id</h1>
	<table class="table table-clean table-hover table-bordered">
		<thead>
		<tr>
			<th rowspan="2">@Translate("Name")</th>
            <th rowspan="2">@Translate("Qty")</th>
            <th colspan="3" class="text-center">@Translate("Unit price")</th>
            <th colspan="3" class="text-center">@Translate("Total price")</th>
		</tr>
		<tr>
			<!--Unit price-->
            <th>@Translate("Without Discount")</th>
            <th>@Translate("Discount")</th>
            <th>@Translate("With Discount / Price")</th>
            <!--Total price-->
            <th>@Translate("Without Discount")</th>
            <th>@Translate("Discount")</th>
            <th>@Translate("With Discount / Price")</th>
		</tr>
		</thead>
		@foreach (var orderline in Model.OrderLines)
		{
			ProductViewModelSettings productSetting = new ProductViewModelSettings
			{
				LanguageId = orderline.ProductLanguageId,
				CurrencyCode = Model.Price.CurrencyCode,
				CountryCode = Model.DeliveryCountryCode,
				ShopId = Model.ShopId
			};
		
			var isDiscount = IsProductDiscountOrderline(orderline);
			var rowCssClass = isDiscount ? "bg-secondary text-white" : IsTaxOrderline(orderline) ? "bg-light text-dark" : "bg-primary text-white";

			<tr class="@rowCssClass">
				<td>@RenderOrderlineName(orderline)</td>
				<td>@orderline.Quantity</td>
				<!--Unit price-->
				<td>@RenderOrderlineUnitPriceWithoutDiscount(orderline)</td>
				<td>@RenderOrderlineUnitDiscount(orderline)</td>
				<td>@RenderOrderlineUnitPriceWithDiscount(orderline)</td>
				<!--Total price-->
				<td>@RenderOrderlineTotalPriceWithoutDiscount(orderline)</td>
				<td>@RenderOrderlineTotalDiscount(orderline)</td>
				<td>@RenderOrderlineTotalPriceWithDiscount(orderline)</td>
			</tr>
		}
		<tr>
			<td colspan="5">@Translate("Total of original price / Total product discounts / Total with all product discounts*")<br/><small>@Translate("*Price after product discounts, before order discounts, fees and taxes")</small></td>
			<td class="bg-success text-white">@RenderPrices(Model.TotalPriceWithoutDiscountsFeesAndTaxes, "Model.TotalPriceWithoutDiscountsFeesAndTaxes")</td>
			<td class="bg-danger text-white">@RenderPrices(Model.TotalProductDiscount, "Model.TotalProductDiscount")</td>
			<td class="bg-success text-white">@RenderPrices(Model.TotalPriceWithoutOrderDiscountsAndFeesAndTaxes, "Model.TotalPriceWithoutOrderDiscountsAndFeesAndTaxes")</td>
		</tr>

		<tr>
			<td colspan="6">
				<span>@Translate("Order discount total")</span>
				<br/>
				<small>@Translate("Sum of all order discounts (inclusive and exclusive)")</small>
				<br/>
                <small class="text-muted">(Model.TotalOrderDiscount)</small>
			</td>
			<td colspan="2" class="bg-warning text-dark" colspan="2">@RenderPrices(Model.TotalOrderDiscount, "Model.TotalOrderDiscount")</td>
		</tr>
		<tr>
			<td colspan="5">
				<span>@Translate("Sub totals")</span>
				<br/>
				<small>@Translate("Sum of all original prices, discounts and discounted price. Before fees and taxes")</small>
				<br/>
				<small class="text-muted">(Model.TotalPriceBeforeFeesAndTaxes)</small>
			</td>
			<td class="bg-dark text-white">@RenderPrices(Model.TotalPriceWithoutDiscountsFeesAndTaxes, "Model.TotalPriceWithoutDiscountsFeesAndTaxes")</td>
			<td class="bg-dark text-white">@RenderPrices(Model.TotalDiscount, "Model.TotalDiscount")</td>
			<td class="bg-dark text-white">@RenderPrices(Model.TotalPriceBeforeFeesAndTaxes, "Model.TotalPriceBeforeFeesAndTaxes")</td>
		</tr>
		<tr>
			<td colspan="7">
				<span>@Translate("Payment")</span>
				<br/>
				<small>@Model.PaymentMethod.Id</small>
			</td>
			<td>@RenderPrices(Model.PaymentFee, "Model.PaymentFee")</td>
		</tr>
		<tr>
			<td colspan="7">
				<span>@Translate("Shipping")</span>
				<br/>
				<small>@Model.ShippingMethod.Id</small>
			</td>
			<td>@RenderPrices(Model.ShippingFee, "Model.ShippingFee")</td>
		</tr>
		<tr>
			<td colspan="7">
				<span>@Translate("Taxes")</span>
				<br/>
				<small class="text-muted">(Model.TotalTaxes)</small>
			</td>
			<td>@RenderPrices(Model.TotalTaxes, "Model.TotalTaxes")</td>
		</tr>

		<tr>
			<td colspan="7">
				<span class="fw-bold">@Translate("Total")</span>
				<br>
				<small class="text-muted">(Model.Price)</small>
			</td>
			<td class="bg-info text-dark">@RenderPrices(Model.Price, "Model.Price")</td>
		</tr>
	</table>
	
	<table class="table table-bordered">
		<tr>
        	<td width="12.5%" class="bg-primary text-white"></td>
        	<td width="12.5%" class="bg-secondary text-white"></td>
        	<td width="12.5%" class="bg-light text-dark"></td>
        	<td width="12.5%" class="bg-danger text-white"></td>
        	<td width="12.5%" class="bg-warning text-dark"></td>
        	<td width="12.5%" class="bg-success text-white"></td>
        	<td width="12.5%" class="bg-dark text-white"></td>
        	<td width="12.5%" class="bg-info text-dark"></td>
        </tr>
		<tr>
			<td>@Translate("Product orderline")</td>
            <td>@Translate("Discount orderline")</td>
            <td>@Translate("Tax orderline")</td>
            <td>@Translate("Product discount price")</td>
            <td>@Translate("Order discount price")</td>
            <td>@Translate("Product price - with or without discount")</td>
            <td>@Translate("Subtotals of product prices, discounts and product prices with discount - before any fees")</td>
            <td>@Translate("Total order price with discounts, vat, taxes, fees and all.")</td>
		</tr>
	</table>
	
	<div class="grid">
		<div class="g-col-12 g-col-lg-6">
			<h2 class="mt-5">@Translate("Billing Address")</h2>
			<table class="table table-clean table-striped table-hover">
				@RenderTableRow(Model.CustomerName, "Model.CustomerName")
                @RenderTableRow(Model.CustomerFirstName, "Model.CustomerFirstName")
                @RenderTableRow(Model.CustomerMiddleName, "Model.CustomerMiddleName")
                @RenderTableRow(Model.CustomerSurname, "Model.CustomerSurname")
                @RenderTableRow(Model.CustomerInitials, "Model.CustomerInitials")
                @RenderTableRow(Model.CustomerTitle, "Model.CustomerTitle")
                @RenderTableRow(Model.CustomerPrefix, "Model.CustomerPrefix")
                @RenderTableRow(Model.CustomerAddress, "Model.CustomerAddress")
                @RenderTableRow(Model.CustomerAddress2, "Model.CustomerAddress2")
                @RenderTableRow(Model.CustomerHouseNumber, "Model.CustomerHouseNumber")
                @RenderTableRow(Model.CustomerCity, "Model.CustomerCity")
                @RenderTableRow(Model.CustomerRegion, "Model.CustomerRegion")
                @RenderTableRow(Model.CustomerZip, "Model.CustomerZip")
                @RenderTableRow(Model.CustomerCountry, "Model.CustomerCountry")
                @RenderTableRow(Model.CustomerCountryCode, "Model.CustomerCountryCode")
                @RenderTableRow(Model.CustomerCompany, "Model.CustomerCompany")
                @RenderTableRow(Model.CustomerEmail, "Model.CustomerEmail")
                @RenderTableRow(Model.CustomerPhone, "Model.CustomerPhone")
                @RenderTableRow(Model.CustomerCell, "Model.CustomerCell")
                @RenderTableRow("Customer.Fax")
			</table>
		</div>
		<div class="g-col-12 g-col-lg-6">
			<h2 class="mt-5">@Translate("Shipping/Delivery Address")</h2>
			<table class="table table-clean table-striped table-hover">
				@RenderTableRow(Model.DeliveryName, "Model.DeliveryName")
				@RenderTableRow(Model.DeliveryFirstName, "Model.DeliveryFirstName")
				@RenderTableRow(Model.DeliveryMiddleName, "Model.DeliveryMiddleName")
				@RenderTableRow(Model.DeliverySurname, "Model.DeliverySurname")
				@RenderTableRow(Model.DeliveryInitials, "Model.DeliveryInitials")
				@RenderTableRow(Model.DeliveryTitle, "Model.DeliveryTitle")
				@RenderTableRow(Model.DeliveryPrefix, "Model.DeliveryPrefix")
				@RenderTableRow(Model.DeliveryAddress, "Model.DeliveryAddress")
				@RenderTableRow(Model.DeliveryAddress2, "Model.DeliveryAddress2")
				@RenderTableRow(Model.DeliveryHouseNumber, "Model.DeliveryHouseNumber")
				@RenderTableRow(Model.DeliveryCity, "Model.DeliveryCity")
				@RenderTableRow(Model.DeliveryRegion, "Model.DeliveryRegion")
				@RenderTableRow(Model.DeliveryZip, "Model.DeliveryZip")
				@RenderTableRow(Model.DeliveryCountry, "Model.DeliveryCountry")
				@RenderTableRow(Model.DeliveryCountryCode, "Model.DeliveryCountryCode")
				@RenderTableRow(Model.DeliveryCompany, "Model.DeliveryCompany")
				@RenderTableRow(Model.DeliveryEmail, "Model.DeliveryEmail")
				@RenderTableRow(Model.DeliveryPhone, "Model.DeliveryPhone")
				@RenderTableRow(Model.DeliveryCell, "Model.DeliveryCell")
				@RenderTableRow("Delivery.Fax")
			</table>
		</div>
	</div>
	
	<h2 class="mt-5">@Translate("Payment method")</h2>
	<table class="table table-clean table-bordered table-striped">
		<thead>
			<tr>
				<th>@Translate("Icon")</th>
				<th>@Translate("Name")</th>
				<th>@Translate("Price")</th>
				<th>@Translate("Terms")</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td width="100">
					@if (!string.IsNullOrEmpty(Model.PaymentMethod.Icon) && !Model.PaymentMethod.Icon.Equals("/Files"))
					{
						<img width="100" src="@Model.PaymentMethod.Icon"/>
					}
				</td>
				<td>
					<h6>@Model.PaymentMethod.Name - @Model.PaymentMethod.Id</h6>
					<small><span class="fw-bold">@Translate("Description"):</span> @Model.PaymentMethod.Description</small><br/>
					<small><span class="fw-bold">@Translate("Code"):</span> @Model.PaymentMethod.Code</small>
				</td>
				<td>
					@RenderPrices(Model.PaymentFee, "Model.PaymentFee")
				</td>
				<td>
					<small><span class="fw-bold">@Translate("Code"):</span> @Model.PaymentMethod.TermsCode</small><br/>
					<small><span class="fw-bold">@Translate("Description"):</span> @Model.PaymentMethod.TermsDescription</small>
				</td>
			</tr>
		</tbody>
	</table>
	
	<h2 class="mt-5">@Translate("Shipping method")</h2>
	<table class="table table-clean table-bordered table-striped">
		<thead>
			<tr>
				<th>@Translate("Icon")</th>
				<th>@Translate("Name")</th>
				<th>@Translate("Price")</th>
				<th>@Translate("FreeFeeAmount")</th>
				<th>@Translate("PriceOverMaxWeight")</th>
				<th>@Translate("Agent")</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td width="100">
					@if (!string.IsNullOrEmpty(Model.ShippingMethod.Icon) && !Model.ShippingMethod.Icon.Equals("/Files"))
					{
						<img width="100" src="@Model.ShippingMethod.Icon"/>
					}
				</td>
				<td>
					<h6>@Model.ShippingMethod.Name - @Model.ShippingMethod.Id</h6>
					<small><span class="fw-bold">@Translate("Description"):</span> @Model.ShippingMethod.Description</small><br/>
					<small><span class="fw-bold">@Translate("Code"):</span> @Model.ShippingMethod.Code</small>
				</td>
				<td>
					@RenderPrices(Model.ShippingFee, "Model.ShippingFee")
				</td>
				<td>
					@Model.ShippingMethod.FreeFeeAmount
				</td>
				<td>
					@Model.ShippingMethod.PriceOverMaxWeight
				</td>
				<td>
					<small><span class="fw-bold">@Translate("Name"):</span> @Model.ShippingMethod.AgentName</small><br/>
					<small><span class="fw-bold">@Translate("Code"):</span> @Model.ShippingMethod.AgentCode</small><br/>
					<small><span class="fw-bold">@Translate("Service Code"):</span> @Model.ShippingMethod.AgentServiceCode</small><br/>
					<small><span class="fw-bold">@Translate("Service Description"):</span> @Model.ShippingMethod.AgentServiceDescription</small>
				</td>
			</tr>
		</tbody>
	</table>

	<div class="grid">
		<div class="g-col-12 g-col-lg-4">
			<h2 class="mt-5">@Translate("Payment Transaction Info")</h2>
			<table class="table table-clean table-striped table-hover">
				@RenderTableRow(Model.TransactionCardnumber, "Model.TransactionCardnumber")
				@RenderTableRow(Model.TransactionCardType, "Model.TransactionCardType")
				@RenderTableRow(Model.TransactionNumber, "Model.TransactionNumber")
				@RenderTableRow(Model.TransactionStatus, "Model.TransactionStatus")
			</table>
		</div>
		<div class="g-col-12 g-col-lg-8">
        	<h2 class="mt-5">@Translate("Track & Trace")</h2>
            <table class="table table-bordered table-clean">
                <thead>
	                <tr>
                		<th>@Translate("TrackTraceName")</th>
                		<th>@Translate("TrackTraceNumber")</th>
                		<th>@Translate("TrackTraceUrl")</th>
	                </tr>
                </thead>
                <tbody>
                	<tr>
	                    @*<td>@Model.TrackAndTraceName</td>
	                    <td>@Model.TrackAndTraceNumber</td>
                		<td>@Model.TrackAndTraceURL</td>*@
                	</tr>
                </tbody>
            </table>		
        </div>
	</div>
	
	<div class="grid">
		<div class="g-col-12">
        	<h2 class="mt-5">@Translate("Standard fields")</h2>
        </div>
		<div class="g-col-12 g-col-lg-4">
        	<table class="table table-striped table-clean table-hover">
                <tr>
                    <th>@Translate("SystemName")</th>
                    <th>@Translate("Value")</th>
                </tr>
                @RenderTableRow(Model.Id, "Model.Id")
                @RenderTableRow(Model.IntegrationOrderId, "Model.IntegrationOrderId")
                @RenderTableRow(Model.ParentOrderId, "Model.ParentOrderId")
                @RenderTableRow(Model.CustomerUserId, "Model.CustomerUserId")
                @RenderTableRow("Customer.AccessUserUserName")
                @RenderTableRow(Model.SecondaryUserId, "Model.SecondaryUserId")
                @RenderTableRow(Model.SecondaryUserName, "Model.SecondaryUserName")
                @RenderTableRow(Model.Reference, "Model.Reference")
                @RenderTableRow(Model.ShopId, "Model.ShopId")
                @RenderTableRow(Model.StateId, "Model.StateId")
                @RenderTableRow(Model.StateName, "Model.StateName")
                @RenderTableRow(Model.StateDescription, "Model.StateDescription")
                @RenderTableRow(Model.DisplayName, "Model.DisplayName")
                @RenderTableRow("SavedCardName")
            </table>		
        </div>
        <div class="g-col-12 g-col-lg-4">
        	<table class="table table-striped table-clean table-hover">
                <tr>
                    <th>@Translate("SystemName")</th>
                    <th>@Translate("Value")</th>
                </tr>
                @RenderTableRow(Model.CreatedAt, "Model.CreatedAt")
                @RenderTableRow(Model.Modified, "Model.Modified")
                @RenderTableRow(Model.CompletedDate, "Model.CompletedDate")
                @RenderTableRow(Model.ShippingDate, "Model.ShippingDate")
                @RenderTableRow("Delivery.isPickupPoint")
                @RenderTableRow(Model.CustomerComment, "Comment")
                @RenderTableRow("IsBasedOnRecurringOrder")
                @RenderTableRow("IsRecurringOrder")
                @RenderTableRow(Model.RecurringOrderId, "Model.RecurringOrderId")
                @RenderTableRow("PointsToUse")
                @RenderTableRow("RewardTotalPoints")
                @RenderTableRow("TotalPoints")
            </table>
        </div>
        <div class="g-col-12 g-col-lg-4">
        	<table class="table table-striped table-clean table-hover">
                <tr>
                    <th>@Translate("SystemName")</th>
                    <th>@Translate("Value")</th>
                </tr>
                @RenderTableRow(Model.Volume, "Model.Volume")
                @RenderTableRow(Model.Weight, "Model.Weight")
                @RenderTableRow(Model.CustomerAccepted, "Model.CustomerAccepted")
                @RenderTableRow(Model.CustomerEan, "Model.CustomerEan")
                @RenderTableRow(Model.CustomerRefId, "Model.CustomerRefId")
                @RenderTableRow(Model.VoucherCode, "Model.VoucherCode")
                @RenderTableRow("GiftCardCode")
            </table>
        </div>
	</div>

	<h2 class="mt-5">@Translate("Custom fields")</h2>
	<table class="table table-striped table-clean table-hover">
		<tr>
			<th>@Translate("Name")</th>
			<th>@Translate("SystemName")</th>
			<th>@Translate("Type")</th>
			<th>@Translate("Value")</th>
		</tr>
		@{
			foreach (var field in Model.OrderFields)
			{
				var orderFieldValue = field.Value?.Value?.ToString() ?? ""; 
				<tr>
					<td>@field.Value.Name</td>
					<td>@field.Value.SystemName</td>
					<td>@field.Value.Type</td>
					<td>@orderFieldValue</td>
				</tr>
			}
		}
	</table>
</section>

@helper RenderPrices(PriceViewModel price, string prefix)
{
	var isPriceZero = price.Price == 0.00;

	<div title="Property: @prefix.*" class="@(isPriceZero ? "opacity-50" : "")">
		<span class="fw-bold" title="@($"{prefix}.PriceFormatted = {price.PriceFormatted}\n{prefix}.Price = {price.Price}")">@price.PriceFormatted</span>
		
		@RenderPriceLine(prefix, "ShowPricesWithVat", price.ShowPricesWithVat.ToString())
		@RenderPriceLine(prefix, "PriceWithoutVatFormatted", price.PriceWithoutVatFormatted, "PriceWithoutVat", price.PriceWithoutVat)
		@RenderPriceLine(prefix, "PriceWithVatFormatted", price.PriceWithVatFormatted, "PriceWithVat", price.PriceWithVat)
		@RenderPriceLine(prefix, "VatFormatted", price.VatFormatted, "Vat", price.Vat)
		@RenderPriceLine(prefix, "VATPercentFormatted", price.VATPercentFormatted, "VATPercent", price.VATPercent)
	</div>
}

@helper RenderPriceLine(string prefix, string formattedPropertyName, string formattedPropertyValue, string propertyName = null, double propertyValue = default)
{
	var title = $"{prefix}.{formattedPropertyName} = {formattedPropertyValue}";
	if (!string.IsNullOrEmpty(propertyName) && propertyValue != default)
	{
		title += $"\n{prefix}.{propertyName} = {propertyValue.ToString(CultureInfo.InvariantCulture)}";
	}

	<br />
	<small title="@title" class="text-muted">
		<span class="fw-bold">@formattedPropertyName:</span> @formattedPropertyValue
	</small>
}

@helper RenderTableRow(object propertyValue, string propertyName)
{
	var value = propertyValue != null ? propertyValue.ToString() : "";
	
	<tr>
		<th>@propertyName</th>
		<td>@value</td>
	</tr>
}

@helper RenderPrices(string tag)
{
	var title = $"GetString(\'{tag}')";
	<div>
        <small title="@title" class="text-danger">@Translate("Missing in ViewModel")</small>
	</div>
}

@helper RenderTableRow(string propertyValue)
{
	<tr>
		<th>
			<small class="text-danger">@($"GetString(\"Ecom:Order.{propertyValue}\")")</small>
		</th>
		<td class="text-danger">@Translate("Missing in ViewModel")</td>
	</tr>
}

@helper RenderOrderlineName(OrderLineViewModel orderline)
{
	var isChildOrderline = !string.IsNullOrEmpty(orderline.ParentLineId); 
	var innerPadding = isChildOrderline ? "ps-4" : "";
	
	<div class="@innerPadding">
		@if (IsDiscountOrderline(orderline))
		{
			<span>@Translate("DISCOUNT"): </span>
		}
						
		<span>@orderline.ProductName</span>
		@if (!string.IsNullOrEmpty(orderline.ProductNumber))
		{
			var productNumber = orderline.ProductNumber;
			if (!string.IsNullOrEmpty(orderline.ProductVariantName))
			{
				productNumber += $" - {orderline.ProductVariantName}";
			}
			<br/>
			<small>@productNumber</small>
		}
		
		<br/>
		<small class="text-muted"><span class="fw-bold">@Translate("Orderline Id"):</span> @orderline.Id</small>
		
		<br/>
		<small class="text-muted"><span class="fw-bold">@Translate("Orderline type"):</span> @orderline.OrderLineType (@orderline.OrderLineType.GetHashCode())</small>
		
		@if (isChildOrderline)
		{
			<br/>
			<small class="text-muted"><span class="fw-bold">@Translate("Parent Orderline Id"):</span> @orderline.ParentLineId</small>
		}
	</div>
}

@helper RenderOrderlineUnitPriceWithoutDiscount(OrderLineViewModel orderline)
{
	if (IsDiscountOrderline(orderline) || IsTaxOrderline(orderline))
	{
		<small class="text-muted">@Translate("Same as") <span class="fw-bold">@Translate("With Discount / Price")</span></small>
	}
	else
	{
		@RenderPrices(orderline.UnitPrice, "OrderLineViewModel orderline.UnitPrice")
	}
}

@helper RenderOrderlineUnitDiscount(OrderLineViewModel orderline)
{
	if (IsDiscountOrderline(orderline) || IsTaxOrderline(orderline))
	{
		<small class="text-muted">@Translate("Not applicable")</small>
	}
	else
	{
		@RenderPrices(orderline.UnitDiscount, "OrderLineViewModel orderline.UnitDiscount")
	}
}

@helper RenderOrderlineUnitPriceWithDiscount(OrderLineViewModel orderline)
{
	@RenderPrices(orderline.UnitPriceWithProductDiscount, "OrderLineViewModel orderline.UnitPriceWithProductDiscount")
}

@helper RenderOrderlineTotalPriceWithoutDiscount(OrderLineViewModel orderline)
{
	if (IsDiscountOrderline(orderline) || IsTaxOrderline(orderline))
	{
		<small class="text-muted">@Translate("Same as") <span class="fw-bold">@Translate("With Discount / Price")</span></small>
	}
	else
	{
		@RenderPrices(orderline.Price, "OrderLineViewModel orderline.Price")
	}
}

@helper RenderOrderlineTotalDiscount(OrderLineViewModel orderline)
{
	if (IsDiscountOrderline(orderline) || IsTaxOrderline(orderline))
	{
		<small class="text-muted">@Translate("Not applicable")</small>
	}
	else
	{
		@RenderPrices(orderline.TotalDiscount, "OrderLineViewModel orderline.TotalDiscount")
	}
}

@helper RenderOrderlineTotalPriceWithDiscount(OrderLineViewModel orderline)
{
	@RenderPrices(orderline.TotalPriceWithProductDiscounts, "OrderLineViewModel orderline.TotalPriceWithProductDiscounts")
}

@functions
{
	public static bool IsDiscountOrderline(OrderLineViewModel orderline)
	{
		return IsOrderDiscountOrderline(orderline) || IsProductDiscountOrderline(orderline);
	}
	
	public static bool IsOrderDiscountOrderline(OrderLineViewModel orderline)
	{
		return orderline.OrderLineType == OrderLineType.Discount;
	}
	
	public static bool IsProductDiscountOrderline(OrderLineViewModel orderline)
	{
		return orderline.OrderLineType == OrderLineType.ProductDiscount;
	}
	
	public static bool IsTaxOrderline(OrderLineViewModel orderline)
	{
		return orderline.OrderLineType == OrderLineType.Tax;
	}
}
