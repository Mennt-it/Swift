@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.Frontend
@using Dynamicweb.Ecommerce.ProductCatalog
@inherits ViewModelTemplate<FavoriteListViewModel>

@{
	string detailsPageLink = Pageview.CurrentParagraph.Item["ProductDetailsPage"] != null ? Pageview.CurrentParagraph.Item["ProductDetailsPage"].ToString() : "";
	int favoriteListId = Model.Id;
	string currentPageUrl = "/Default.aspx?ID=" + Pageview.Page.ID + "&FavoriteListId=" + favoriteListId;
	int listItemsCount = Model.ProductList.TotalProductsCount;
	string productCountLabel = listItemsCount > 1 ? Translate("products") : Translate("product");
	int pageSize = Model.ProductList.PageSize;
	int userId = Pageview.User.ID;
}

<header class="p-3 border-bottom">
	<div class="d-flex flex-row align-items-center gap-3">
		<h1 class="h6 m-0 flex-fill opacity-75">
			@Model.Name
			@if(Model.IsDefault){
				<small class="badge rounded-pill bg-info text-dark">@Translate("default")</small>
			}
		</h1>
		<span class="small text-end">@listItemsCount @productCountLabel <span class="d-none d-sm-inline">@Translate("in this list")</span></span>
	</div>
</header>

@if (Model.ProductList != null)
{
	<div class="grid grid-2 grid-lg-3 grid-xxl-4 p-3">
		@foreach (var product in Model.ProductList.Products)
		{
			string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
			bool anonymousUser = Pageview.User == null;
			bool hidePrice = anonymousUsersLimitations.Contains("price") && anonymousUser;

			string link = $"{detailsPageLink}&groupid={product.PrimaryOrDefaultGroup.Id}&productid={product.Id}";
			link += !string.IsNullOrEmpty(product.VariantId) ? "&variantid=" + product.VariantId : "";
			string price = product?.Price?.PriceFormatted ?? "";
			string priceId = "ProductPrice_" + product.Id + product.VariantId;

			string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
			bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);


			string productImage = "/Admin/Public/GetImage.ashx?Image=" + @product.DefaultImage.Value + "&Format=webp&Width=450&Height=450";

			<article class="position-relative d-flex flex-column gap-3">
				<div class="position-absolute top-0 end-0 my-3" style="z-index: 2">
					@RenderPartial("Components/ToggleFavorite.cshtml", product)
				</div>
				<div class="image">
					<div class="ratio ratio-1x1">
						@if (product.DefaultImage.Value != "")
						{
							<a href="@link" class="d-flex justify-content-center align-items-center">
								<img
									src="@productImage"
									width="450"
									loading="lazy"
									decoding="async"
									class="mw-100 mh-100 p-2 p-lg-3"
									alt="@product.Name">
							</a>
						}
						else
						{
							<a href="@link" class="d-block h-100 w-100">
								<div class="d-block h-100 w-100" style="background-color: var(--bs-gray-200);"></div>
							</a>
						}
					</div>
				</div>

				<div class="name flex-fill">@product.Name</div>
			
				@if (!hidePrice) { 
					<div class="product-list-item__price">
						<div>
							@if (showPricesWithVat == "false" && !neverShowVat) {
								if (product.Price.Price != product.PriceBeforeDiscount.Price) {
									<span class="text-decoration-line-through opacity-75 me-1">
										@product.PriceBeforeDiscount.PriceWithoutVatFormatted
									</span>
								}
							} else {
								if (product.Price.Price != product.PriceBeforeDiscount.Price) {
									<span class="text-decoration-line-through opacity-75 me-1">
										@product.PriceBeforeDiscount.PriceFormatted
									</span>
								}
							}

							@if (showPricesWithVat == "false" && !neverShowVat) {
								<span class="text-price fw-bold" id="@priceId">@product.Price.PriceWithoutVatFormatted</span>
							} else {
								<span class="text-price fw-bold" id="@priceId">@product.Price.PriceFormatted</span>
							}
						</div>
						@if (showPricesWithVat == "false" && !neverShowVat) {
							<small class="opacity-85 fst-normal">@product.Price.PriceWithVatFormatted @Translate("Incl. VAT")</small>
						}
					</div>
				}
			</article>
		}
	</div>

	if (listItemsCount > pageSize) {
	<div class="p-3">
		@RenderPagination(currentPageUrl, Model.ProductList.PageCount, Model.ProductList.CurrentPage, Model.ProductList.PageSize)	
	</div>
	}
}

@helper RenderPagination(string currentPageLink, int pageCount, int currentPage, int pageSize)
{
	<ul class="pagination m-0">
		@{string pageHrefTemplate = string.Format("<a class=\"page-link\" href=\"{0}&PageNum={{0}}&PageSize={{1}}\">{{0}}</a>", currentPageLink);}
		@for (int i = 1; i <= pageCount; i++)
		{
			var css = i == currentPage
				? "page-item active"
				: "page-item";
			<li class="@css">
				@string.Format(pageHrefTemplate, i, pageSize)
			</li>
		}
	</ul>
}

 @* Favorite toast *@
<div aria-live="polite" aria-atomic="true"> 
	<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11"> 
		<div id="favoriteNotificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true"> 
			<div class="toast-header"> 
				<strong class="me-auto">@Translate("Favorite list updated")</strong> 
				<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button> 
			</div> 
			<div class="toast-body d-flex gap-3"> 
				<img id="favoriteNotificationToast_Image" src="" /> 
				<div id="favoriteNotificationToast_Text"></div> 
			</div> 
		</div> 
	</div> 
</div> 
