@using Dynamicweb.Ecommerce.Frontend
@using System.Collections.Generic
@using System.Linq
@using System.Text.RegularExpressions
@using Dynamicweb.Ecommerce.International

@helper RenderCustomerAddress() {
	string countryCode = GetCountryCode(GetString("CustomerCountry"));
	string countryName = Dynamicweb.Ecommerce.Services.Countries.GetCountry(countryCode) != null ? Dynamicweb.Ecommerce.Services.Countries.GetCountry(countryCode).GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) : "";
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(countryCode);
	string regionCode = GetRegionCode(countryCode, GetString("CustomerRegion")); 
	string regionName = GetRegionName(countryCode, GetString("CustomerRegion"));

	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", GetString("CustomerName"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", GetString("CustomerFirstName"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", GetString("CustomerSurname"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", GetString("CustomerCompany"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", GetString("CustomerAddress"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", GetString("CustomerAddress"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", GetString("CustomerAddress2"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", GetString("CustomerZip"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", GetString("CustomerCity"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", regionCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", countryCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", countryName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", GetString("CustomerPhone"), RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			<div>@completeLine</div>
		}
	}
}

@helper RenderDeliveryAddress() {
	string countryCode = GetCountryCode(GetString("CustomerCountry"));
	string countryName = Dynamicweb.Ecommerce.Services.Countries.GetCountry(countryCode) != null ? Dynamicweb.Ecommerce.Services.Countries.GetCountry(countryCode).GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) : "";
	List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(countryCode);
	string regionCode = GetRegionCode(countryCode, GetString("DeliveryRegion")); 
	string regionName = GetRegionName(countryCode, GetString("DeliveryRegion"));

	foreach (List<string> addressLine in addressFormat)
	{
		for (var i = 0; i < addressLine.Count; i++)
		{
			addressLine[i] = Regex.Replace(addressLine[i], "{name}", GetString("DeliveryName"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", GetString("DeliveryFirstName"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", GetString("DeliverySurname"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{company}", GetString("DeliveryCompany"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address}", GetString("DeliveryAddress"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address1}", GetString("DeliveryAddress"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{address2}", GetString("DeliveryAddress2"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{zip}", GetString("DeliveryZip"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{city}", GetString("DeliveryCity"), RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", regionCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", countryCode, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{country}", countryName, RegexOptions.IgnoreCase);
			addressLine[i] = Regex.Replace(addressLine[i], "{phone}", GetString("DeliveryPhone"), RegexOptions.IgnoreCase);
		}
		var completeLine = string.Join(string.Empty, addressLine.ToArray());
		if (!string.IsNullOrWhiteSpace(completeLine))
		{
			<div>@completeLine</div>
		}
	}
}

@functions {

	public string GetCountryCode(string countryValue)
	{
		CountryCollection allCountries = Dynamicweb.Ecommerce.Services.Countries.GetCountries();
		Country matchedCountry = allCountries.FirstOrDefault(c => c.Code2 == countryValue || c.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) == countryValue);

		return matchedCountry != null ? matchedCountry.Code2 : countryValue;
	}
	
	public string GetRegionName(string countryCode, string regionValue)
	{
		return GetRegionNameOrCode(countryCode, regionValue);
	}

	public string GetRegionCode(string countryCode, string regionValue)
	{
		return GetRegionNameOrCode(countryCode, regionValue, "code");
	}

	public string GetRegionNameOrCode(string countryCode, string regionValue, string nameOrCode = "name")
	{
		CountryCollection allCountryRegions = Dynamicweb.Ecommerce.Services.Countries.GetRegions(countryCode);
		Country matchedRegion = allCountryRegions.FirstOrDefault(r => r.RegionCode == regionValue || r.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) == regionValue);

		if (matchedRegion == null) return regionValue;
		
		return nameOrCode == "name" ? matchedRegion.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) : matchedRegion.RegionCode;
	}

}
