@inherits ViewModelTemplate<ListEditorViewModel<string>>
@using Dynamicweb.Rendering
@using Dynamicweb.Content.Items.Rendering

@functions
{
	private Dynamicweb.Frontend.ItemViewModel GetFontParagraph(int id)
	{
		var paragraph = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(Dynamicweb.Services.Paragraphs.GetParagraph(id))?.Item;
		return paragraph;
	}
}

@{
	string editorId = Model.EditorId;

	int pageId = Dynamicweb.Context.Current.Request["PageId"] != null ? Convert.ToInt32(Dynamicweb.Context.Current.Request["PageId"]) : 0;
	pageId = pageId == 0 ? Convert.ToInt32(Dynamicweb.Context.Current.Request["ID"]) : pageId;
	var websiteArea = Dynamicweb.Services.Pages?.GetPage(pageId).Area;
	var websiteAreaId = websiteArea != null ? websiteArea.ID : 0;
	int brandingPageId = websiteArea != null ? Convert.ToInt32(websiteArea.Item["BrandingPage"]) : 0;
	int themePageId = websiteArea != null ? Convert.ToInt32(websiteArea.Item["ThemesPage"]) : 0;
	var fontsPage = Dynamicweb.Services.Pages?.GetPageByNavigationTag(websiteAreaId, "FontsPage") ?? null;
	int fontsPageId = fontsPage is object ? fontsPage.ID : 0;
	bool hasFontsPage = fontsPage is object;
	bool hasFonts = hasFontsPage ? Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(fontsPageId).Count() > 0 : false;

	var brandingPage = Dynamicweb.Services.Pages?.GetPage(brandingPageId) ?? null;
	var themesParagraphLastChanged = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(themePageId).OrderByDescending(p => p.Audit.LastModifiedAt).FirstOrDefault();

	var fontsParagraphLastChanged = hasFontsPage && hasFonts ? Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(fontsPageId).OrderByDescending(p => p.Audit.LastModifiedAt).FirstOrDefault() : null;

	var cssStyleFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("~/Files/Templates/Designs/Swift/Assets/css/styles.css"));
	var cssLastModified = brandingPage.Audit.LastModifiedAt;
	if (hasFontsPage && hasFonts)
	{
		cssLastModified = brandingPage.Audit.LastModifiedAt > fontsParagraphLastChanged?.Audit.LastModifiedAt ? brandingPage.Audit.LastModifiedAt : fontsParagraphLastChanged.Audit.LastModifiedAt;
	}

	Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_styles_{websiteArea}.min.css?{cssLastModified.Ticks}; rel=preload; as=style;");

}

@* Swift styles *@
<link href="/Files/Templates/Items/Swift_Styles.css" rel="stylesheet" media="all" type="text/css">

@* Branding and Themes min stylesheet *@
<link href="/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_styles_@(websiteAreaId).min.css?@(cssLastModified.Ticks)" rel="stylesheet" media="all" type="text/css" data-last-modified-content="@cssLastModified">

<style>
	.swift-font-grid {
		display: flex;
		flex-wrap: wrap;
		gap: 0.75rem;
		margin-bottom: 2rem;
	}

	.swift-brand-option {
		padding: 1em;
		cursor: pointer;
		box-sizing: border-box;
		height: 100%;
		display: flex;
		flex-direction: column;
	}

	.swift-brand-label {
		display: block;
		background-color: #F7F7F7;
		height: 100%;
	}

		.swift-brand-label .swift-brand-option {
			border: 4px solid #F7F7F7;
		}

	.swift-brand-input:checked ~ .swift-brand-label .swift-brand-option {
		border: 4px solid #0085CA;
	}

	.swift-brand {
		text-align: center;
		min-width: 80px;
		max-width: 200px;
	}
</style>

<div class="brand swift-font-grid" style="width: calc(100% - 40px)">
	@if (Model.Options.Count > 0)
	{
		<div class="swift-brand">
			<input class="swift-brand-input" type="radio" id="@(editorId)_empty" name="@editorId" value="" @(Model.SelectedValue == "" ? "checked" : "") style="display: none" />
			<label class="swift-brand-label" for="@(editorId)_empty">
				<div class="swift-brand-option">
					<div style="display:flex;align-items:center;justify-content:center;height:100%;flex-direction:column;gap:.5rem;text-align:center;">
						<div style="font-size:20px">X</div>
					</div>
				</div>
			</label>
		</div>

		foreach (var option in Model.Options)
		{

			var font = GetFontParagraph(Dynamicweb.Core.Converter.ToInt32(option.Value));
			string name = option.Name.Replace(" ", string.Empty).Trim();

			<div class="swift-brand">
				<input class="swift-brand-input" type="radio" id="@(editorId)_@(name)_@(option.Value)" name="@editorId" value="@option.Value" @(Model.SelectedValue == option.Value.ToString().Replace(" ", "+") ? "checked" : "") style="display: none" />
				<label class="swift-brand-label" for="@(editorId)_@(name)_@(option.Value)">
					<div class="swift-brand-option">
						<div style="display:flex;align-items:center;justify-content:space-between;height:100%;flex-direction:column;gap:.5rem;text-align:center;">
							<div class="fs-5" style="font-family:'@(font.GetString("FontFamilyName"))';font-weight:@(font.GetString("FontWeight")); font-style:@(font.GetString("FontStyle")); line-height:1.5;">The quick, brown fox jumps over a lazy dog</div>
							<div>
								<div>@font.GetString("FontFamilyName") <small>(@font.GetRawValueString("FontWeight", string.Empty), @font.GetRawValueString("FontStyle", string.Empty))</small></div>
							</div>
						</div>
					</div>
				</label>
			</div>
		}
	}

	@if (Model.Options.Count == 0)
	{
		<div class="swift-alert">@Translate("No custom fonts found. Add custom fonts to fonts collection located at Swift tools > Design > Custom fonts")</div>
	}
</div>
