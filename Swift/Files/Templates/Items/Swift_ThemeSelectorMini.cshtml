@inherits ViewModelTemplate<ListEditorViewModel<string>>
@using Dynamicweb.Rendering
@using Dynamicweb.Content.Items.Rendering

@{ 
	string editorId = Model.EditorId;

	int pageId = Dynamicweb.Context.Current.Request["PageId"] != null ? Convert.ToInt32(Dynamicweb.Context.Current.Request["PageId"]) : 0;
	pageId = pageId == 0 ? Convert.ToInt32(Dynamicweb.Context.Current.Request["ID"]) : pageId;
	var websiteArea = (pageId > 0) ? Dynamicweb.Services.Pages?.GetPage(pageId)?.Area : Dynamicweb.Services.Areas?.GetArea(Convert.ToInt32(Dynamicweb.Context.Current.Request["AreaID"]));
	var websiteAreaId = websiteArea != null ? websiteArea.ID : 0;
	int brandingPageId = websiteArea != null ? Convert.ToInt32(websiteArea.Item["BrandingPage"]) : 0;
	int themePageId = websiteArea != null ? Convert.ToInt32(websiteArea.Item["ThemesPage"]) : 0;

	var brandingPage = Dynamicweb.Services.Pages?.GetPage(brandingPageId) ?? null;
	var themesParagraphLastChanged = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(themePageId).OrderByDescending(p => p.Audit.LastModifiedAt).FirstOrDefault();

	var cssLastModified = brandingPage.Audit.LastModifiedAt > themesParagraphLastChanged.Audit.LastModifiedAt ? brandingPage.Audit.LastModifiedAt : themesParagraphLastChanged.Audit.LastModifiedAt;
}

@* Swift styles *@
<link href="~/Files/Templates/Items/Swift_Styles.css" rel="stylesheet" media="all" type="text/css">

@* Branding and Themes min stylesheet *@
<link href="~/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_styles_@(websiteAreaId).min.css?@(cssLastModified.Ticks)" rel="stylesheet" media="all" type="text/css" data-last-modified-content="@cssLastModified">

<style>
	.swift-checkered {
		background-image: linear-gradient(45deg, #a7a9ac 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #a7a9ac 75%), linear-gradient(45deg, transparent 75%, #a7a9ac 75%), linear-gradient(45deg, #a7a9ac 25%, #bcbec0 25%);
		background-size: 20px 20px;
		background-position: 0 0, 0 0, -10px -10px, 10px 10px;
	}

	.swift-option-label .swift-theme-option {
		border: 4px solid #F7F7F7;
	}

	.swift-option-input:checked ~ .swift-option-label .swift-theme-option {
		border: 4px solid #0085CA;
	}
</style>

<div class="brand" style="display: flex; flex-wrap: wrap; gap: 0.5em;">
	@if (Model.Items is object) {
		foreach(var item in Model.Items){
			string themeName = !string.IsNullOrWhiteSpace(item.GetString("Name")) ? item.GetString("Name") : "Default";
			string themeClassName = !string.IsNullOrWhiteSpace(item.GetString("CSSClassName")) ? item.GetString("CSSClassName").Replace(" ", "").Trim().ToLower() : "";
			string selectedBorder = Model.SelectedValue == themeClassName ? "selected-option" : "";
			var itemValue = Model.Options.SingleOrDefault(o => new string[]{item.ParagraphID.ToString(), item.GetString("CSSClassName")}.Contains(o.Value.ToString()))?.Value ?? null;

			<div title="@themeName" style="display: flex;">
				@if (themeClassName != "") {
					<input class="swift-option-input" type="radio" id="@(editorId)_@themeClassName" name="@editorId" value="@itemValue" checked="@(Model.SelectedValue == itemValue?.ToString())" style="display: none">
					<label class="swift-option-label swift-checkered @selectedBorder" for="@(editorId)_@themeClassName" style="display: flex; width: 120px">
						<div class="swift-theme-option theme @themeClassName" style="display: flex; flex-direction: column; row-gap: 1em; padding: 1em; cursor: pointer; width: 120px;">
							<div style="text-align: center; overflow-wrap: break-word; flex-grow: 1; display: flex; align-items: start; justify-content: center;">
								<span>@themeName</span>
							</div>
							<div style="display: flex; align-items: center; justify-content: center; column-gap: 8px;">
								<span title="Foreground color" style="width: 1.5em; height: 1.5em; border-radius: 50em; background-color: var(--swift-foreground-color)"></span>
								@if (item.GetString("AccentColor") != string.Empty)
								{ 
									<span title="Accent color" style="width: 1.5em; height: 1.5em; border-radius: 50em; background-color: var(--swift-accent-color)"></span>
								}
								@if (item.GetString("BorderColor") != string.Empty)
								{ 
									<span title="Border color" style="width: 1.5em; height: 1.5em; border-radius: 50em; box-shadow: inset 0 0 0 2px var(--swift-border-color)"></span>
								}
							</div>
							<div style="display:flex; flex-direction: column; align-items: center; row-gap: 8px;">
								<div title="Primary button" class="btn-primary" style="display: flex; align-items: center; justify-content: center; width: 4em; height: 1.5em;">
									<svg width="12" height="2" viewBox="0 0 12 2"><rect width="12" height="2" fill="currentColor" /></svg>
								</div>
								<div title="Secondary button" class="btn-secondary"style="display: flex; align-items: center; justify-content: center; width: 4em; height: 1.5em;">
									<svg width="12" height="2" viewBox="0 0 12 2"><rect width="12" height="2" fill="currentColor" /></svg>
								</div>
								<div title="Link button" class="btn-link" style="display: flex; align-items: center; justify-content: center; width: 4em; height: 1.5em;">
									<svg width="12" height="2" viewBox="0 0 12 2"><rect width="12" height="2" fill="currentColor" /></svg>
								</div>
							</div>
						</div>
					</label>
				} else {
					<input class="swift-option-input" type="radio" id="@(editorId)_@themeClassName" name="@editorId" value="@itemValue" @(Model.SelectedValue == itemValue.ToString() || Model.SelectedValue == string.Empty ? "checked" : "") style="display: none">
					<label class="swift-option-label swift-no-theme @selectedBorder" for="@(editorId)_@themeClassName" style="display:flex; width:120px">
						<div class="swift-theme-option" style="display: flex; align-items: center; justify-content: center; padding: 1em; cursor: pointer; width: 120px;">
							<svg xmlns="http://www.w3.org/2000/svg" width="1.5rem" height="1.5rem" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
						</div>
					</label>
				}
			</div>
		}
	} else { 
		<div class="swift-alert">@Translate("No themes found")</div>
	}
</div>
