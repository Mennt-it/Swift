@inherits ViewModelTemplate<ListEditorViewModel<IEnumerable<string>>>
@using Dynamicweb.Rendering
@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Dynamicweb.Content.Items.Rendering

@{ 
	string editorId = Model.EditorId;
}

<style>
	.swift-sticker-option {
		cursor: pointer;
		box-sizing: border-box;
		height: 100%;
		display: flex;
		flex-direction: column;
		padding: 0.35em 0.65em;
		font-size: .75em;
		font-weight: 700;
		line-height: 1;
		color: #fff;
		background-color: #333;
		text-align: center;
		white-space: nowrap;
		vertical-align: baseline;
		border-radius: 0.25rem;
	}

	.swift-sticker-label {
		display: block;
		background-color: #F7F7F7;
		height: 100%;
	}

	.swift-sticker-label .swift-sticker-option {
		border: 4px solid #F7F7F7;
	}

	.swift-sticker-input:checked ~ .swift-sticker-label .swift-sticker-option {
		border: 4px solid #0085CA;
	}
</style>

<div style="display: flex; gap: 0.25rem; width: calc(100% - 40px)">
	@if (Model.Items is object) {
		foreach(var option in Model.Items){
			string foregroundColor = option.GetColor("ForegroundColor").Hex;
			string backgroundColor = option.GetColor("BackgroundColor").Hex;
		
			string stickerId = !string.IsNullOrWhiteSpace(option.GetString("StrickerOptionValue")) ? option.GetString("StrickerOptionValue") : "default";
			stickerId = stickerId.Replace(" ", "").Replace(",", "");

			<div>
				<input class="swift-sticker-input" type="checkbox" id="@(editorId)_@stickerId" name="@editorId"  value="@option.Id" @(Model.SelectedValue?.Any(v => v == option.Id) == true ? "checked" : "")  style="display: none" />
				<label class="swift-sticker-label" for="@(editorId)_@stickerId">
					<div class="swift-sticker-option" style="color: @foregroundColor; background-color: @backgroundColor">
						@option.GetString("Title")
					</div>
				</label>
			</div>
		}
	}
</div>
